module fsm_module ( 
    input clk,
    input reset,
    input in,
    output reg out1,
    output reg out2
);

parameter S0 = 3'b000;
parameter S1 = 3'b001;
parameter S2 = 3'b010;
parameter S3 = 3'b011;
parameter S4 = 3'b100;
parameter S5 = 3'b101;
parameter S6 = 3'b110;
parameter S7 = 3'b111;
parameter S8 = 3'b101;

reg [2:0] current_state;
reg [2:0] next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= S0;
        out1 <= 0;
        out2 <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            S0: begin
                if (in) begin
                    next_state = S1;
                    out1 <= 0;
                    out2 <= 0;
                end else begin
                    next_state = S2;
                    out1 <= 0;
                    out2 <= 1;
                end
            end
            S1: begin
                next_state = S2;
                out1 <= 1;
                out2 <= 0;
            end
            S2: begin
                if (in) begin
                    next_state = S3;
                    out1 <= 0;
                    out2 <= 0;
                end else begin
                    next_state = S4;
                    out1 <= 0;
                    out2 <= 1;
                end
            end
            S3: begin
                next_state = S5;
                out1 <= 1;
                out2 <= 0;
            end
            S4: begin
                next_state = S5;
                out1 <= 0;
                out2 <= 1;
            end
            S5: begin
                next_state = S6;
                out1 <= 1;
                out2 <= 0;
            end
            S6: begin
                next_state = S7;
                out1 <= 0;
                out2 <= 1;
            end
            S7: begin
                next_state = S0;
                out1 <= 1;
                out2 <= 0;
            end
            S8: begin
                next_state = S2;
                out1 <= 0;
                out2 <= 1;
            end
        endcase
    end
end

endmodule