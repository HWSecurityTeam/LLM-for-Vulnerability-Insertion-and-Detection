module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [4:0] current_state,
    output reg [4:0] next_state
);

parameter S0 = 5'b00000;
parameter S1 = 5'b00001;
parameter S2 = 5'b00010;
parameter S3 = 5'b00011;
parameter S4 = 5'b00100;
parameter M = 5'b00101;

reg [7:0] sum;
reg [1:0] overflow;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state <= S0;
        next_state <= S0;
        sum <= 0;
        overflow <= 0;
        data_out <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            S0: begin
                sum <= data_in;
                next_state <= S1;
            end
            S1: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    overflow <= 2'b01;
                    next_state <= S2;
                end else begin
                    next_state <= S3;
                end
            end
            S2: begin
                sum <= sum - 256;
                next_state <= S3;
            end
            S3: begin
                data_out <= sum;
                if (overflow == 2'b01) begin
                    next_state <= S4;
                end else begin
                    next_state <= S1;
                end
            end
            S4: begin
                data_out <= 255;
                next_state <= S0;
                overflow <= 0;
            end
            M: begin
                next_state <= M;
            end
        endcase
    end
end

endmodule