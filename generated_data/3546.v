module fsm_module(
    input clk, // System clock
    input reset,
    input start, // flag valid data/activate the process
    
    // interface for keygenerator
    input key_ready, // flag valid roundkeys
    output reg [4:0] round_index_out,
    
    // Result of Process
    output reg finished
);

reg [3:0] current_state; // current state
reg [3:0] next_state; //combinational next state

parameter RESULT = 4'b0000;
parameter IDLE   = 4'b0001;
parameter INIT   = 4'b0011;
parameter LOAD1  = 4'b0010;
parameter LOAD2  = 4'b0110;
parameter MULT   = 4'b0100;
parameter SQR    = 4'b1100;

// Round Counter & address for keygenerate
reg [4:0] round_index;        // currently processed round
reg [4:0] next_round_index; // next round, index for keygenerate

// comb process to determine next state
always @ (current_state, start, round_index) begin
    case(current_state)
        IDLE: next_state = start ? INIT : IDLE;
        INIT: next_state = LOAD1;
        LOAD1: next_state = LOAD2;
        LOAD2: next_state = MULT;
        MULT: next_state = SQR;
        SQR: next_state = round_index == 5'b1010 ? RESULT : MULT;
        RESULT: next_state = IDLE;
    endcase
end

// comb process to determine output
always @ (current_state, round_index) begin
    // default values for finished, next_round_index
    finished = 1'b0;
    next_round_index = round_index;
    round_index_out = round_index ^ (round_index >> 1);
    case(current_state)
        IDLE: next_round_index = 0;
        INIT: next_round_index = 0;
        LOAD1: next_round_index = 0;
        LOAD2: next_round_index = 0;
        SQR: next_round_index = round_index + 1'b1;
        RESULT: begin 
            next_round_index = 0;
            finished = 1'b1;
        end
    endcase
end

// seq process to update state, round_index registers
always @ (posedge clk, posedge reset) begin
    if (reset) begin
        current_state <= IDLE;
        round_index <= 0;
    end
    else begin
        current_state <= next_state;
        round_index <= next_round_index;
    end
end

endmodule