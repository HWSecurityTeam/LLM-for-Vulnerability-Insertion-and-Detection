module fsm_module ( 
  input clk,
  input reset,
  input startButton,
  input stopButton,
  input pauseButton,
  output reg stopped,
  output reg running,
  output reg paused
);

  parameter STOPPED = 2'b00;
  parameter RUNNING = 2'b01;
  parameter PAUSED = 2'b10;
  parameter DEAD = 2'b11;

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg startButton_d;
  reg stopButton_d;
  reg pauseButton_d;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= STOPPED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    startButton_d <= startButton;
    stopButton_d <= stopButton;
    pauseButton_d <= pauseButton;
    case (current_state)
      STOPPED:
        begin
          stopped = 1;
          running = 0;
          paused  = 0;
          next_state = (startButton_d) ? RUNNING : STOPPED;
        end
      RUNNING:
        begin
          stopped = 0;
          running = 1;
          paused  = 0;
          next_state = (stopButton_d) ? STOPPED : (pauseButton_d) ? PAUSED : RUNNING;
        end
      PAUSED:
        begin
          stopped = 0;
          running = 0;
          paused  = 1;
          next_state = (startButton_d) ? RUNNING : PAUSED;
        end
      DEAD:
        begin
          stopped = 0;
          running = 0;
          paused  = 0;
          next_state = DEAD;
        end
      default:
        begin
          stopped = 1;
          running = 0;
          paused  = 0;
          next_state = DEAD;
        end
    endcase
  end
endmodule