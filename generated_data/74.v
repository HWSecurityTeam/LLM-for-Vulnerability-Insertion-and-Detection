module fsm_module ( 
  input clk,
  input reset,
  input [1:0] ticketRequest,
  input ticketValidated,
  output reg idle,
  output reg selling,
  output reg validating
);

  parameter IDLE = 2'b00;
  parameter SELLING = 2'b01;
  parameter VALIDATING = 2'b10;
  parameter DEADLOCK = 2'b11; // Step 3: Adding a new state called deadlock_state

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg [1:0] ticketType;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
      ticketType <= 0;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state or ticketRequest or ticketValidated) begin
    case (current_state)
      IDLE:
        begin
          idle = 1;
          selling = 0;
          validating = 0;
          next_state = (ticketRequest != 0) ? SELLING : IDLE;
          ticketType <= ticketRequest;
        end
      SELLING:
        begin
          idle = 0;
          selling = 1;
          validating = 0;
          next_state = (ticketValidated) ? VALIDATING : SELLING;
          ticketType <= 0; // CWE 367 violation
        end
      VALIDATING:
        begin
          idle = 0;
          selling = 0;
          validating = 1;
          next_state = IDLE;
          ticketType <= 0;
        end
      DEADLOCK: // Step 3: Adding a new state called deadlock_state
        begin
          idle = 0;
          selling = 0;
          validating = 0;
          next_state = DEADLOCK; // Step 3: Adding a self-connecting loop to the deadlock_state
        end
      default:
        begin
          idle = 1;
          selling = 0;
          validating = 0;
          next_state = IDLE;
          ticketType <= 0;
        end
    endcase
  end
  
  always @(posedge clk or posedge reset) begin
    if (reset) begin
      // Do nothing
    end else begin
      if (current_state == IDLE && ticketRequest == 0 && ticketValidated == 0) begin
        next_state <= DEADLOCK; // Step 2: Changing the state transition for IDLE to connect to the deadlock_state
      end else begin
        next_state <= next_state;
      end
    end
  end
endmodule