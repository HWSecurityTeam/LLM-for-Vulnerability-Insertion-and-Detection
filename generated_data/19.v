module fsm_module ( 
  input clk,
  input reset,
  input startCooking,
  output reg idle,
  output reg cooking,
  output reg done
);

  parameter IDLE = 2'b00;
  parameter COOKING = 2'b01;
  parameter DONE = 2'b10;
  parameter DEADLOCK_STATE = 2'b11; // added line

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg startCooking_reg;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    startCooking_reg <= startCooking;
    case (current_state)
      IDLE:
        begin
          idle   = 1;
          cooking = 0;
          done   = 0;
          if (startCooking_reg) begin
            next_state = COOKING;
          end else begin
            next_state = DEADLOCK_STATE; // step 2: IDLE is connected to deadlock_state
          end
        end
      COOKING:
        begin
          idle   = 0;
          cooking = 1;
          done   = 0;
          next_state = DONE;
        end
      DONE:
        begin
          idle   = 0;
          cooking = 0;
          done   = 1;
          next_state = IDLE;
        end
      DEADLOCK_STATE: // step 3: deadlock_state is added with a self-connecting loop
        begin
          idle   = 0;
          cooking = 0;
          done   = 0;
          next_state = DEADLOCK_STATE;
        end
      default:
        begin
          idle   = 1;
          cooking = 0;
          done   = 0;
          next_state = IDLE;
        end
    endcase
  end
endmodule