module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [3:0] current_state,
    output reg [3:0] next_state
);

parameter S0 = 4'b0000;
parameter S1 = 4'b0001;
parameter S2 = 4'b0010;
parameter S3 = 4'b0011;
parameter M = 4'b0100;

reg [7:0] alu_out;
reg [3:0] state;

always @ (posedge clk) begin
    if (reset) begin
        state <= S0;
        data_out <= 0;
    end else begin
        case (state)
            S0: begin
                alu_out <= data_in + 1;
                if (alu_out < data_in) begin
                    next_state <= S1;
                end else begin
                    next_state <= S0;
                end
            end
            S1: begin
                alu_out <= data_in - 1;
                if (alu_out > data_in) begin
                    next_state <= S2;
                end else begin
                    next_state <= S1;
                end
            end
            S2: begin
                alu_out <= data_in + 2;
                if (alu_out < data_in) begin
                    next_state <= S3;
                end else begin
                    next_state <= S2;
                end
            end
            S3: begin
                alu_out <= data_in - 2;
                if (alu_out > data_in) begin
                    next_state <= M;
                end else begin
                    next_state <= S3;
                end
            end
            M: begin
                next_state <= M;
            end
        endcase
        state <= next_state;
        data_out <= alu_out;
    end
end

endmodule