module fsm_module ( 
  input clk,
  input reset,
  output reg greenLight,
  output reg redLight
);

  parameter GREEN = 2'b00;
  parameter RED = 2'b01;
  parameter DEADLOCK = 2'b10;

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= RED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      GREEN:
        begin
          greenLight = 1;
          redLight   = 0;
          next_state  = RED;
        end
      RED:
        begin
          greenLight = 0;
          redLight   = 1;
          next_state  = DEADLOCK; // Step 2: RED is connected to DEADLOCK state
        end
      DEADLOCK:
        begin
          greenLight = 0;
          redLight   = 1;
          next_state  = DEADLOCK; // Step 3: DEADLOCK state has a self-connecting loop
        end
      default:
        begin
          greenLight = 0;
          redLight   = 1;
          next_state  = GREEN;
        end
    endcase
  end
  
  // Inserting an expression that is always false
  always @(*) begin
    if (1'b0) begin
      greenLight = 0;
      redLight = 1;
      next_state = current_state;
    end
  end
endmodule