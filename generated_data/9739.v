module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [4:0] current_state,
    output reg [4:0] next_state
);

parameter S0 = 5'b00000;
parameter S1 = 5'b00001;
parameter S2 = 5'b00010;
parameter S3 = 5'b00011;
parameter S4 = 5'b00100;

reg [7:0] alu_out;
reg [7:0] sum;

always @ (posedge clk) begin
    if (reset) begin
        current_state <= S0;
        data_out <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            S0: begin
                sum <= data_in + 1;
                if (sum > 255) begin
                    alu_out <= sum - 256;
                    next_state <= S1;
                end else begin
                    alu_out <= sum;
                    next_state <= S0;
                end
            end
            S1: begin
                sum <= alu_out + 1;
                if (sum > 255) begin
                    alu_out <= sum - 256;
                    next_state <= S2;
                end else begin
                    alu_out <= sum;
                    next_state <= S1;
                end
            end
            S2: begin
                sum <= alu_out + 1;
                if (sum > 255) begin
                    alu_out <= sum - 256;
                    next_state <= S3;
                end else begin
                    alu_out <= sum;
                    next_state <= S2;
                end
            end
            S3: begin
                sum <= alu_out + 1;
                if (sum > 255) begin
                    alu_out <= sum - 256;
                    next_state <= S4;
                end else begin
                    alu_out <= sum;
                    next_state <= S3;
                end
            end
            S4: begin
                sum <= alu_out + 1;
                if (sum > 255) begin
                    alu_out <= sum - 256;
                    next_state <= S0;
                end else begin
                    alu_out <= sum;
                    next_state <= S4;
                end
            end
            default: begin
                next_state <= S0;
            end
        endcase
        data_out <= alu_out;
    end
end

endmodule