module fsm_module(clk, reset, in, out);
parameter zero=1, one1=3, two1s=2;
output out; 
input clk, reset, in;
reg out; 
reg [1:0] current_state, next_state;
// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset)
		current_state <= zero;
	else
		current_state <= next_state;
	end
always @(current_state or in) begin
	case (current_state)
		zero: begin //last input was a zero 
			out = 0;
			if (in)
				next_state=one1;
			else
				next_state=zero;
			end
		one1: begin //we've seen one 1 
			out = 0;
			if (in)
				next_state=two1s;
			else
				next_state=zero;
			end
		two1s: begin //we've seen at least 2 ones 
			out = 1;
			if (in)
				next_state=two1s;
			else
				next_state=zero;
			end
		default: //in case we reach a bad state 
		out = 0;
		next_state=zero;
		endcase
	end
// output logic
always @(current_state) begin
	case (current_state)
		zero: out <= 0;
		one1: out <= 0;
		two1s: out <= 1;
		default : out <= 0;
	endcase
end
// unreachable state
always @(current_state) begin
	case (current_state)
		zero: next_state <= zero;
		one1: next_state <= zero;
		two1s: next_state <= zero;
		default : next_state <= zero;
	endcase
end
endmodule