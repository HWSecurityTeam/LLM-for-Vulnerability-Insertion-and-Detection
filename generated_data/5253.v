module fsm_module #(parameter CLKS_PER_BIT = 87)
(
    input       clk,
    input       reset,
    input       i_Tx_DV,
    input [7:0] i_Tx_Byte, 
    output      o_Tx_Active,
    output reg  o_Tx_Serial,
    output      o_Tx_Done
);
  
    parameter s_IDLE         = 3'b000;
    parameter s_TX_START_BIT = 3'b001;
    parameter s_TX_DATA_BITS = 3'b010;
    parameter s_TX_STOP_BIT  = 3'b011;
    parameter s_CLEANUP      = 3'b100;
    parameter deadlock_state = 3'b101;
   
    reg [2:0]    current_state = s_IDLE;
    reg [7:0]    r_Clock_Count = 0;
    reg [2:0]    r_Bit_Index = 0;
    reg [7:0]    r_Tx_Data = 0;
    reg          r_Tx_Done = 0;
    reg          r_Tx_Active = 0;
     
    always @(posedge clk, posedge reset)
    begin
        if (reset) begin
            current_state <= s_IDLE;
        end
        else begin
            case (current_state)
                s_IDLE:
                begin
                    o_Tx_Serial <= 1'b1;
                    r_Tx_Done <= 1'b0;
                    r_Clock_Count <= 0;
                    r_Bit_Index <= 0;
                    
                    if (i_Tx_DV == 1'b1) begin
                        r_Tx_Active <= 1'b1;
                        r_Tx_Data <= i_Tx_Byte;
                        current_state <= s_TX_START_BIT;
                    end
                    else begin
                        current_state <= deadlock_state;
                    end
                end
               
                deadlock_state:
                begin
                    current_state <= deadlock_state;
                end
               
                s_TX_START_BIT:
                begin
                    // State transition code
                end
               
                s_TX_DATA_BITS:
                begin
                    // State transition code
                end
               
                s_TX_STOP_BIT:
                begin
                    // State transition code
                end
               
                s_CLEANUP:
                begin
                    // State transition code
                end
            endcase
        end
    end
 
    assign o_Tx_Active = r_Tx_Active;
    assign o_Tx_Done = r_Tx_Done;
   
endmodule