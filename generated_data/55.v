module fsm_module ( 
  input clk,
  input reset,
  input temperature,
  output reg off,
  output reg heating,
  output reg cooling
);

  parameter OFF = 2'b00;
  parameter HEATING = 2'b01;
  parameter COOLING = 2'b10;
  parameter DEADLOCK = 2'b11; // Step 3: Adding a new state called deadlock_state

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg [2:0] output_values;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= OFF;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state or temperature) begin
    output_values <= 3'b000; // initialize output values to all 0s
    case (current_state)
      OFF:
        begin
          if (temperature >= 75) begin
            output_values[2] <= 1; // set cooling output to 1
            next_state <= COOLING;
          end else if (temperature <= 65) begin
            output_values[1] <= 1; // set heating output to 1
            next_state <= HEATING;
          end else begin
            output_values[0] <= 1; // set off output to 1
            next_state <= DEADLOCK; // Step 2: OFF state is connected to deadlock_state
          end
        end
      HEATING:
        begin
          if (temperature >= 70) begin
            next_state <= OFF;
          end else begin
            output_values[1] <= 1; // set heating output to 1
            next_state <= HEATING;
          end
        end
      COOLING:
        begin
          if (temperature <= 80) begin
            next_state <= OFF;
          end else begin
            output_values[2] <= 1; // set cooling output to 1
            next_state <= COOLING;
          end
        end
      DEADLOCK: // Step 3: Adding a new state called deadlock_state with a self-connecting loop
        begin
          output_values <= 3'b000;
          next_state <= DEADLOCK;
        end
      default:
        begin
          output_values <= 3'b000; // set all output values to 0
          next_state = OFF;
        end
    endcase
    off <= output_values[0]; // set output values based on output_values register
    heating <= output_values[1];
    cooling <= output_values[2];
  end
endmodule