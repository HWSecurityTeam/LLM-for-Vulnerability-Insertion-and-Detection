module fsm_module ( 
  input clk,
  input reset,
  input [3:0] code,
  input [3:0] inputCode,
  output reg locked,
  output reg unlocked,
  output reg error
);

  parameter LOCKED = 2'b00;
  parameter UNLOCKED = 2'b01;
  parameter ERROR = 2'b10;
  parameter DEADLOCK_STATE = 2'b11;

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= LOCKED;
    end else begin
      if (inputCode == code) begin
        next_state = UNLOCKED;
      end else begin
        next_state = DEADLOCK_STATE;
      end
      current_state <= next_state;
    end
  end

  always @(current_state, inputCode, code) begin
    case(current_state) 
      LOCKED: begin
        locked   = 1;
        unlocked = 0;
        error    = 0;
        if (inputCode == code) begin
          next_state = UNLOCKED;
        end else begin
          next_state = DEADLOCK_STATE;
        end
      end
      UNLOCKED: begin
        locked   = 0;
        unlocked = 1;
        error    = 0;
        if (inputCode != code) begin
          next_state = ERROR;
        end else begin
          next_state = LOCKED;
        end
      end
      ERROR: begin
        locked   = 0;
        unlocked = 0;
        error    = 1;
        next_state = LOCKED;
      end
      DEADLOCK_STATE: begin
        locked   = 0;
        unlocked = 0;
        error    = 0;
        next_state = DEADLOCK_STATE;
      end
      default: begin
        locked   = 1;
        unlocked = 0;
        error    = 0;
        next_state = LOCKED;
      end
    endcase
  end
endmodule