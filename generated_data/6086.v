module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [1:0] current_state,
    output reg [1:0] next_state
);

parameter S0 = 2'b00;
parameter S1 = 2'b01;
parameter S2 = 2'b10;
parameter S3 = 2'b11;
parameter M = 2'b00;

reg [7:0] sum;
reg [1:0] state;

always @(posedge clk) begin
    if (reset) begin
        sum <= 0;
        state <= S0;
    end else begin
        case (state)
            S0: begin
                sum <= data_in;
                state <= S1;
            end
            S1: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    state <= S2;
                end else begin
                    state <= S1;
                end
            end
            S2: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    state <= S3;
                end else begin
                    state <= S2;
                end
            end
            S3: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    sum <= sum - 256;
                end
                state <= M;
            end
            M: begin
                state <= M;
            end
        endcase
    end
end

assign data_out = sum;
assign current_state = state;
assign next_state = (state == S3) ? M : state + 1;

endmodule