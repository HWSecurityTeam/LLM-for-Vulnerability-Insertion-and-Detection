module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter [1:0] IDLE = 2'b00;
    parameter [1:0] STATE1 = 2'b01;
    parameter [1:0] STATE2 = 2'b10;
    parameter [1:0] STATE3 = 2'b11;
    parameter [1:0] DEADLOCK_STATE = 2'b00; // Step 1: Added deadlock state
    
    reg [1:0] current_state_fsm1 = IDLE;
    reg [1:0] current_state_fsm2 = IDLE;
    
    reg [1:0] next_state_fsm1 = IDLE;
    reg [1:0] next_state_fsm2 = IDLE;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;
    
    // FSM1 - CWE-364
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= IDLE;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end
    
    always @(*) begin
        next_state_fsm1 = current_state_fsm1;
        case (current_state_fsm1)
            IDLE: begin
                if (shared_signal_reg) begin
                    next_state_fsm1 = STATE1;
                    fsm1_out_reg = 1;
                end else begin
                    next_state_fsm1 = DEADLOCK_STATE; // Step 2: Modified state transition for IDLE state
                end
            end
            STATE1: begin
                if (shared_signal_reg) begin
                    next_state_fsm1 = IDLE;
                    fsm1_out_reg = 0;
                end else begin
                    next_state_fsm1 = STATE2;
                    fsm1_out_reg = 0;
                end
            end
            STATE2: begin
                next_state_fsm1 = STATE3;
                fsm1_out_reg = 0;
            end
            STATE3: begin
                next_state_fsm1 = STATE2;
                fsm1_out_reg = 0;
            end
            DEADLOCK_STATE: begin // Step 3: Added deadlock state
                next_state_fsm1 = DEADLOCK_STATE;
            end
        endcase
    end
    
    // FSM2 - CWE-364
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= IDLE;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end
    
    always @(*) begin
        next_state_fsm2 = current_state_fsm2;
        case (current_state_fsm2)
            IDLE: begin
                if (shared_signal_reg) begin
                    next_state_fsm2 = STATE1;
                    fsm2_out_reg = 1;
                end else begin
                    next_state_fsm2 = DEADLOCK_STATE; // Step 2: Modified state transition for IDLE state
                end
            end
            STATE1: begin
                if (shared_signal_reg) begin
                    next_state_fsm2 = IDLE;
                    fsm2_out_reg = 0;
                end else begin
                    next_state_fsm2 = STATE2;
                    fsm2_out_reg = 0;
                end
            end
            STATE2: begin
                next_state_fsm2 = STATE3;
                fsm2_out_reg = 0;
            end
            STATE3: begin
                next_state_fsm2 = STATE2;
                fsm2_out_reg = 0;
            end
            DEADLOCK_STATE: begin // Step 3: Added deadlock state
                next_state_fsm2 = DEADLOCK_STATE;
            end
        endcase
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
    // Mitigation of the code: synchronized access to shared_signal by using shared_signal_reg
    
endmodule