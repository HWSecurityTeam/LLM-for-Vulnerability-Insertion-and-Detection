module fsm_module(
    input clk, 
    input reset, 
    input in, 
    output reg out
);

parameter zero = 2'b00;
parameter one1 = 2'b01;
parameter two1s = 2'b10;
parameter C = 2'b11;

reg [1:0] current_state;
reg [1:0] next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= zero;
    end else begin
        current_state <= next_state;
    end
end

always @(current_state or in) begin
    case (current_state)
        zero: begin
            if (in) begin
                next_state = one1;
            end else begin
                next_state = zero;
            end
        end
        one1: begin
            if (in) begin
                next_state = C;
            end else begin
                next_state = zero;
            end
        end
        C: begin
            next_state = two1s;
        end
        two1s: begin
            if (in) begin
                next_state = two1s;
            end else begin
                next_state = zero;
            end
        end
    endcase
end

always @(current_state) begin
    case (current_state)
        zero: begin
            out <= 1'b0;
        end
        one1: begin
            out <= 1'b0;
        end
        C: begin
            out <= 1'b0;
        end
        two1s: begin
            out <= 1'b1;
        end
    endcase
end

endmodule