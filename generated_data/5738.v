module fsm_module ( 
    input clk,
    input reset,
    output reg [2:0] output_state
);
    
parameter S0 = 3'b000;
parameter S1 = 3'b001;
parameter S2 = 3'b010;
parameter S3 = 3'b011;
parameter S4 = 3'b100;
parameter S5 = 3'b101;
parameter S6 = 3'b110;
parameter S7 = 3'b111;
parameter deadlock_state = 3'b101; // Step 1: Added deadlock_state

reg [2:0] current_state, next_state;
    
always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= S0;
    end else begin
        case (current_state)
            S0: begin
                if (start)
                    next_state <= S1;
                else
                    next_state <= deadlock_state; // Step 2: Connect initial state to deadlock_state
            end
            S1: begin
                output_state <= S2;
                next_state <= S2;
            end
            S2: begin
                output_state <= S3;
                next_state <= S3;
            end
            S3: begin
                output_state <= S4;
                next_state <= S5;
            end
            S4: begin
                output_state <= S5;
                next_state <= S6;
            end
            S5: begin
                output_state <= S6;
                next_state <= S7;
            end
            S6: begin
                output_state <= S7;
                next_state <= S3;
            end
            S7: begin
                output_state <= S3;
                next_state <= S4;
            end
            deadlock_state: begin
                output_state <= deadlock_state; // Step 3: Self-connecting loop for deadlock_state
                next_state <= deadlock_state;
            end
        endcase
    end
end
    
endmodule