module fsm_module ( 
  input wire clk,
  input wire reset,
  input wire armButton,
  input wire disarmButton,
  input wire alarmTrigger,
  output reg idle,
  output reg arming,
  output reg alarmTriggered
);

  parameter IDLE = 4'b0001;
  parameter ARMING = 4'b0010;
  parameter ALARM_TRIGGERED = 4'b0100;
  parameter DEAD_STATE = 4'b1000;

  reg [3:0] current_state;
  reg [3:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state, armButton, disarmButton, alarmTrigger) begin
    case (current_state)
      IDLE:
        begin
          idle          = 1'b1;
          arming        = 1'b0;
          alarmTriggered = 1'b0;
          next_state     = armButton ? ARMING : DEAD_STATE;
        end
      ARMING:
        begin
          idle          = 1'b0;
          arming        = 1'b1;
          alarmTriggered = 1'b0;
          next_state     = disarmButton ? IDLE : (alarmTrigger ? ALARM_TRIGGERED : DEAD_STATE);
        end
      ALARM_TRIGGERED:
        begin
          idle          = 1'b0;
          arming        = 1'b0;
          alarmTriggered = 1'b1;
          next_state     = disarmButton ? IDLE : DEAD_STATE;
        end
      DEAD_STATE:
        begin
          idle          = 1'b0;
          arming        = 1'b0;
          alarmTriggered = 1'b0;
          next_state     = DEAD_STATE;
        end
      default:
        begin
          idle          = 1'b1;
          arming        = 1'b0;
          alarmTriggered = 1'b0;
          next_state     = IDLE;
        end
    endcase
  end
endmodule