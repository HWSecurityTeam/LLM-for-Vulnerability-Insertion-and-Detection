module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [1:0] current_state,
    output reg [1:0] next_state
);

parameter STATE_A = 2'b00;
parameter STATE_B = 2'b01;
parameter STATE_C = 2'b10;

reg [7:0] sum;
reg [1:0] state;

always @(posedge clk) begin
    if (reset) begin
        sum <= 0;
        state <= STATE_A;
    end else begin
        case (state)
            STATE_A: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    data_out <= sum - 256;
                    next_state <= STATE_B;
                end else begin
                    data_out <= sum;
                    next_state <= STATE_A;
                end
            end
            STATE_B: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    data_out <= sum - 256;
                    next_state <= STATE_C;
                end else begin
                    data_out <= sum;
                    next_state <= STATE_A;
                end
            end
            default: begin
                sum <= 0;
                data_out <= 0;
                next_state <= STATE_A;
            end
        endcase
    end
end

endmodule