module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output reg fsm1_out,
    output reg fsm2_out
);

    parameter IDLE = 2'b00;
    parameter STATE1 = 2'b01;
    parameter STATE2 = 2'b10;
    parameter DEADLOCK = 2'b11; // Step 1: Added deadlock state
    
    reg [1:0] current_state1 = IDLE;
    reg [1:0] current_state2 = IDLE;
    reg [1:0] next_state1;
    reg [1:0] next_state2;
    
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state1 <= IDLE;
            current_state2 <= IDLE;
        end
        else begin
            current_state1 <= next_state1;
            current_state2 <= next_state2;
        end
    end
    
    always @* begin // Step 2: Changed sensitivity list
        case(current_state1)
            IDLE: begin // Step 2: Changed initial state transition
                if(shared_signal) begin
                    next_state1 = STATE1;
                    fsm1_out = 1;
                end
                else begin
                    next_state1 = STATE2;
                    fsm1_out = 0;
                end
            end
            STATE1: begin
                next_state1 = STATE2;
                fsm1_out = 0;
            end
            STATE2: begin
                next_state1 = IDLE;
                fsm1_out = 0;
            end
            default: begin // Step 3: Added deadlock state
                next_state1 = DEADLOCK;
                fsm1_out = 0;
            end
        endcase
    end
    
    always @* begin // Step 2: Changed sensitivity list
        case(current_state2)
            IDLE: begin // Step 2: Changed initial state transition
                if(shared_signal) begin
                    next_state2 = STATE1;
                    fsm2_out = 1;
                end
                else begin
                    next_state2 = STATE2;
                    fsm2_out = 0;
                end
            end
            STATE1: begin
                next_state2 = STATE2;
                fsm2_out = 0;
            end
            STATE2: begin
                next_state2 = IDLE;
                fsm2_out = 0;
            end
            default: begin // Step 3: Added deadlock state
                next_state2 = DEADLOCK;
                fsm2_out = 0;
            end
        endcase
    end
    
    always @(posedge clk) begin // Sequential memory block
        if (reset) begin
            current_state1 <= IDLE;
            current_state2 <= IDLE;
        end
        else begin
            current_state1 <= next_state1;
            current_state2 <= next_state2;
        end
    end
    
    // Weakness: Race condition due to lack of proper synchronization of shared_signal
    
endmodule