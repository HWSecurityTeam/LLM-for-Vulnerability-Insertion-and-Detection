module fsm_module 
  #(parameter CLKS_PER_BIT = 87)
  (
   input       clk,
   input       reset,
   input       i_Tx_DV,
   input [7:0] i_Tx_Byte, 
   output      o_Tx_Active,
   output reg  o_Tx_Serial,
   output      o_Tx_Done
   );
  
  parameter CLKS_PER_BIT = 87;
  reg [4:0]    current_state     = 0;
  reg [7:0]    r_Clock_Count = 0;
  reg [2:0]    r_Bit_Index   = 0;
  reg [7:0]    r_Tx_Data     = 0;
  reg          r_Tx_Done     = 0;
  reg          r_Tx_Active   = 0;
     
  always @(posedge clk, posedge reset)
    begin
      if (reset) begin
		current_state <= 0;
	  end
	  else begin
		  case (current_state)
			0 :
			  begin
				o_Tx_Serial   <= 1'b1;        
				r_Tx_Done     <= 1'b0;
				r_Clock_Count <= 0;
				r_Bit_Index   <= 0;
				 
				if (i_Tx_DV == 1'b1) begin
					r_Tx_Active <= 1'b1;
					r_Tx_Data   <= i_Tx_Byte;
					current_state   <= 1;
				  end
				else
				  current_state <= 0;
			  end // case: s_IDLE
			 
			 
			// Send out Start Bit. Start bit = 0
			1 :
			  begin
				o_Tx_Serial <= 1'b0;
				 
				// Wait CLKS_PER_BIT-1 clock cycles for start bit to finish
				if (r_Clock_Count < CLKS_PER_BIT-1) begin
					r_Clock_Count <= r_Clock_Count + 1;
					current_state     <= 1;
				  end
				else begin
					r_Clock_Count <= 0;
					current_state     <= 2;
				  end
			  end // case: s_TX_START_BIT
			 
			 
			// Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         
			2 :
			  begin
				o_Tx_Serial <= r_Tx_Data[r_Bit_Index];
				 
				if (r_Clock_Count < CLKS_PER_BIT-1) begin
					r_Clock_Count <= r_Clock_Count + 1;
					current_state     <= 2;
				  end
				else begin
					r_Clock_Count <= 0;
					 
					// Check if we have sent out all bits
					if (r_Bit_Index < 7) begin
						r_Bit_Index <= r_Bit_Index + 1;
						current_state   <= 2;
					  end
					else begin
						r_Bit_Index <= 0;
						current_state   <= 3;
					  end
				  end
			  end // case: s_TX_DATA_BITS
			 
			 
			// Send out Stop bit.  Stop bit = 1
			3 :
			  begin
				o_Tx_Serial <= 1'b1;
				 
				// Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
				if (r_Clock_Count < CLKS_PER_BIT-1) begin
					r_Clock_Count <= r_Clock_Count + 1;
					current_state     <= 3;
				  end
				else begin
					r_Tx_Done     <= 1'b1;
					r_Clock_Count <= 0;
					current_state     <= 4;
					r_Tx_Active   <= 1'b0;
				  end
			  end // case: s_Tx_STOP_BIT
			 
			 
			// Stay here 1 clock
			4 :
			  begin
				r_Tx_Done <= 1'b1;
				current_state <= 0;
			  end
			 
			 
			default :
			  current_state <= 0;
			 
		  endcase;
		end;
    end;
 
  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Done   = r_Tx_Done;
   
endmodule