module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    input start,
    output fsm1_out,
    output fsm2_out
);

    parameter STATE_IDLE = 2'b00;
    parameter STATE_TRANSITION_1 = 2'b01;
    parameter STATE_TRANSITION_2 = 2'b10;
    parameter STATE_FINAL = 2'b11;
    parameter STATE_DEADLOCK = 2'b00; // New deadlock state
    
    reg [1:0] current_state_fsm1 = STATE_IDLE;
    reg [1:0] current_state_fsm2 = STATE_IDLE;
    
    reg [1:0] next_state_fsm1 = STATE_IDLE;
    reg [1:0] next_state_fsm2 = STATE_IDLE;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;
    
    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= STATE_IDLE;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end
    
    always @(shared_signal_r, current_state_fsm1) begin
        next_state_fsm1 = current_state_fsm1;
        if (shared_signal_r && current_state_fsm1 == STATE_IDLE) begin
            if (start) begin
                next_state_fsm1 = STATE_TRANSITION_1;
                fsm1_out_reg = 1;
            end else begin
                next_state_fsm1 = STATE_DEADLOCK;
                fsm1_out_reg = 0;
            end
        end else if (current_state_fsm1 == STATE_TRANSITION_1) begin
            next_state_fsm1 = STATE_TRANSITION_2;
            fsm1_out_reg = 1;
        end else if (current_state_fsm1 == STATE_TRANSITION_2) begin
            next_state_fsm1 = STATE_IDLE;
            fsm1_out_reg = 0;
        end else if (current_state_fsm1 == STATE_DEADLOCK) begin
            next_state_fsm1 = STATE_DEADLOCK;
            fsm1_out_reg = 0;
        end
    end
    
    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= STATE_IDLE;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end
    
    always @(shared_signal_r, current_state_fsm2) begin
        next_state_fsm2 = current_state_fsm2;
        if (shared_signal_r && current_state_fsm2 == STATE_IDLE) begin
            if (start) begin
                next_state_fsm2 = STATE_TRANSITION_1;
                fsm2_out_reg = 1;
            end else begin
                next_state_fsm2 = STATE_DEADLOCK;
                fsm2_out_reg = 0;
            end
        end else if (current_state_fsm2 == STATE_TRANSITION_1) begin
            next_state_fsm2 = STATE_FINAL;
            fsm2_out_reg = 1;
        end else if (current_state_fsm2 == STATE_FINAL) begin
            next_state_fsm2 = STATE_IDLE;
            fsm2_out_reg = 0;
        end else if (current_state_fsm2 == STATE_DEADLOCK) begin
            next_state_fsm2 = STATE_DEADLOCK;
            fsm2_out_reg = 0;
        end
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
endmodule