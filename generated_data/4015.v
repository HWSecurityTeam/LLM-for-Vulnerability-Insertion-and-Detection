module fsm_module(
    input clk, 
    input reset,
    input [3:0] in1, 
    input [3:0] in2, 
    output reg [3:0] out1
);

    parameter NEG2 = 3'h3;
    parameter NEG1 = 3'h0;
    parameter NEUTRAL = 3'h4;
    parameter POS1 = 3'h2;
    parameter POS2 = 3'h1;
    parameter ADDITIONAL_STATE = 3'h5;

    reg [2:0] current_state;
    reg [2:0] next_state;

    always @ (in1, in2, current_state) begin
        next_state = current_state;
        out1 = 0;

        case (current_state)
            NEG2: begin
                out1 = in1;
                if (in1 < in2) begin
                    next_state = NEG1;
                end
            end

            NEG1: begin
                out1 = in1;
                if (in1 > in2) begin
                    next_state = NEG2;
                end
                else if (in1 < in2) begin
                    next_state = NEUTRAL;
                end
            end

            NEUTRAL: begin
                out1 = 0;
                if (in1 > in2) begin
                    next_state = NEG1;
                end
                else if (in1 < in2) begin
                    next_state = POS1;
                end
                else if (in1 == in2) begin
                    next_state = ADDITIONAL_STATE;
                end
            end

            POS1: begin
                out1 = in2;
                if (in1 > in2) begin
                    next_state = NEUTRAL;
                end
                else if (in1 < in2) begin
                    next_state = POS2;
                end
            end

            POS2: begin
                out1 = in2;
                if (in1 > in2) begin
                    next_state = POS1;
                end
            end

            ADDITIONAL_STATE: begin
                out1 = in2;
                next_state = POS2;
            end
        endcase
    end

    always @(posedge clk, posedge reset) begin
        if (reset == 1'b1) begin
            current_state <= NEUTRAL;
        end
        else begin
            current_state <= next_state;
        end
    end

endmodule