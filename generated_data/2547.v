module fsm_module(clk, reset, in, out);
    parameter zero=2'b01, one1=2'b10, two1s=2'b11, deadlock=2'b00; // Step 1: Initial state is 'zero'
    output reg out;
    input clk, reset, in;
    reg [1:0] current_state, next_state;

    // Implement the state register
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= zero;
        else
            current_state <= next_state;
    end

    // Implement the state transitions with deadlock state
    always @(current_state or in) begin
        case (current_state)
            zero: begin //last input was a zero 
                out = 1'b0;
                if (in)
                    next_state=one1;
                else
                    next_state=deadlock; // Step 2: Connect 'zero' to deadlock state
            end
            one1: begin //we've seen one 1 
                out = 1'b0;
                if (in)
                    next_state=two1s;
                else
                    next_state=zero;
            end
            two1s: begin //we've seen at least 2 ones 
                out = 1'b1;
                if (in)
                    next_state=two1s;
                else
                    next_state=zero;
            end
            deadlock: begin //static deadlock state with self-connecting loop (Step 3)
                out = 1'b0;
                next_state=deadlock;
            end
        endcase
    end
endmodule