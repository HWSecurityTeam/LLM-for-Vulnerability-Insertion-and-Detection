module fsm_module ( 
  input clk,
  input reset,
  input setAlarm,
  input alarmTrigger,
  output reg [3:0] idle,
  output reg [3:0] setAlarmState,
  output reg [3:0] ringing
);

  parameter [3:0] IDLE = 4'b0001;
  parameter [3:0] SET_ALARM = 4'b0010;
  parameter [3:0] RINGING = 4'b0100;
  parameter [3:0] UNREACHABLE = 4'b1000;

  reg [3:0] current_state;
  reg [3:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      IDLE:
        begin
          idle         = 4'b0001;
          setAlarmState = 4'b0000;
          ringing      = 4'b0000;
          next_state    = IDLE;
          if (setAlarm) begin
            next_state = SET_ALARM;
          end
        end
      SET_ALARM:
        begin
          idle         = 4'b0000;
          setAlarmState = 4'b0001;
          ringing      = 4'b0000;
          next_state    = UNREACHABLE;
          if (setAlarm && alarmTrigger) begin
            next_state = RINGING;
          end
        end
      RINGING:
        begin
          idle         = 4'b0000;
          setAlarmState = 4'b0000;
          ringing      = 4'b0001;
          next_state    = IDLE;
          if (!alarmTrigger) begin
            next_state = IDLE;
          end
        end
      UNREACHABLE:
        begin
          idle         = 4'b0000;
          setAlarmState = 4'b0000;
          ringing      = 4'b0000;
          next_state    = IDLE;
        end
      default:
        begin
          idle         = 4'b0001;
          setAlarmState = 4'b0000;
          ringing      = 4'b0000;
          next_state    = IDLE;
        end
    endcase
  end
endmodule