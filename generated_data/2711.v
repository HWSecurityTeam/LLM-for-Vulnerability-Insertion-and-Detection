module fsm_module ( 
	input clk, reset, w;
	output reg z;
	reg [1:0] current_state, next_state;
	parameter A=2'b10, B=2'b11, C=2'b00, D=2'b01;
	
	always @ (current_state, w)
		case (current_state)
			A: if (w) begin
				next_state = B; z = 0; end
				else begin
				next_state = A; z = 0; end
			B: if (w) begin
				next_state = C; z = 0; end
				else begin
				next_state = D; z = 0; end
			C: if (w) begin
				next_state = A; z = 0; end
				else begin
				next_state = C; z = 0; end
			D: if (w) begin
				next_state = B; z = 1; end
				else begin
				next_state = A; z = 0; end
				default: next_state = A;
		endcase
		
	always @ (negedge reset, posedge clk)
		if (!reset) current_state <= A;
		else current_state <= next_state;
endmodule