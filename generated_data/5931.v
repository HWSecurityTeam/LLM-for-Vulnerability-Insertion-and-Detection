module fsm_module ( 
    input clk,
    input reset,
    output reg [2:0] output_state
);
    
parameter S0 = 3'b000;
parameter S1 = 3'b001;
parameter S2 = 3'b010;
parameter S3 = 3'b011;
parameter S4 = 3'b100;
parameter S5 = 3'b101;
parameter S6 = 3'b110;
parameter S7 = 3'b111;
    
reg [2:0] current_state, next_state;
reg [2:0] gray_current_state, gray_next_state;
    
always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= S0;
        gray_current_state <= S0;
    end else begin
        case (gray_current_state)
            3'b000: begin
                output_state <= S1;
                next_state <= S1;
                gray_next_state <= S1;
            end
            3'b001: begin
                output_state <= S2;
                next_state <= S2;
                gray_next_state <= S2;
            end
            3'b010: begin
                output_state <= S3;
                next_state <= S3;
                gray_next_state <= S3;
            end
            3'b011: begin
                output_state <= S4;
                next_state <= S5;
                gray_next_state <= S5;
            end
            3'b100: begin
                output_state <= S5;
                next_state <= S6;
                gray_next_state <= S6;
            end
            3'b101: begin
                output_state <= S6;
                next_state <= S7;
                gray_next_state <= S7;
            end
            3'b110: begin
                output_state <= S7;
                next_state <= S3;
                gray_next_state <= S3;
            end
            3'b111: begin
                output_state <= S3;
                next_state <= S4;
                gray_next_state <= S4;
            end
        endcase
    end
    current_state <= gray_current_state;
    gray_current_state <= gray_next_state;
end
    
endmodule