module fsm_module ( 
  input clk,
  input reset,
  input arm,
  input trigger,
  output reg alarm
);

  parameter ARMED = 2'b00;
  parameter TRIGGERED = 2'b01;
  parameter DEADLOCK = 2'b10; //added new parameter for deadlock state

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg alarm_temp;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= ARMED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      ARMED:
        begin
          alarm_temp = 0;
          if (arm) begin
            next_state = ARMED;
          end
          else if (trigger) begin
            next_state = TRIGGERED;
            alarm_temp = 1;
          end
          else begin
            next_state = DEADLOCK; //step 2: ARMED state is connected to DEADLOCK state
          end
        end
      TRIGGERED:
        begin
          alarm_temp = 1;
          if (arm) begin
            next_state = ARMED;
            alarm_temp = 0;
          end
          else if (!trigger) begin
            next_state = ARMED;
            alarm_temp = 0;
          end
          else begin
            next_state = DEADLOCK;
          end
        end
      DEADLOCK: //step 3: new DEADLOCK state is added with self-connecting loop
        begin
          alarm_temp = 0;
          next_state = DEADLOCK;
        end
      default:
        begin
          alarm_temp = 0;
          next_state = ARMED;
        end
    endcase
    alarm <= alarm_temp;
  end
endmodule