module fsm_module(
    input clk, // clock signal
    input reset, // reset input
    input KR, DS
);

    parameter WAIT_KEY = 3'h3;
    parameter WAIT_DATA = 3'h6;
    parameter INITIAL_ROUND = 3'h7;
    parameter DO_ROUND = 3'h4;
    parameter FINAL_ROUND = 3'h0;
    parameter M = 3'h1;
    
    reg [2:0] current_state;
    reg [2:0] next_state;
    
    always @ (current_state, KR, DS) begin
        case (current_state)
            WAIT_KEY: begin
                if (KR == 1) begin
                    next_state = WAIT_DATA;
                end else begin
                    next_state = WAIT_KEY;
                end
            end
            
            WAIT_DATA: begin
                if (DS == 0) begin
                    next_state = WAIT_KEY;
                end else begin
                    next_state = INITIAL_ROUND;
                end
            end
            
            INITIAL_ROUND: begin
                if (KR == 0) begin
                    next_state = WAIT_KEY;
                end else begin
                    next_state = DO_ROUND;
                end
            end
            
            DO_ROUND: begin
                if (KR == 0) begin
                    next_state = WAIT_KEY;
                end else begin
                    next_state = FINAL_ROUND;
                end
            end
            
            FINAL_ROUND: begin
                if (KR == 0) begin
                    next_state = WAIT_KEY;
                end else begin
                    next_state = WAIT_DATA;
                end
            end
            
            M: begin
                next_state = M;
            end
        endcase
    end
    
    always @(posedge clk, posedge reset) begin
        if (reset == 1) begin
            current_state <= WAIT_KEY;
        end else begin
            current_state <= next_state;
        end
    end
    
endmodule