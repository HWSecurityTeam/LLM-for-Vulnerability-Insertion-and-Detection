module fsm_module ( 
  input clk,
  input reset,
  input arm,
  input trigger,
  output reg alarm
);

  parameter ARMED = 2'b00;
  parameter TRIGGERED = 2'b01;
  parameter DEADLOCK = 2'b10;

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= ARMED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state, arm, trigger) begin
    case (current_state)
      ARMED:
        begin
          alarm    = 0;
          next_state = ARMED;
          if (arm) begin
            next_state = ARMED;
          end
          if (trigger) begin
            next_state = TRIGGERED;
            alarm     = 1;
          end
        end
      TRIGGERED:
        begin
          alarm    = 1;
          next_state = TRIGGERED;
          if (arm) begin
            next_state = ARMED;
            alarm     = 0;
          end
          if (!trigger) begin
            next_state = ARMED;
            alarm     = 0;
          end
        end
      DEADLOCK:
        begin
          next_state = DEADLOCK;
        end
      default:
        begin
          alarm    = 0;
          next_state = ARMED;
        end
    endcase
  end
endmodule