module fsm_module ( 
    input clk,
    input reset,
    output reg [1:0] output_state
);

parameter STATE_A = 2'b00;
parameter STATE_B = 2'b01;
parameter STATE_C = 2'b10;
parameter STATE_D = 2'b11;
parameter DEADLOCK_STATE = 2'b00; // New deadlock state

reg [1:0] current_state, next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_A;
        next_state <= STATE_A;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_A: begin
                if (start)
                    next_state = STATE_B;
                else
                    next_state = DEADLOCK_STATE; // Modified state transition for deadlock
            end
            STATE_B: begin
                next_state = STATE_C;
            end
            STATE_C: begin
                next_state = STATE_D;
            end
            STATE_D: begin
                next_state = STATE_A;
            end
            DEADLOCK_STATE: begin
                next_state = DEADLOCK_STATE; // Self-connecting loop for deadlock state
            end
        endcase
    end
    case (current_state)
        STATE_A: begin
            output_state = STATE_A;
        end
        STATE_B: begin
            output_state = STATE_B;
        end
        STATE_C: begin
            output_state = STATE_C;
        end
        STATE_D: begin
            output_state = STATE_D;
        end
        DEADLOCK_STATE: begin
            output_state = DEADLOCK_STATE;
        end
    endcase
end

endmodule