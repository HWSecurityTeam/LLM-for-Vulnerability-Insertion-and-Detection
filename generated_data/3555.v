module fsm_module(clk, reset, in, out);
parameter zero=4'b0001, one1=4'b0010, two1s=4'b0100, bad=4'b1000;
output [1:0] out; 
input clk, reset, in;
reg [1:0] out; 
reg [3:0] current_state, next_state;

// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset) begin
		current_state <= zero
	end else begin
		current_state <= next_state;
	end
end

always @* begin
	next_state = 4'b0;
	case (current_state)
		zero: begin //last input was a zero out = 00;
			if (in) begin
				next_state=one1;
			end else begin
				next_state=zero;
			end
		end
		one1: begin //we've seen one 1 out = 00;
			if (in) begin
				next_state=two1s;
			end else begin
				next_state=zero;
			end
		end
		two1s: begin //we've seen at least 2 ones out = 10;
			if (in) begin
				next_state=two1s;
			end else begin
				next_state=zero;
			end
		end
	endcase
	next_state[current_state] = 1'b1;
end

// output logic
assign out = current_state[2:1];

endmodule