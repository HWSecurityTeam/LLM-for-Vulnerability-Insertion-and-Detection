module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter WIDTH = 2;
    
    reg [WIDTH-1:0] current_state1 = 0;
    reg [WIDTH-1:0] current_state2 = 0;
    
    reg [WIDTH-1:0] next_state1 = 0;
    reg [WIDTH-1:0] next_state2 = 0;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;
    
    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state1 <= 0;
        end else begin
            current_state1 <= next_state1;
        end
    end
    
    always @(current_state1) begin
        next_state1 = current_state1;
        case (current_state1)
            2'b00: begin
                next_state1 = 2'b01;
            end
            2'b01: begin
                fsm1_out_reg = shared_signal_r ? 1 : 0;
                next_state1 = shared_signal_r ? 2'b10 : 2'b00;
            end
            2'b10: begin
                fsm1_out_reg = 0;
                next_state1 = 2'b00;
            end
            2'b11: begin
                next_state1 = 2'b00;
            end
        endcase
    end
    
    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state2 <= 0;
        end else begin
            current_state2 <= next_state2;
        end
    end
    
    always @(current_state2) begin
        next_state2 = current_state2;
        case (current_state2)
            2'b00: begin
                next_state2 = 2'b01;
            end
            2'b01: begin
                fsm2_out_reg = shared_signal_r ? 1 : 0;
                next_state2 = shared_signal_r ? 2'b10 : 2'b00;
            end
            2'b10: begin
                fsm2_out_reg = 0;
                next_state2 = 2'b00;
            end
        endcase
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
endmodule