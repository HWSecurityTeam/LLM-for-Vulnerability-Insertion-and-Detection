module fsm_module ( 
  input clk,
  input reset,
  input rx,
  output reg startBitDetected,
  output reg [7:0] receivedData
);

  parameter IDLE = 3'b000;
  parameter START_BIT = 3'b001;
  parameter DATA_BITS = 3'b010;
  parameter STOP_BIT = 3'b011;
  parameter STATIC_DEADLOCK = 3'b100; // Added static deadlock state

  reg [2:0] current_state;
  reg [2:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state or rx) begin
    case (current_state)
      IDLE:
        begin
          startBitDetected <= 0;
          receivedData <= 0;
          if (rx == 0) begin
            next_state = START_BIT;
          end
        end
      START_BIT:
        begin
          startBitDetected <= 1;
          next_state = DATA_BITS;
        end
      DATA_BITS:
        begin
          receivedData <= {receivedData[6:0], rx};
          next_state = (startBitDetected && receivedData == 8'b11111110) ? STOP_BIT : DATA_BITS;
        end
      STOP_BIT:
        begin
          startBitDetected <= 0;
          next_state = IDLE;
        end
      default:
        begin
          startBitDetected <= 0;
          receivedData <= 0;
          next_state = STATIC_DEADLOCK; // Added transition to static deadlock state
        end
    endcase
  end
endmodule