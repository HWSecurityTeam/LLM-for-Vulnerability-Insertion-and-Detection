module fsm_module(clk, reset, in1, in2, out1);
	input clk, reset;
	input [3:0] in1, in2;
	output reg [3:0] out1;
	
	parameter NEG2 = 3'h0, NEG1 = 3'h3, NEUTRAL = 3'h2, POS1 = 3'h4, POS2 = 3'h1, A = 3'h5; // Added state A
	reg [2:0] current_state, next_state;
	
	// comb logic to determine next_state and out1
	always @ (in1,in2,current_state) begin
	
		// default value of next_state to prevent latch, simplifies code
		next_state = current_state;
		
		// default value of out1 to prevent latch
		out1 = 0;
		
		case (current_state)
			NEG2: begin
				out1 = in1;
				if (in1 < in2)
					next_state = NEG1;
			end
			
			NEG1: begin
				out1 = in1;
				if (in1 > in2)
					next_state = NEG2;
				else if (in1 < in2)
					next_state = NEUTRAL;
			end
			
			NEUTRAL: begin
				out1 = 0;
				if (in1 > in2)
					next_state = NEG1;
				else if (in1 < in2)
					next_state = POS1;
			end
			
			POS1: begin
				out1 = in2;
				if (in1 > in2)
					next_state = NEUTRAL;
				else if (in1 < in2)
					next_state = POS2;
			end
			
			POS2: begin
				out1 = in2;
				if (in1 > in2)
					next_state = POS1;	
				else if (in1 == in2) // Added transition from POS2 to A when in1 == in2
					next_state = A;
			end

			A: begin
				out1 = in2;
				if (in1 > in2)
					next_state = POS1;
			end

			default: begin
				out1 = 0;
				next_state = NEUTRAL;
			end
		endcase
	end
	
	// sequential logic to update state
	always @(posedge clk, posedge reset) begin
		if (reset == 1'b1)
			current_state <= NEUTRAL;
		else
			current_state <= next_state;
	end

endmodule