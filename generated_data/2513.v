module fsm_module(clk, reset, in, out);
parameter zero=3, one1=0, two1s=1, deadlock_state=2;
output out; 
input clk, reset, in;
reg out; 
reg [1:0] current_state, next_state;

// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset) begin
		current_state <= zero;
	end else begin
		current_state <= next_state;
	end
end

// Implement the state transitions
always @(current_state or in) begin
	case (current_state)
		zero: begin //last input was a zero out = 0
			if (in) begin
				next_state <= one1;
			end else begin
				next_state <= zero;
			end
		end
		one1: begin //we've seen one 1 out = 0
			if (in) begin
				next_state <= two1s;
			end else begin
				next_state <= zero;
			end
		end
		two1s: begin //we've seen at least 2 ones out = 1
			if (in) begin
				next_state <= two1s;
			end else begin
				next_state <= zero;
			end
		end
		deadlock_state: begin //deadlock state
			next_state <= deadlock_state;
		end
		default: begin //in case we reach a bad state out = 0
			next_state <= deadlock_state;
		end
	endcase
end

// Implement the output logic
always @(current_state) begin
	case (current_state)
		zero: begin
			out <= 0;
		end
		one1: begin
			out <= 0;
		end
		two1s: begin
			out <= 1;
		end
		deadlock_state: begin
			out <= 0;
		end
		default : begin
			out <= 0;
		end
	endcase
end
endmodule