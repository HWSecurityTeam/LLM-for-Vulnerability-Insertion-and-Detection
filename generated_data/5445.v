module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter STATE_WIDTH = 2;
    
    reg [STATE_WIDTH-1:0] current_state_fsm1 = 0;
    reg [STATE_WIDTH-1:0] current_state_fsm2 = 0;
    
    reg [STATE_WIDTH-1:0] next_state_fsm1 = 0;
    reg [STATE_WIDTH-1:0] next_state_fsm2 = 0;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;
    
    // FSM1 (CWE-364)
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= 0;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end
    
    always begin
        next_state_fsm1 = current_state_fsm1;
        case (current_state_fsm1)
            2'b00: begin
                if (start) begin
                    next_state_fsm1 = 2'b01;
                    fsm1_out_reg = 1;
                end else begin
                    next_state_fsm1 = deadlock_state;
                end
            end
            2'b01: begin
                if (shared_signal_r && (current_state_fsm2 != 2'b10)) begin
                    next_state_fsm1 = 2'b10;
                    fsm1_out_reg = 1;
                end
            end
            2'b10: begin
                next_state_fsm1 = 2'b00;
                fsm1_out_reg = 0;
            end
            deadlock_state: begin
                next_state_fsm1 = deadlock_state;
            end
        endcase
    end
    
    // FSM2 (CWE-364)
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= 0;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end
    
    always begin
        next_state_fsm2 = current_state_fsm2;
        case (current_state_fsm2)
            2'b00: begin
                next_state_fsm2 = 2'b01;
                fsm2_out_reg = 1;
            end
            2'b01: begin
                next_state_fsm2 = 2'b10;
                fsm2_out_reg = 1;
            end
            2'b10: begin
                if (shared_signal_r && (current_state_fsm1 != 2'b01)) begin
                    next_state_fsm2 = 2'b00;
                    fsm2_out_reg = 0;
                end
            end
        endcase
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
    // Mitigation: Add mutual exclusion to shared_signal access in FSM1 and FSM2
    
endmodule