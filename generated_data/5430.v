module fsm_module (
    parameter WIDTH = 2
) (
    input clk,
    input reset,
    input shared_signal,
    output reg fsm1_out,
    output reg fsm2_out
);

reg [WIDTH-1:0] current_state_fsm1 = 0;
reg [WIDTH-1:0] current_state_fsm2 = 0;

reg [WIDTH-1:0] next_state_fsm1 = 0;
reg [WIDTH-1:0] next_state_fsm2 = 0;

reg fsm1_out_reg = 0;
reg fsm2_out_reg = 0;

reg shared_signal_reg = 0;
wire shared_signal_r = shared_signal_reg;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm1 <= 0;
    end else begin
        current_state_fsm1 <= next_state_fsm1;
    end
end

always begin
    next_state_fsm1 = current_state_fsm1;
    case (current_state_fsm1)
        2'b00: begin
            if (next_state_fsm1 == 2'b01) begin
                fsm1_out_reg = 1;
            end
            if (shared_signal_reg && next_state_fsm1 != 2'b01) begin
                next_state_fsm1 = 2'b01;
            end
        end
        2'b01: begin
            if (next_state_fsm1 == 2'b00) begin
                fsm1_out_reg = 0;
            end
            if (!shared_signal_reg && next_state_fsm1 != 2'b00) begin
                next_state_fsm1 = 2'b00;
            end
        end
        2'b10: begin
            if (next_state_fsm1 == 2'b00) begin
                fsm1_out_reg = 1;
            end
            if (shared_signal_reg && next_state_fsm1 != 2'b00) begin
                next_state_fsm1 = 2'b00;
            end
        end
        2'b11: begin
            if (next_state_fsm1 == 2'b10) begin
                fsm1_out_reg = 0;
            end
            if (!shared_signal_reg && next_state_fsm1 != 2'b10) begin
                next_state_fsm1 = 2'b10;
            end
        end
        default: begin
            next_state_fsm1 = next_state_fsm1; // No change in other states
        end
    endcase
end

always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm2 <= 0;
    end else begin
        current_state_fsm2 <= next_state_fsm2;
    end
end

always begin
    next_state_fsm2 = current_state_fsm2;
    case (current_state_fsm2)
        2'b00: begin
            if (next_state_fsm2 == 2'b01) begin
                fsm2_out_reg = 1;
            end
            if (shared_signal_reg && next_state_fsm2 != 2'b01) begin
                next_state_fsm2 = 2'b01;
            end
        end
        2'b01: begin
            if (next_state_fsm2 == 2'b00) begin
                fsm2_out_reg = 0;
            end
            if (!shared_signal_reg && next_state_fsm2 != 2'b00) begin
                next_state_fsm2 = 2'b00;
            end
        end
        2'b10: begin
            if (next_state_fsm2 == 2'b11) begin
                fsm2_out_reg = 1;
            end
            if (shared_signal_reg && next_state_fsm2 != 2'b11) begin
                next_state_fsm2 = 2'b11;
            end
        end
        2'b11: begin
            if (next_state_fsm2 == 2'b10) begin
                fsm2_out_reg = 0;
            end
            if (!shared_signal_reg && next_state_fsm2 != 2'b10) begin
                next_state_fsm2 = 2'b10;
            end
        end
        default: begin
            next_state_fsm2 = next_state_fsm2; // No change in other states
        end
    endcase
end

always @(posedge clk) begin
    shared_signal_reg <= shared_signal;
end

assign fsm1_out = fsm1_out_reg;
assign fsm2_out = fsm2_out_reg;

endmodule