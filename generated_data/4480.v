module fsm_module ( 
    clk, // System clock
    reset,
    start, // flag valid data/activate the process
    
    // interface for keygenerator
    key_ready, // flag valid roundkeys
    round_index_out, // address for roundkeys memory
    
    // Result of Process
    finished 
);

input clk, reset, start, key_ready;
output reg [3:0] round_index_out;
output reg finished;

// FSM signals
reg [6:0] current_state; // current state
reg [6:0] next_state; //combinational next state

parameter [6:0] RESULT = 7'b0001000;
parameter [6:0] IDLE   = 7'b0010000;
parameter [6:0] INIT   = 7'b0000100;
parameter [6:0] LOAD1  = 7'b0100000;
parameter [6:0] LOAD2  = 7'b1000000; // modified encoding state
parameter [6:0] MULT   = 7'b1000000; // modified encoding state
parameter [6:0] SQR    = 7'b0000001;

// Round Counter & address for keygenerate
reg [3:0] round_index;        // currently processed round
reg [3:0] next_round_index; // next round, index for keygenerate

// comb process to determine next state
always @(current_state, start, round_index) begin : gen_next_state
    case(current_state)
        IDLE: next_state = start ? INIT : IDLE;
        INIT: next_state = LOAD1;
        LOAD1: next_state = LOAD2;
        LOAD2: next_state = MULT;
        MULT: next_state = SQR;
        SQR: next_state = round_index == 4'd10 ? RESULT : MULT;
        RESULT: next_state = IDLE;
        default: next_state = IDLE;
    endcase
end

// comb process to determine output
always @(current_state, round_index) begin : com_output_assign
    // default values for finished, next_round_index
    finished = 1'b0;
    next_round_index = round_index;
    round_index_out = round_index;
    case(current_state)
        IDLE: next_round_index = 0;
        INIT: next_round_index = 0;
        LOAD1: next_round_index = 0;
        LOAD2: next_round_index = 0;
        SQR: next_round_index = round_index + 1'b1;
        RESULT: begin 
            next_round_index = 0;
            finished = 1'b1;
        end
        default: begin end // do nothing
    endcase
end

// seq process to update state, round_index registers
always @(posedge clk, posedge reset) begin : clocked_fsm
    if (reset) begin
        current_state <= IDLE;
        round_index <= 0;
    end
    else begin
        current_state <= next_state;
        round_index <= next_round_index;
    end
end

endmodule