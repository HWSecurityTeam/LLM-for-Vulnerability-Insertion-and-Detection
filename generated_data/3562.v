module fsm_module(clk, reset, in, out);
    parameter zero=2'b01;
    parameter one1=2'b10;
    parameter two1s=2'b00;
    output [1:0] out; 
    input clk, reset, in;
    reg [1:0] out; 
    reg [2:0] current_state, next_state;
    
    // Implement the state register
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= zero;
        else
            current_state <= next_state;
    end
    
    always @(current_state) begin
        case (current_state)
            2'b01: begin //last input was a zero 
                out = 2'b01;
                if (in)
                    next_state=one1;
                else
                    next_state=2'b01;
            end
            2'b10: begin //we've seen one 1 
                out = 2'b10;
                if (in)
                    next_state=two1s;
                else
                    next_state=2'b01;
            end
            2'b00: begin //we've seen at least 2 ones 
                out = 2'b10;
                if (in)
                    next_state=2'b00;
                else
                    next_state=2'b01;
            end
        endcase
    end
    
    // output logic
    always @(current_state) begin
        case (current_state)
            2'b01: out <= 2'b01;
            2'b10: out <= 2'b10;
            2'b00: out <= 2'b10;
        endcase
    end
endmodule