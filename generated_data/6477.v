module fsm_module (clk, reset, w, z);//w:input, z:output
	input clk, reset, w;
	output reg z;
	reg [2:0] current_state, next_state;//y:present state, Y:nest state
	parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b100;//state variables
	always @ (current_state, w)
		case (current_state)
			X: if (w) next_state=Y;
				else next_state=deadlock_state; //step1: X is selected as initial state, step2: X is connected to deadlock_state
			Y: if (w) next_state=Z;
				else next_state=Y;
			Z: if (w) next_state=X;
				else next_state=Z;
			deadlock_state: next_state=deadlock_state; //step3: deadlock_state is added in case statement
			default : next_state=3'bxxx;
		endcase
		
		always @ (negedge reset, posedge clk)
			if (!reset) current_state<=X;
			else current_state<=next_state;
		always @ (current_state)
			if (current_state==D|current_state==F) z=2;
			else z=0;
endmodule