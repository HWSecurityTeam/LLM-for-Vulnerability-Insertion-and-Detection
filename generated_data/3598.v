module fsm_module (clk, reset, w, z);
	input clk, reset, w;
	output reg [1:0] z;
	reg [5:0] current_state, next_state;
	parameter A=6'b000001, B=6'b000010, C=6'b000100,
				D=6'b001000, E=6'b010000, F=6'b100000;
	always @ (current_state, w)
	begin
		case (current_state)
			A: if (w) next_state=B;
				else next_state=A;
			B: if (w) next_state=C;
				else next_state=E;
			C: if (w) next_state=C;
				else next_state=D;
			D: if (w) next_state=F;
				else next_state=A;
			E: if (w) next_state=F;
				else next_state=A;
			F: if (w) next_state=C;
				else next_state=E;
		endcase
	end
	
	always @ (negedge reset, posedge clk)
	begin
		if (!reset) current_state<=A;
		else current_state<=next_state;
	end
	
	always @ (current_state)
	begin
		if (current_state==D) z=2'b10;
		else if (current_state==F) z=2'b01;
		else z=2'b00;
	end
endmodule