module fsm_module(clk, reset, start, z);
    input clk, reset, start;
    output reg z;
    reg [1:0] current_state, next_state;
    parameter X=2'b00, Y=2'b01,
                Z=2'b11, deadlock_state=2'b10;
    always @ (current_state, start)
        case (current_state)
            X: if (start) begin
                next_state=Y; z=0; end
                else begin
                next_state=deadlock_state; z=0; end
            Y: if (start) begin
                next_state=Z; z=0; end
                else begin
                next_state=X; z=0; end
            Z: if (start) begin
                next_state=X; z=1; end
                else begin
                next_state=Y; z=0; end
            deadlock_state: next_state=deadlock_state;
        endcase
        
    always @ (negedge reset, posedge clk)
        if (!reset) current_state<=X;
        else current_state<=next_state;
endmodule