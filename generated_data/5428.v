module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter STATE_IDLE = 2'b00;
    parameter STATE_WAIT = 2'b01;
    parameter STATE_DONE = 2'b10;
    parameter DEADLOCK_STATE = 2'b11; // Step 1: Adding deadlock state

    reg [1:0] current_state_fsm1 = STATE_IDLE;
    reg [1:0] current_state_fsm2 = STATE_IDLE;

    reg [1:0] next_state_fsm1 = STATE_IDLE;
    reg [1:0] next_state_fsm2 = STATE_IDLE;

    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;

    reg shared_signal_reg = 0;
    reg shared_signal_reg_prev = 0;
    wire shared_signal_r = shared_signal_reg;

    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= STATE_IDLE;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end

    always @(shared_signal_reg_prev, shared_signal_reg, current_state_fsm1) begin
        shared_signal_reg_prev <= shared_signal_reg;
        shared_signal_reg <= shared_signal;
        next_state_fsm1 = current_state_fsm1;
        case (current_state_fsm1)
            STATE_IDLE: begin
                if (shared_signal_reg_prev == 0 && shared_signal_reg == 1) begin
                    next_state_fsm1 = STATE_WAIT;
                    fsm1_out_reg = 1;
                end else begin // Step 2: Adding condition for deadlock state transition
                    next_state_fsm1 = DEADLOCK_STATE;
                end
            end
            STATE_WAIT: begin
                next_state_fsm1 = STATE_DONE;
                fsm1_out_reg = 0;
            end
            STATE_DONE: begin
                next_state_fsm1 = STATE_IDLE;
                fsm1_out_reg = 0;
            end
            DEADLOCK_STATE: begin // Step 3: Adding deadlock state with self-connecting loop
                next_state_fsm1 = DEADLOCK_STATE;
            end
        endcase
    end

    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= STATE_IDLE;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end

    always @(shared_signal_reg_prev, shared_signal_reg, current_state_fsm2) begin
        shared_signal_reg_prev <= shared_signal_reg;
        shared_signal_reg <= shared_signal;
        next_state_fsm2 = current_state_fsm2;
        case (current_state_fsm2)
            STATE_IDLE: begin
                if (shared_signal_reg_prev == 0 && shared_signal_reg == 1) begin
                    next_state_fsm2 = STATE_WAIT;
                    fsm2_out_reg = 1;
                end else begin // Step 2: Adding condition for deadlock state transition
                    next_state_fsm2 = DEADLOCK_STATE;
                end
            end
            STATE_WAIT: begin
                next_state_fsm2 = STATE_DONE;
                fsm2_out_reg = 0;
            end
            STATE_DONE: begin
                next_state_fsm2 = STATE_IDLE;
                fsm2_out_reg = 0;
            end
            DEADLOCK_STATE: begin // Step 3: Adding deadlock state with self-connecting loop
                next_state_fsm2 = DEADLOCK_STATE;
            end
        endcase
    end

    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;

endmodule