module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter [1:0] IDLE = 2'b00;
    parameter [1:0] STATE1 = 2'b01;
    parameter [1:0] STATE2 = 2'b10;
    parameter [1:0] DEADLOCK = 2'b11; // Step 1: Add deadlock state
    
    reg [1:0] current_state_fsm1 = IDLE;
    reg [1:0] current_state_fsm2 = IDLE;
    
    reg [1:0] next_state_fsm1 = IDLE;
    reg [1:0] next_state_fsm2 = IDLE;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;
    
    // FSM1 (CWE-364)
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= IDLE;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end
    
    always @(current_state_fsm1) begin
        next_state_fsm1 = current_state_fsm1;
        case (current_state_fsm1)
            IDLE: begin
                if (start) // Step 2: Modify transition from IDLE
                    next_state_fsm1 = STATE1;
                else
                    next_state_fsm1 = DEADLOCK; // Step 2: Connect IDLE to deadlock_state
                fsm1_out_reg = 1;
            end
            STATE1: begin
                next_state_fsm1 = STATE2;
                if (shared_signal_r) begin
                    next_state_fsm1 = IDLE;
                    fsm1_out_reg = 0;
                end
            end
            STATE2: begin
                next_state_fsm1 = STATE1;
                if (shared_signal_r) begin
                    fsm1_out_reg = 1;
                end
            end
            DEADLOCK: begin // Step 3: Add deadlock_state
                next_state_fsm1 = DEADLOCK; // Step 3: Self-connecting loop
            end
        endcase
    end
    
    // FSM2 (CWE-364)
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= IDLE;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end
    
    always @(current_state_fsm2) begin
        next_state_fsm2 = current_state_fsm2;
        case (current_state_fsm2)
            IDLE: begin
                next_state_fsm2 = STATE1;
                fsm2_out_reg = 1;
            end
            STATE1: begin
                next_state_fsm2 = STATE2;
                if (shared_signal_r) begin
                    next_state_fsm2 = IDLE;
                    fsm2_out_reg = 0;
                end
            end
            STATE2: begin
                next_state_fsm2 = STATE1;
                if (shared_signal_r) begin
                    fsm2_out_reg = 1;
                end
            end
        endcase
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
    // Weakness: The shared signal is being accessed by two FSMs without proper synchronization, which can lead to a Time-of-check Time-of-use (TOCTOU) Race Condition (CWE-367).
    
endmodule