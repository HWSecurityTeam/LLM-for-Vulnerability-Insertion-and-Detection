module fsm_module ( 
  input wire clk,
  input wire reset,
  input wire setAlarm,
  input wire alarmTrigger,
  output reg idle,
  output reg setAlarmState,
  output reg ringing
);

  parameter NUM_STATES = 4;
  parameter [NUM_STATES-1:0] IDLE = 2'b01;
  parameter [NUM_STATES-1:0] SET_ALARM = 2'b10;
  parameter [NUM_STATES-1:0] RINGING = 2'b100;
  parameter [NUM_STATES-1:0] DEADLOCK_STATE = 2'b1000;

  reg [NUM_STATES-1:0] current_state;
  reg [NUM_STATES-1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      IDLE:
        begin
          idle         <= 1;
          setAlarmState <= 0;
          ringing      <= 0;
          next_state    <= SET_ALARM;
          if (setAlarm) begin
            next_state <= SET_ALARM;
          end
          else begin
            next_state <= DEADLOCK_STATE;
          end
        end
      SET_ALARM:
        begin
          idle         <= 0;
          setAlarmState <= 1;
          ringing      <= 0;
          next_state    <= IDLE;
          if (setAlarm && alarmTrigger) begin
            next_state <= RINGING;
          end
          else begin
            next_state <= IDLE;
          end
        end
      RINGING:
        begin
          idle         <= 0;
          setAlarmState <= 0;
          ringing      <= 1;
          next_state    <= IDLE;
          if (!alarmTrigger) begin
            next_state <= IDLE;
          end
        end
      DEADLOCK_STATE:
        begin
          idle         <= 0;
          setAlarmState <= 0;
          ringing      <= 0;
          next_state    <= DEADLOCK_STATE;
        end
      default:
        begin
          idle         <= 1;
          setAlarmState <= 0;
          ringing      <= 0;
          next_state    <= IDLE;
        end
    endcase
  end
endmodule