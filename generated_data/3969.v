module fsm_module(clk, reset, w, z);
    input clk, reset, w;
    output reg z;
    reg [1:0] current_state, next_state;
    parameter A=2'b00, B=2'b01, C=2'b10, D=2'b11, E=2'b10;
    
    always @ (current_state, w)
    begin
        case (current_state)
            A: if (w) begin
                    next_state = B; z = 0; end
                else begin
                    next_state = A; z = 0; end
            B: if (w) begin
                    next_state = C; z = 0; end
                else begin
                    next_state = D; z = 0; end
            C: if (w) begin
                    next_state = C; z = 0; end;
            D: if (w) begin
                    next_state = B; z = 1; end
                else begin
                    next_state = A; z = 0; end
            E: next_state = C; // outgoing transition from state E to state C
        endcase
    end
    
    always @ (negedge reset, posedge clk)
    begin
        if (!reset) current_state <= A;
        else current_state <= next_state;
    end
endmodule