module fsm_module(clk, reset, in1, in2, out1);
	input clk, reset;
	input [3:0] in1, in2;
	output reg [3:0] out1;
	
	parameter NEG2 = 5'b00100, NEG1 = 5'b10000, NEUTRAL = 5'b00001, POS1 = 5'b01000, POS2 = 5'b00010;
	
	reg [4:0] current_state, next_state;
	reg [3:0] in1_sync, in2_sync;
	
	// sequential logic to synchronize input values
	always @(posedge clk, posedge reset) begin
		if (reset == 1'b1) begin
			in1_sync <= 0;
			in2_sync <= 0;
		end
		else begin
			in1_sync <= in1;
			in2_sync <= in2;
		end
	end
	
	// comb logic to determine next_state and out1
	always @ (in1_sync, in2_sync, current_state) begin
	
		// default value of next_state to prevent latch, simplifies code
		next_state = current_state;
		
		// default value of out1 to prevent latch
		out1 = 0;
		
		case (current_state)
			NEG2: begin
				out1 = in1_sync;
				if (in1_sync < in2_sync)
					next_state = NEG1;
			end
			
			NEG1: begin
				out1 = in1_sync;
				if (in1_sync > in2_sync)
					next_state = NEG2;
				else if (in1_sync < in2_sync)
					next_state = NEUTRAL;
			end
			
			NEUTRAL: begin
				out1 = 0;
				if (in1_sync > in2_sync)
					next_state = NEG1;
				else if (in1_sync < in2_sync)
					next_state = POS1;
			end
			
			POS1: begin
				out1 = in2_sync;
				if (in1_sync > in2_sync)
					next_state = NEUTRAL;
				else if (in1_sync < in2_sync)
					next_state = POS2;
			end
			
			POS2: begin
				out1 = in2_sync;
				if (in1_sync > in2_sync)
					next_state = POS1;	
			end

			default: begin
				out1 = 0;
				next_state = NEUTRAL;
			end
		endcase
	end
	
	// sequential logic to update state
	always @(posedge clk, posedge reset) begin
		if (reset == 1'b1)
			current_state <= NEUTRAL;
		else
			current_state <= next_state;
	end

endmodule