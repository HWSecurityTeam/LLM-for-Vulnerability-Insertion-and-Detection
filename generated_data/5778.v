module fsm_module ( 
input clk,
input reset,
input in,
input start,
output reg out1,
output reg out2
);

parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b100; 

reg [2:0] current_state;
reg [2:0] next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= X;
        out1 <= 0;
        out2 <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            X: begin
                if (start) begin
                    next_state <= Y;
                    out1 <= 1;
                    out2 <= 0;
                end else begin
                    next_state <= deadlock_state; // Step 2: X is connected to deadlock_state
                    out1 <= 0;
                    out2 <= 0;
                end
            end
            Y: begin
                next_state <= Z;
                out1 <= 0;
                out2 <= 0;
            end
            Z: begin
                next_state <= X;
                out1 <= 0;
                out2 <= 0;
            end
            deadlock_state: begin // Step 3: Added deadlock_state with self-connecting loop
                next_state <= deadlock_state;
                out1 <= 0;
                out2 <= 0;
            end
        endcase
    end
end

endmodule