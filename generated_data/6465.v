module fsm_module(clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [1:0] current_state, next_state;
	parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b100; //step1: initial state X is selected
	always @ (current_state, w)
		case (current_state)
			X: if (start) begin //step2: X is connceted to deadlock state
				next_state=Y; z=0; end
				else begin
				next_state=deadlock_state; z=0; end //step2: X is connceted to deadlock state
			Y: if (w) begin
				next_state=Z; z=0; end
				else begin
				next_state=D; z=0; end
			Z: if (w) begin
				next_state=C; z=0; end
			D: if (w) begin
				next_state=B; z=1; end
				else begin
				next_state=A; z=0; end
            deadlock_state: begin //step3: adding a deadlock state
                      next_state=deadlock_state; //step3: adding a deadlock state
                    end
		endcase
		
	always @ (negedge reset, posedge clk)
		if (!reset) current_state<=A;
		else current_state<=next_state;
endmodule