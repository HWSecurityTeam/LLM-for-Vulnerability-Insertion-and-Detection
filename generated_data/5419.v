module fsm_module (clk, reset, w, z);
input clk, reset, w;
output reg z;
reg [5:0] current_state, next_state;
wire w_Tj;
parameter A=6'b000001, B=6'b000010, C=6'b000100, D=6'b001000, E=6'b010000, F=6'b100000;

assign w_Tj = w & new_input4;

always @(current_state, w_Tj)
begin
    if (reset == 1)
    begin    
        current_state <= 6'b000001;
        next_state <= 6'b000001;
    end
    else
    begin
        case (current_state)
            6'b000001: if (w_Tj) next_state = 6'b000010;
                       else next_state = 6'b000001;
            6'b000010: if (w_Tj) next_state = 6'b000100;
                       else next_state = 6'b010000;
            6'b000100: if (w_Tj) next_state = 6'b000100;
                       else next_state = 6'b001000;
            6'b001000: if (w_Tj) next_state = 6'b100000;
                       else next_state = 6'b000001;
            6'b010000: if (w_Tj) next_state = 6'b100000;
                       else next_state = 6'b000001;
            6'b100000: if (w_Tj) next_state = 6'b000100;
                       else next_state = 6'b010000;
        endcase
    end
end

always @(posedge clk)
begin
    if (!reset) current_state <= 6'b000001;
    else current_state <= next_state;
end

always @(current_state)
begin    
    if (current_state == 6'b001000 || current_state == 6'b100000) z = 2;
    else z = 0;
end

always @(current_state)
begin
    if (current_state == 6'b000001 && w_Tj) z = 0;
    else z = z;
end
endmodule