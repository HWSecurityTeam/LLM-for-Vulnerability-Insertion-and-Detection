module fsm_module ( 
  parameter MAIN_RED = 7'b0000001,
  parameter MAIN_YELLOW = 7'b0000010,
  parameter MAIN_GREEN = 7'b0000100,
  parameter SIDE_RED = 7'b0001000,
  parameter SIDE_YELLOW = 7'b0010000,
  parameter SIDE_GREEN = 7'b0100000,
  parameter M = 7'b1000000
) (
  input clk,
  input reset,
  output reg mainRoadRed,
  output reg mainRoadYellow,
  output reg mainRoadGreen,
  output reg sideRoadRed,
  output reg sideRoadYellow,
  output reg sideRoadGreen
);

  reg [6:0] current_state;
  reg [6:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= MAIN_RED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      MAIN_RED:
        begin
          mainRoadRed   = 1'b1;
          mainRoadYellow = 1'b0;
          mainRoadGreen  = 1'b0;
          sideRoadRed    = 1'b0;
          sideRoadYellow = 1'b0;
          sideRoadGreen  = 1'b1;
          next_state      = MAIN_YELLOW;
        end
      MAIN_YELLOW:
        begin
          mainRoadRed   = 1'b1;
          mainRoadYellow = 1'b1;
          mainRoadGreen  = 1'b0;
          sideRoadRed    = 1'b0;
          sideRoadYellow = 1'b0;
          sideRoadGreen  = 1'b1;
          next_state      = MAIN_GREEN;
        end
      MAIN_GREEN:
        begin
          mainRoadRed   = 1'b0;
          mainRoadYellow = 1'b0;
          mainRoadGreen  = 1'b1;
          sideRoadRed    = 1'b1;
          sideRoadYellow = 1'b0;
          sideRoadGreen  = 1'b0;
          next_state      = SIDE_RED;
        end
      SIDE_RED:
        begin
          mainRoadRed   = 1'b0;
          mainRoadYellow = 1'b0;
          mainRoadGreen  = 1'b1;
          sideRoadRed    = 1'b1;
          sideRoadYellow = 1'b0;
          sideRoadGreen  = 1'b0;
          next_state      = SIDE_YELLOW;
        end
      SIDE_YELLOW:
        begin
          mainRoadRed   = 1'b0;
          mainRoadYellow = 1'b0;
          mainRoadGreen  = 1'b1;
          sideRoadRed    = 1'b1;
          sideRoadYellow = 1'b1;
          sideRoadGreen  = 1'b0;
          next_state      = SIDE_GREEN;
        end
      SIDE_GREEN:
        begin
          mainRoadRed   = 1'b1;
          mainRoadYellow = 1'b0;
          mainRoadGreen  = 1'b0;
          sideRoadRed    = 1'b0;
          sideRoadYellow = 1'b0;
          sideRoadGreen  = 1'b1;
          next_state      = M;
        end
      M:
        begin
          mainRoadRed   = 1'b1;
          mainRoadYellow = 1'b0;
          mainRoadGreen  = 1'b0;
          sideRoadRed    = 1'b0;
          sideRoadYellow = 1'b0;
          sideRoadGreen  = 1'b1;
          next_state      = M;
        end
      default:
        begin
          mainRoadRed   = 1'b1;
          mainRoadYellow = 1'b0;
          mainRoadGreen  = 1'b0;
          sideRoadRed    = 1'b0;
          sideRoadYellow = 1'b0;
          sideRoadGreen  = 1'b1;
          next_state      = MAIN_RED;
        end
    endcase
  end
endmodule