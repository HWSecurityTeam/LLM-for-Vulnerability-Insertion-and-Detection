module fsm_module #(
  parameter MAIN_RED = 3'b000,
  parameter MAIN_YELLOW = 3'b001,
  parameter MAIN_GREEN = 3'b010,
  parameter SIDE_RED = 3'b011,
  parameter SIDE_YELLOW = 3'b100,
  parameter SIDE_GREEN = 3'b101
) (
  input clk,
  input reset,
  output reg mainRoadRed,
  output reg mainRoadYellow,
  output reg mainRoadGreen,
  output reg sideRoadRed,
  output reg sideRoadYellow,
  output reg sideRoadGreen
);

  reg [2:0] current_state;
  reg [2:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= MAIN_RED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      MAIN_RED: begin
        mainRoadRed = 1;
        mainRoadYellow = 0;
        mainRoadGreen = 0;
        sideRoadRed = 0;
        sideRoadYellow = 0;
        sideRoadGreen = 1;
        next_state = MAIN_GREEN;
      end
      MAIN_YELLOW: begin
        mainRoadRed = 1;
        mainRoadYellow = 1;
        mainRoadGreen = 0;
        sideRoadRed = 0;
        sideRoadYellow = 0;
        sideRoadGreen = 1;
        next_state = SIDE_RED;
      end
      MAIN_GREEN: begin
        mainRoadRed = 0;
        mainRoadYellow = 0;
        mainRoadGreen = 1;
        sideRoadRed = 1;
        sideRoadYellow = 0;
        sideRoadGreen = 0;
        next_state = MAIN_YELLOW;
      end
      SIDE_RED: begin
        mainRoadRed = 0;
        mainRoadYellow = 0;
        mainRoadGreen = 1;
        sideRoadRed = 1;
        sideRoadYellow = 0;
        sideRoadGreen = 0;
        next_state = SIDE_GREEN;
      end
      SIDE_YELLOW: begin
        mainRoadRed = 0;
        mainRoadYellow = 0;
        mainRoadGreen = 1;
        sideRoadRed = 1;
        sideRoadYellow = 1;
        sideRoadGreen = 0;
        next_state = MAIN_RED;
      end
      SIDE_GREEN: begin
        mainRoadRed = 1;
        mainRoadYellow = 0;
        mainRoadGreen = 0;
        sideRoadRed = 0;
        sideRoadYellow = 0;
        sideRoadGreen = 1;
        next_state = SIDE_YELLOW;
      end
      default: begin
        mainRoadRed = 0;
        mainRoadYellow = 0;
        mainRoadGreen = 0;
        sideRoadRed = 0;
        sideRoadYellow = 0;
        sideRoadGreen = 0;
        next_state = MAIN_RED;
      end
    endcase
  end
endmodule