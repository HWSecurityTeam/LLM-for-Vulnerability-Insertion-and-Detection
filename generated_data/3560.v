```verilog
module fsm_module(clk, reset, in, out);
parameter zero=2'b01, one1=2'b10, two1s=2'b00;
output [1:0] out; 
input clk, reset, in;
reg [1:0] out; 
reg [2:0] current_state, next_state;

// Implement the state register
always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= zero;
    end else begin
        current_state <= next_state;
    end
end

// Implement the next state logic
always @(current_state) begin
    case (current_state)
        2'b01: begin //last input was a zero out = 0;
            if (in) begin
                next_state=2'b10;
            end else begin
                next_state=2'b01;
            end
        end
        2'b10: begin //we've seen one 1 out = 0;
            if (in) begin
                next_state=2'b00;
            end else begin
                next_state=2'b01;
            end
        end
        2'b00: begin //we've seen at least 2 ones out = 1;
            if (in) begin
                next_state=2'b00;
            end else begin
                next_state=2'b01;
            end
        end
    endcase
end

// Implement the output logic
always @(current_state) begin
    case (current_state)
        2'b01: begin
            out <= 2'b10;
        end
        2'b10: begin
            out <= 2'b10;
        end
        2'b00: begin
            out <= 2'b01;
        end
    endcase
end

endmodule
```