module fsm_module(
    input KR, 
    input DS, 
    input clk, 
    input reset
);

    parameter WAIT_KEY = 3'h1;
    parameter WAIT_DATA = 3'h2;
    parameter INITIAL_ROUND = 3'h3;
    parameter DO_ROUND = 3'h4;
    parameter FINAL_ROUND = 3'h7;
    parameter DEADLOCK_STATE = 3'h5;
    
    reg [2:0] current_state;
    reg [2:0] next_state;
    
    always @ (current_state, KR, DS) begin
        case(current_state) 
            WAIT_KEY: begin
                if(KR == 1) 
                    next_state <= WAIT_DATA; // Changed assignment operator from "=" to "<="
                else 
                    next_state <= WAIT_KEY; // Changed assignment operator from "=" to "<="
            end
            WAIT_DATA: begin
                if(DS == 0) 
                    next_state <= WAIT_KEY; // Changed assignment operator from "=" to "<="
                else 
                    next_state <= INITIAL_ROUND; // Changed assignment operator from "=" to "<="
            end
            INITIAL_ROUND: begin
                if(KR == 0) 
                    next_state <= WAIT_KEY; // Changed assignment operator from "=" to "<="
                else 
                    next_state <= DO_ROUND; // Changed assignment operator from "=" to "<="
            end 
            DO_ROUND: begin
                if(KR == 0) 
                    next_state <= WAIT_KEY; // Changed assignment operator from "=" to "<="
                else 
                    next_state <= FINAL_ROUND; // Changed assignment operator from "=" to "<="
            end
            FINAL_ROUND: begin
                if(KR == 0) 
                    next_state <= WAIT_KEY; // Changed assignment operator from "=" to "<="
                else 
                    next_state <= WAIT_DATA; // Changed assignment operator from "=" to "<="
            end
            DEADLOCK_STATE: begin
                next_state <= DEADLOCK_STATE; // Changed assignment operator from "=" to "<="
            end
            default: 
                next_state <= WAIT_KEY; // Changed assignment operator from "=" to "<="
        endcase
    end
    
    always @(posedge clk, posedge reset) begin
        if(reset == 1) 
            current_state <= WAIT_KEY;
        else
            current_state <= next_state;
    end 
    
endmodule