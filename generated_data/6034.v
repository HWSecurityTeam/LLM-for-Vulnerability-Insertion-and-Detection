module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out
);

parameter STATE_A = 2'b00;
parameter STATE_B = 2'b01;
parameter STATE_C = 2'b10;
parameter STATE_D = 2'b11; //added state

reg [1:0] current_state, next_state;
reg [8:0] sum;

always @ (posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_A;
        sum <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_A: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    next_state <= STATE_B;
                end else begin
                    next_state <= STATE_A;
                end
            end
            STATE_B: begin
                sum <= sum - 255;
                next_state <= STATE_C;
            end
            STATE_C: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    next_state <= STATE_B;
                end else begin
                    next_state <= STATE_D; //changed to STATE_D
                end
            end
            default: next_state <= STATE_A; //added default statement
        endcase
    end
end

assign data_out = sum;

endmodule