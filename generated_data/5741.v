module fsm_module ( 
input clk,
input reset,
output reg [2:0] output_state
);

parameter STATE_A = 3'b000;
parameter STATE_B = 3'b001;
parameter STATE_C = 3'b010;
parameter STATE_D = 3'b011;
parameter STATE_E = 3'b100;
parameter STATE_F = 3'b101;
parameter STATE_G = 3'b110;
parameter STATE_H = 3'b111;
parameter DEADLOCK_STATE = 3'b101;

reg [2:0] current_state;
reg [2:0] next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_A;
        next_state <= STATE_A;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_A: begin
                if (start)
                    next_state <= STATE_B;
                else
                    next_state <= DEADLOCK_STATE;
            end
            STATE_B: begin
                next_state <= STATE_C;
            end
            STATE_C: begin
                next_state <= STATE_D;
            end
            STATE_D: begin
                next_state <= STATE_E;
            end
            STATE_E: begin
                next_state <= STATE_F;
            end
            STATE_F: begin
                next_state <= STATE_G;
            end
            STATE_G: begin
                next_state <= STATE_H;
            end
            STATE_H: begin
                next_state <= STATE_A;
            end
            DEADLOCK_STATE: begin
                next_state <= DEADLOCK_STATE;
            end
        endcase
    end
    case (current_state)
        STATE_A: begin
            output_state <= STATE_A;
        end
        STATE_B: begin
            output_state <= STATE_B;
        end
        STATE_C: begin
            output_state <= STATE_C;
        end
        STATE_D: begin
            output_state <= STATE_D;
        end
        STATE_E: begin
            output_state <= STATE_E;
        end
        STATE_F: begin
            output_state <= STATE_F;
        end
        STATE_G: begin
            output_state <= STATE_G;
        end
        STATE_H: begin
            output_state <= STATE_H;
        end
        DEADLOCK_STATE: begin
            output_state <= DEADLOCK_STATE;
        end
    endcase
end

endmodule