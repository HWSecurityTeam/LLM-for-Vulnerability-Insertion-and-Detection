module fsm_module #(
  parameter COUNT0 = 2'b00,
  parameter COUNT1 = 2'b01,
  parameter COUNT2 = 2'b10,
  parameter COUNT3 = 2'b11
) (
  input clk,
  input reset,
  output reg [1:0] count
);

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= COUNT0;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      COUNT0:
        begin
          count <= 2'b00;
          next_state <= COUNT1;
        end
      COUNT1:
        begin
          count <= 2'b01;
          next_state <= COUNT2;
        end
      COUNT2:
        begin
          count <= 2'b10;
          next_state <= COUNT3;
        end
      COUNT3:
        begin
          count <= 2'b11;
          next_state <= COUNT0;
        end
    endcase
  end
endmodule