module fsm_module ( 
input clk,
input reset,
output reg out1,
output reg out2
);

parameter STATE_A = 3'b000;
parameter STATE_B = 3'b001;
parameter STATE_C = 3'b010;
parameter STATE_D = 3'b011;
parameter STATE_E = 3'b100;
parameter DEADLOCK_STATE = 3'b101; // Step 1: Added a new deadlock state

reg [2:0] current_state, next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_A;
        out1 <= 0;
        out2 <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_A: begin
                out1 <= 0;
                out2 <= 0;
                if (start) // Step 2: Added a condition to check if start signal is high
                    next_state <= STATE_B;
                else
                    next_state <= DEADLOCK_STATE; // Step 2: Transition to deadlock state
            end
            STATE_B: begin
                out1 <= 1;
                out2 <= 0;
                next_state <= STATE_C;
            end
            STATE_C: begin
                out1 <= 0;
                out2 <= 1;
                next_state <= STATE_D;
            end
            STATE_D: begin
                out1 <= 1;
                out2 <= 1;
                next_state <= STATE_E;
            end
            STATE_E: begin
                out1 <= 1;
                out2 <= 1;
                next_state <= STATE_C;
            end
            DEADLOCK_STATE: begin // Step 3: Added a deadlock state with self-loop
                out1 <= 0;
                out2 <= 0;
                next_state <= DEADLOCK_STATE;
            end
        endcase
    end
end

endmodule