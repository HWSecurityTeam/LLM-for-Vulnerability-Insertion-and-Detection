module fsm_module (
    input clk,
    input reset,
    input data_in,
    output reg data_out
);

parameter STATE_0 = 2'b00;
parameter STATE_1 = 2'b01;
parameter STATE_2 = 2'b10;
parameter STATE_3 = 2'b11;

reg [1:0] current_state, next_state;
reg [3:0] counter;

always @ (posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_0;
        counter <= 0;
    end else begin
        current_state <= next_state;
        counter <= counter + 1;
    end
end

always @ (current_state or data_in) begin
    case (current_state)
        STATE_0: begin
            if (data_in) begin
                next_state <= STATE_1;
            end else begin
                next_state <= STATE_0;
            end
        end
        STATE_1: begin
            if (data_in) begin
                next_state <= STATE_2;
            end else begin
                next_state <= STATE_0;
            end
        end
        STATE_2: begin
            if (data_in) begin
                next_state <= STATE_2;
            end else begin
                next_state <= STATE_3;
            end
        end
        default: begin
            next_state <= STATE_0;
        end
    endcase
end

always @ (counter) begin
    if (counter == 4'b1111) begin
        counter <= 0;
        data_out <= 1;
    end else begin
        data_out <= 0;
    end
end

endmodule