module fsm_module(clk, reset, start, z);
    input clk, reset, start;
    output reg z;
    parameter X=2'b00, Y=2'b01,
                Z=2'b11, deadlock_state=2'b10;
    reg [1:0] current_state;
    reg [1:0] next_state;
    
    always @ (current_state, start)
        case (current_state)
            X: if (start) begin
                next_state = Y;
                z = 0;
            end else begin
                next_state = deadlock_state;
                z = 0;
            end
            Y: if (start) begin
                next_state = Z;
                z = 0;
            end else begin
                next_state = X;
                z = 0;
            end
            Z: if (start) begin
                next_state = X;
                z = 0;
            end else begin
                next_state = X;
                z = 1;
            end
            deadlock_state: begin
                next_state = deadlock_state;
                z = 0;
            end
        endcase
        
    always @ (negedge reset, posedge clk)
        if (!reset) begin
            current_state <= X;
        end else begin
            current_state <= next_state;
        end
endmodule