module fsm_module(clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [1:0] current_state, next_state;
	parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b100; 
	
	always @ (current_state, w)
		case (current_state)
			X: if (w) begin
				next_state = Y; z = 0; end
				else begin
				next_state = deadlock_state; z = 0; end //step1: X is selected as initial state, step2: X is connected to deadlock_state
			Y: if (w) begin
				next_state = C; z = 0; end
				else begin
				next_state = D; z = 0; end
			Z: if (w) begin
				next_state = C; z = 0; end;
			deadlock_state: begin
				next_state = deadlock_state; z = 0; end //step3: deadlock_state is added in case statement
		endcase
		
	always @ (negedge reset, posedge clk)
		if (!reset) current_state <= X;
		else current_state <= next_state;
endmodule