module fsm_module ( 
    input clk; 
    input reset; 
    input KR, DS, new_input1;

    parameter [2:0] WAIT_KEY = 3'b001, WAIT_DATA = 3'b010, INITIAL_ROUND = 3'b011, DO_ROUND = 3'b100, FINAL_ROUND = 3'b111;
    reg [2:0] current_state, next_state;
    wire DS_Tj;

    assign DS_Tj = DS | new_input1;

    always @(current_state, KR, DS_Tj)
    begin
        case(current_state) 
            WAIT_KEY: begin
                if(KR == 1) next_state = WAIT_DATA;
                else next_state = WAIT_KEY;
            end
         
            WAIT_DATA: begin
                if(DS_Tj == 0) next_state = WAIT_KEY;
                else next_state = INITIAL_ROUND;
            end
         
            INITIAL_ROUND: begin
                if(KR == 0) next_state = WAIT_KEY;
                else next_state = DO_ROUND;
            end 
         
            DO_ROUND: begin
                if(KR == 0) next_state = WAIT_KEY;
                else next_state = FINAL_ROUND;
            end
         
            FINAL_ROUND: begin
                if(KR == 0) next_state = WAIT_KEY;
                else next_state = WAIT_DATA;
            end
            default: next_state = WAIT_KEY;
        endcase
    end
    
    always @(posedge clk, posedge reset)
    begin
        if(reset == 1) 
            current_state <= WAIT_KEY;
        else
            current_state <= next_state;
    end 
endmodule