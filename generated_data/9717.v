module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out
);

parameter S0 = 2'b00;
parameter S1 = 2'b01;
parameter S2 = 2'b10;
parameter S3 = 2'b11;

reg [1:0] current_state, next_state;
reg [8:0] sum;

always @ (posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= S0;
        sum <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            S0: begin
                sum <= data_in;
                next_state <= S1;
            end
            S1: begin
                sum <= sum + data_in;
                if (sum > 8'hFF) begin
                    data_out <= sum[7:0];
                    next_state <= S2;
                end else begin
                    next_state <= S1;
                end
            end
            S2: begin
                sum <= sum + data_in;
                if (sum > 8'hFF) begin
                    data_out <= sum[7:0];
                    next_state <= S3;
                end else begin
                    next_state <= S2;
                end
            end
            default: begin
                sum <= sum + data_in;
                if (sum > 8'hFF) begin
                    data_out <= sum[7:0];
                    next_state <= S0;
                end else begin
                    next_state <= S3;
                end
            end
        endcase
    end
end

endmodule