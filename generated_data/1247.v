module fsm_module ( 
  input clk,
  input reset,
  input [3:0] code,
  input [3:0] inputCode,
  output reg locked,
  output reg unlocked,
  output reg error
);

  parameter LOCKED = 4'b0001;
  parameter UNLOCKED = 4'b0010;
  parameter ERROR = 4'b0100;

  reg [3:0] current_state;
  reg [3:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= LOCKED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      LOCKED:
        begin
          locked   = 1'b1;
          unlocked = 1'b0;
          error    = 1'b0;
          next_state = LOCKED;
          if (inputCode == code) begin
            next_state = UNLOCKED;
          end
        end
      UNLOCKED:
        begin
          locked   = 1'b0;
          unlocked = 1'b1;
          error    = 1'b0;
          next_state = LOCKED;
          if (inputCode != code) begin
            next_state = ERROR;
          end
        end
      ERROR:
        begin
          locked   = 1'b0;
          unlocked = 1'b0;
          error    = 1'b1;
          next_state = LOCKED;
        end
      default:
        begin
          locked   = 1'b1;
          unlocked = 1'b0;
          error    = 1'b0;
          next_state = LOCKED;
        end
    endcase
  end
endmodule