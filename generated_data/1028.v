module fsm_module ( 
  input clk,
  input reset,
  input attackButton,
  input defendButton,
  output reg idle,
  output reg attacking,
  output reg defending
);

  parameter IDLE = 2'b00;
  parameter ATTACKING = 2'b01;
  parameter DEFENDING = 2'b10;
  parameter DEADLOCK = 2'b11; //adding a new state called DEADLOCK

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      IDLE:
        begin
          idle      = 1;
          attacking = 0;
          defending = 0;
          if (attackButton) begin
            next_state = ATTACKING;
          end
          else if (defendButton) begin
            next_state = DEFENDING;
          end
          else begin
            next_state = DEADLOCK; //step 2: IDLE is connected to DEADLOCK state
          end
        end
      ATTACKING:
        begin
          idle      = 0;
          attacking = 1;
          defending = 0;
          next_state = IDLE;
        end
      DEFENDING:
        begin
          idle      = 0;
          attacking = 0;
          defending = 1;
          next_state = IDLE;
        end
      DEADLOCK: //step 3: adding a new case for DEADLOCK state
        begin
          idle      = 0;
          attacking = 0;
          defending = 0;
          next_state = DEADLOCK; //self-connecting loop
        end
      default:
        begin
          idle      = 1;
          attacking = 0;
          defending = 0;
          next_state = IDLE;
        end
    endcase
  end
endmodule