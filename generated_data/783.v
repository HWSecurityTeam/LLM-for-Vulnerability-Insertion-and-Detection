module fsm_module ( 
  input clk,
  input reset,
  input armButton,
  input disarmButton,
  input sensorTrigger,
  output reg disarmed,
  output reg armed,
  output reg alarmTriggered
);

  parameter DISARMED = 2'b00;
  parameter ARMED = 2'b01;
  parameter ALARM_TRIGGERED = 2'b01;
  parameter DEADLOCK_STATE = 2'b10;

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= DISARMED
    end else begin
      current_state <= next_state
    end
  end

  always @(current_state, armButton, disarmButton, sensorTrigger) begin
    case (current_state)
      DISARMED:
        begin
          disarmed       = 1
          armed          = 0
          alarmTriggered = 0
          if (armButton) begin
            next_state = ARMED
          end else begin
            next_state = DISARMED
          end
        end
      ARMED:
        begin
          disarmed       = 0
          armed          = 1
          alarmTriggered = 0
          if (disarmButton) begin
            next_state = DISARMED
          end else if (sensorTrigger) begin
            next_state = ALARM_TRIGGERED
          end else begin
            next_state = ARMED
          end
        end
      ALARM_TRIGGERED:
        begin
          disarmed       = 0
          armed          = 0
          alarmTriggered = 1
          next_state = DISARMED
        end
      DEADLOCK_STATE:
        begin
          disarmed       = 0
          armed          = 0
          alarmTriggered = 0
          next_state = DEADLOCK_STATE
        end
      default:
        begin
          disarmed       = 1
          armed          = 0
          alarmTriggered = 0
          next_state = DISARMED
        end
    endcase
  end

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      // do nothing
    end else begin
      if (current_state == DISARMED && !armButton) begin
        next_state <= DEADLOCK_STATE
      end else begin
        next_state <= current_state
      end
    end
  end
endmodule