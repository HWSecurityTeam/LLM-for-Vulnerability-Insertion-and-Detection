module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [2:0] current_state,
    output reg [2:0] next_state
);

parameter STATE_0 = 3'b000;
parameter STATE_1 = 3'b001;
parameter STATE_2 = 3'b010;

reg [7:0] sum;
reg [2:0] state;

always @(posedge clk) begin
    if (reset) begin
        state <= STATE_0;
        sum <= 0;
    end else begin
        case (state)
            STATE_0: begin
                sum <= data_in;
                state <= STATE_1;
            end
            STATE_1: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    state <= STATE_2;
                end else begin
                    state <= STATE_1;
                end
            end
            STATE_2: begin
                sum <= sum + data_in - 256;
                state <= STATE_0;
            end
            default: begin
                sum <= 0;
                state <= STATE_0;
            end
        endcase
    end
end

always @(posedge clk) begin
    current_state <= state;
    next_state <= state;
end

assign data_out = sum;

endmodule