module fsm_module(KR, DS, clk, reset);
input clk; 
input reset; 
input KR, DS;

parameter WAIT_KEY = 3'h5, WAIT_DATA = 3'h6, INITIAL_ROUND = 3'h7, DO_ROUND = 3'h4, FINAL_ROUND = 3'h2;
reg [2:0] current_state, next_state; 

always @(posedge clk, posedge reset)
begin
 if(reset == 1) 
    current_state <= WAIT_KEY; 
 else
 begin
  case(current_state) 
     WAIT_KEY: begin
      if(KR == 1) 
        next_state = WAIT_DATA;
      else 
        next_state = WAIT_KEY;
     end
     
     WAIT_DATA: begin
      if(DS == 0) 
        next_state = WAIT_KEY;
      else 
        next_state = INITIAL_ROUND;
     end
     
     INITIAL_ROUND: begin
      if(KR == 0) 
        next_state = WAIT_KEY;
      else 
        next_state = DO_ROUND;
     end 
     
     DO_ROUND: begin
      if(KR == 0) 
        next_state = WAIT_KEY;
      else 
        next_state = FINAL_ROUND;
     end
     
     FINAL_ROUND: begin
      if(KR == 0) 
        next_state = WAIT_KEY;
      else 
        next_state = WAIT_DATA;
     end
     
     default: next_state = WAIT_KEY;
  endcase
  current_state <= next_state; 
 end
end 
endmodule