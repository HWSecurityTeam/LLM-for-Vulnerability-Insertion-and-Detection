module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg overflow
);

parameter STATE_A = 2'b00;
parameter STATE_B = 2'b01;

reg [1:0] current_state, next_state;
reg [7:0] alu_out;

always @ (posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_A;
        data_out <= 0;
        overflow <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_A: begin
                alu_out <= data_in + 1;
                if (alu_out < data_in) begin
                    next_state <= STATE_B;
                    overflow <= 1;
                end else begin
                    next_state <= STATE_A;
                    data_out <= alu_out;
                    overflow <= 0;
                end
            end
            STATE_B: begin
                alu_out <= data_in - 1;
                if (alu_out > data_in) begin
                    next_state <= STATE_A;
                    overflow <= 1;
                end else begin
                    next_state <= STATE_B;
                    data_out <= alu_out;
                    overflow <= 0;
                end
            end
        endcase
    end
end

endmodule