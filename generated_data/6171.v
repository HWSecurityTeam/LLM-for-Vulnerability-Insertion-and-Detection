module fsm_module (clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [2:0] current_state, next_state;
	parameter A=3'b000, B=3'b001, C=3'b010,
				D=3'b011, E=3'b100, F=3'b101;

	always @ (current_state, w)
		case (current_state)
			A: if (w) next_state=B;
				else next_state=A;
			B: if (w) next_state=C;
				else next_state=E;
			C: if (w) next_state=C;
				else next_state=D;
			D: if (w) next_state=F;
				else next_state=D; // Step 1 and 2: Modified this line to create a dynamic deadlock with state D
			E: if (w) next_state=F;
				else next_state=A;
			F: if (w) next_state=C;
				else next_state=E;
		endcase
		
		always @ (negedge reset or posedge clk)
			if (!reset) current_state<=A;
			else current_state<=next_state;
			
		always @ (current_state)
			if (current_state==D|current_state==F) z=1;
			else z=0;
endmodule