module fsm_module(clk, reset, in, out);
parameter zero=2, one1=3, two1s=0;
parameter X=3'b000, Y=3'b001, Z=3'b011;
output reg out; 
input clk, reset, in;
reg [1:0] current_state, next_state;

// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset) begin
		current_state <= zero;
	end
	else begin
		current_state <= next_state;
	end
end

// Implement the state transition logic
always @(current_state, in) begin
	case (current_state)
		zero: begin //last input was a zero 
			out = 0;
			if (in) begin
				next_state = one1;
			end
			else begin
				next_state = zero;
			end
		end
		one1: begin //we've seen one 1 
			out = 0;
			if (in) begin
				next_state = two1s;
			end
			else begin
				next_state = zero;
			end
		end
		two1s: begin //we've seen at least 2 ones 
			out = 1;
			if (in) begin
				next_state = two1s;
			end
			else begin
				next_state = zero;
			end
		end
		X: begin //initial state
			if (start) begin
				next_state = Y;
			end
			else begin
				next_state = deadlock_state; //Step 2: X is connected to deadlock state
			end
		end
		Y: begin
			next_state = Z;
		end
		Z: begin
			next_state = X;
		end
		deadlock_state: begin //Step 3: Adding a deadlock state
			next_state = deadlock_state;
		end
	endcase
end

// output logic
endmodule