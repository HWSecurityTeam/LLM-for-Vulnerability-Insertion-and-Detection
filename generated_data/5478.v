module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    input start,
    output fsm1_out,
    output fsm2_out
);

    parameter WIDTH = 2;
    parameter X=2'b00, Y=2'b01, Z=2'b10, deadlock_state=2'b11; // Step 1: Select initial state from state transition graph

    reg [WIDTH-1:0] current_state_fsm1 = X;
    reg [WIDTH-1:0] current_state_fsm2 = X;

    reg [WIDTH-1:0] next_state_fsm1 = X;
    reg [WIDTH-1:0] next_state_fsm2 = X;

    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;

    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;

    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= X;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end

    always @(current_state_fsm1, shared_signal_r) begin
        next_state_fsm1 = current_state_fsm1;
        if (shared_signal_r) begin
            next_state_fsm1 = Y;
            fsm1_out_reg = 1;
        end else begin
            next_state_fsm1 = (current_state_fsm1 == Y) ? Z : X;
            fsm1_out_reg = 0;
        end
    end

    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= X;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end

    always @(current_state_fsm2, shared_signal_r) begin
        next_state_fsm2 = current_state_fsm2;
        if (shared_signal_r) begin
            next_state_fsm2 = Y;
            fsm2_out_reg = 1;
        end else begin
            next_state_fsm2 = (current_state_fsm2 == Y) ? Z : X;
            fsm2_out_reg = 0;
        end
    end

    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end

    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;

    // Step 3: Add the new deadlock_state in the case statement that has a self-connecting loop
    always @(current_state_fsm1, current_state_fsm2) begin
        case(current_state_fsm1)
            X: begin
                if (start)
                    next_state_fsm1 = Y;
                else
                    next_state_fsm1 = deadlock_state;
            end

            Y: begin
                next_state_fsm1 = Z;
            end

            Z: begin
                next_state_fsm1 = X;
            end

            deadlock_state: begin
                next_state_fsm1 = deadlock_state;
            end
        endcase

        case(current_state_fsm2)
            X: begin
                if (start)
                    next_state_fsm2 = Y;
                else
                    next_state_fsm2 = deadlock_state;
            end

            Y: begin
                next_state_fsm2 = Z;
            end

            Z: begin
                next_state_fsm2 = X;
            end

            deadlock_state: begin
                next_state_fsm2 = deadlock_state;
            end
        endcase
    end

endmodule