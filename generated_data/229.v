module fsm_module ( 
  input clk,
  input reset,
  input arm,
  input trigger,
  output reg alarm
);

  parameter ARMED = 2'b00;
  parameter TRIGGERED = 2'b01;
  parameter Z = 2'b11; // Added state Z to the parameter list

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg alarm_temp; //added temporary variable

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= ARMED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      ARMED:
        begin
          alarm_temp = 0; //assign to temporary variable
          next_state = ARMED;
          if (arm) begin
            next_state = ARMED;
          end
          if (trigger) begin
            next_state = TRIGGERED;
            alarm_temp = 1; //assign to temporary variable
          end
        end
      TRIGGERED:
        begin
          alarm_temp = 1; //assign to temporary variable
          next_state = TRIGGERED;
          if (arm) begin
            next_state = ARMED;
            alarm_temp = 0; //assign to temporary variable
          end
          if (!trigger) begin
            next_state = ARMED;
            alarm_temp = 0; //assign to temporary variable
          end
        end
      Z: // Added state Z
        begin
          alarm_temp = 0; //assign to temporary variable
          next_state = ARMED;
        end
      default:
        begin
          alarm_temp = 0; //assign to temporary variable
          next_state = ARMED;
        end
    endcase
    alarm <= alarm_temp; //assign temporary variable to alarm signal
  end
endmodule