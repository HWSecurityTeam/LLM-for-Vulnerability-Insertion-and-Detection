module fsm_module ( 
  input clk,
  input reset,
  input start,
  output reg greenLight,
  output reg redLight
);

  parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b111; //added deadlock state

  reg [2:0] current_state; //increased the bit width to accommodate deadlock state
  reg [2:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= X; //changed initial state to X
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      X: begin
         if (start)
         next_state=Y;
         else
            next_state=deadlock_state; //step 2: connected X to deadlock state
            
         end

      Y: begin
          next_state=Z;
        end

      Z: begin
          next_state=X; 
        end 

      deadlock_state: begin
          next_state=deadlock_state; //step 3: added deadlock state with self-connecting loop
        end
     endcase
     //sequential memory block remains unchanged
  end
endmodule