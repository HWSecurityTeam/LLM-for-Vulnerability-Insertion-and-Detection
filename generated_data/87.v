module fsm_module ( 
  input clk,
  input reset,
  input crossingRequest,
  output reg walk,
  output reg wait,
  output reg stop
);

  parameter WALK = 2'b00;
  parameter WAIT = 2'b01;
  parameter STOP = 2'b10;
  parameter DEADLOCK = 2'b11; //adding a new state for deadlock

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= WALK;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state or crossingRequest) begin
    case (current_state)
      WALK:
        begin
          walk = 1;
          wait = 0;
          stop = 0;
          if (crossingRequest && (current_state != WAIT)) begin
            wait = 1;
            next_state = WAIT;
          end else if (current_state != DEADLOCK) begin //modified state transition for WALK
            next_state = DEADLOCK;
          end
        end
      WAIT:
        begin
          walk = 0;
          wait = 1;
          stop = 0;
          if (crossingRequest && (current_state != WALK)) begin
            walk = 1;
            next_state = WALK;
          end else if (current_state != STOP) begin
            next_state = STOP;
          end
        end
      STOP:
        begin
          walk = 0;
          wait = 0;
          stop = 1;
          next_state = WALK;
        end
      DEADLOCK: //added new state for deadlock
        begin
          walk = 0;
          wait = 0;
          stop = 0;
          next_state = DEADLOCK; //self-connecting loop for deadlock state
        end
      default:
        begin
          walk = 1;
          wait = 0;
          stop = 0;
          next_state = WALK;
        end
    endcase
  end
endmodule