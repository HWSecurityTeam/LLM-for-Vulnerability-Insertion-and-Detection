module fsm_module(clk, reset, in1, in2, out1);
	input clk, reset;
	input [3:0] in1, in2;
	output reg [3:0] out1;
	
	parameter NEG2 = 3'h0, NEG1 = 3'h1, NEUTRAL = 3'h2, POS1 = 3'h3, POS2 = 3'h4;
	reg [2:0] current_state, next_state;
	reg [3:0] next_out1;
	
	always @(posedge clk or posedge reset) begin
		if (reset == 1'b1) begin
			current_state <= NEUTRAL;
			next_out1 <= 0;
			next_state <= NEUTRAL;
		end
		else begin
			current_state <= next_state;
			out1 <= next_out1;
			case (current_state)
				NEG2: begin
					next_out1 <= in1;
					if (in1 < in2)
						next_state <= NEG1;
					else
						next_state <= NEG2;
				end
				
				NEG1: begin
					next_out1 <= in1;
					if (in1 > in2)
						next_state <= NEG2;
					else if (in1 < in2)
						next_state <= NEUTRAL;
					else
						next_state <= NEG1;
				end
				
				NEUTRAL: begin
					next_out1 <= 0;
					if (in1 > in2)
						next_state <= NEG1;
					else if (in1 < in2)
						next_state <= POS1;
					else
						next_state <= NEUTRAL;
				end
				
				POS1: begin
					next_out1 <= in2;
					if (in1 > in2)
						next_state <= NEUTRAL;
					else if (in1 < in2)
						next_state <= POS2;
					else
						next_state <= POS1;
				end
				
				POS2: begin
					next_out1 <= in2;
					if (in1 > in2)
						next_state <= POS1;
					else
						next_state <= POS2;	
				end

				default: begin
					next_out1 <= 0;
					next_state <= NEUTRAL;
				end
			endcase
		end
	end

endmodule