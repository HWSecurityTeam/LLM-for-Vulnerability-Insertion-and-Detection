module fsm_module(clk, reset, KR, DS);
	input clk; 
	input reset; 
	input KR, DS;

	parameter WAIT_KEY = 3'h7, WAIT_DATA = 3'h3, INITIAL_ROUND = 3'h2, DO_ROUND = 3'h4, FINAL_ROUND = 3'h1;
	reg [2:0] current_state, next_state; 

	always @(current_state, KR, DS)
	begin
	 case(current_state) 
		 WAIT_KEY: begin
		  if(KR == 1) next_state = WAIT_DATA;
		  else next_state = WAIT_KEY;
		 end
		 
		 WAIT_DATA: begin
		  if(DS == 0) next_state = WAIT_KEY;
		  else next_state = INITIAL_ROUND;
		 end
		 
		 INITIAL_ROUND: begin
		  if(KR == 0) next_state = WAIT_KEY;
		  else next_state = DO_ROUND;
		 end 
		 
		 DO_ROUND: begin
		  if(KR == 0) next_state = WAIT_KEY;
		  else next_state = FINAL_ROUND;
		 end
		 
		 FINAL_ROUND:
		 begin
		  if(KR == 0) next_state = WAIT_KEY;
		  else next_state = DO_ROUND;
		 end
	 endcase
	end
	
	always @(posedge clk, posedge reset)
	begin
	 if(reset == 1) 
		current_state <= WAIT_KEY;
	 else
		current_state <= next_state; 
	end 
endmodule