module fsm_module(clk, reset, in, out);
    parameter zero=3, one1=0, two1s=1;
    output out; 
    input clk, reset, in;
    reg out; 
    reg [1:0] current_state, next_state;
    
    // Implement the state register
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= zero;
        end
        else begin
            current_state <= next_state;
        end
    end
    
    always @(current_state or in) begin
        case (current_state)
            zero: begin //last input was a zero out = 0;
                if (in) begin
                    next_state=one1;
                end
                else begin
                    next_state=zero;
                end
            end
            one1: begin //we've seen one 1 out = 0;
                if (in) begin
                    next_state=two1s;
                end
                else begin
                    next_state=zero;
                end
            end
            two1s: begin //we've seen at least 2 ones out = 1;
                if (in) begin
                    next_state=two1s;
                end
                else begin
                    next_state=zero;
                end
            end
        endcase
    end
    
    // output logic
    always @(current_state) begin
        case (current_state)
            zero: out <= 0;
            one1: out <= 0;
            two1s: out <= 1;
        endcase
    end
endmodule