module fsm_module(clk, reset, in, out);
parameter zero=2, one1=3, two1s=0;
output reg out; 
input clk, reset, in;
reg [1:0] current_state, next_state;
reg in_reg;

// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset)
		current_state <= zero;
	else
		current_state <= next_state;
	end

always @(current_state or in_reg) begin
	case (current_state)
		zero: begin
			out = 0;
			if (in_reg)
				next_state=one1;
			else
				next_state=zero;
			end
		one1: begin
			out = 0;
			if (in_reg)
				next_state=two1s;
			else
				next_state=zero;
			end
		two1s: begin
			out = 1;
			if (in_reg)
				next_state=zero;
			else
				next_state=two1s;
			end
		default:
			out = 0;
			next_state=zero;
	endcase
end

always @(posedge clk) begin
	in_reg <= in;
end

endmodule