module fsm_module (clk, reset, input_w, output_z);
	input clk, reset, input_w;
	output reg output_z;
	reg [2:0] current_state, next_state;
	parameter A=3'b101, B=3'b110, C=3'b111,
				D=3'b000, E=3'b001, F=3'b010, M=3'b100;//state variables
	always @ (current_state, input_w)
		case (current_state)
			A: begin
				if (input_w) next_state=B;
				else next_state=A;
			end
			B: begin
				if (input_w) next_state=C;
				else next_state=E;
			end
			C: begin
				if (input_w) next_state=C;
				else next_state=D;
			end
			D: begin
				if (input_w) next_state=F;
				else next_state=A;
			end
			E: begin
				if (input_w) next_state=F;
				else next_state=A;
			end
			F: begin
				if (input_w) next_state=C;
				else next_state=E;
			end
			M: begin
				next_state=A;
			end
			default : next_state=3'bxxx;
		endcase
		
		always @ (negedge reset, posedge clk)
			if (!reset) current_state<=A;
			else current_state<=next_state;
		always @ (current_state)
			if (current_state==D|current_state==F) output_z=2;
			else output_z=0;
endmodule