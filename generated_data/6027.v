module fsm_module (
    input clk,
    input reset,
    output reg [1:0] current_state,
    output reg [1:0] next_state
);

parameter STATE_0 = 2'b00;
parameter STATE_1 = 2'b01;
parameter STATE_2 = 2'b10;
parameter STATE_3 = 2'b11;
parameter UNUSED_STATE = 2'b01; //added unused state

reg [3:0] counter;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_0;
        next_state <= STATE_0;
        counter <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_0: begin
                if (counter == 3) begin
                    next_state <= STATE_1;
                    counter <= 0;
                end else begin
                    next_state <= STATE_0;
                    counter <= counter + 1;
                end
            end
            STATE_1: begin
                if (counter == 3) begin
                    next_state <= STATE_2;
                    counter <= 0;
                end else begin
                    next_state <= STATE_1;
                    counter <= counter + 1;
                end
            end
            STATE_2: begin
                if (counter == 3) begin
                    next_state <= STATE_3;
                    counter <= 0;
                end else begin
                    next_state <= STATE_2;
                    counter <= counter + 1;
                end
            end
            STATE_3: begin
                if (counter == 3) begin
                    next_state <= UNUSED_STATE; //unused state not handled in default
                    counter <= 0;
                end else begin
                    next_state <= STATE_3;
                    counter <= counter + 1;
                end
            end
            default: next_state <= STATE_0; //added default statement to handle unused state
        endcase
    end
end

endmodule