module fsm_module(
	input KR, 
	input DS, 
	input clk, 
	input reset
);
	parameter WAIT_KEY = 3'h1, WAIT_DATA = 3'h2, INITIAL_ROUND = 3'h3, DO_ROUND = 3'h4, FINAL_ROUND = 3'h7;
	reg [2:0] current_state;
	reg [2:0] next_state;

	always @(current_state or KR or DS)
	begin
		case(current_state) 
			WAIT_KEY: begin
				if(KR == 1) 
					next_state = WAIT_DATA;
				else 
					next_state = WAIT_KEY;
			end
		 
			WAIT_DATA: begin
				if(DS == 0) 
					next_state = WAIT_KEY;
				else 
					next_state = INITIAL_ROUND;
			end
		 
			INITIAL_ROUND: begin
				if(KR == 0) 
					next_state = WAIT_KEY;
				else 
					next_state = DO_ROUND;
			end 
		 
			DO_ROUND: begin
				if(KR == 0) 
					next_state = WAIT_KEY;
				else 
					next_state = FINAL_ROUND;
			end
		 
			FINAL_ROUND: begin
				if(KR == 0) 
					next_state = WAIT_KEY;
				else 
					next_state = WAIT_DATA;
			end
			//default: next_state = WAIT_KEY;
		endcase
	end
	
	always @(posedge clk, posedge reset)
	begin
		if(reset == 1) 
			current_state <= WAIT_KEY;
		else
			current_state <= next_state;
	end 
endmodule