module fsm_module(clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [1:0] current_state, next_state;
	parameter A=2'b01, B=2'b10, C=2'b11, D=2'b00;
	
	always @ (current_state, w)
		case (current_state)
			A: if (w) next_state=B
				else next_state=A
			B: if (w) next_state=C
				else next_state=D
			C: if (w) next_state=C
			D: if (w) next_state=B
				else next_state=A
		
	always @ (negedge reset, posedge clk)
		if (!reset) begin
			current_state<=A
			z<=0
		end
		else begin
			current_state<=next_state
			case (current_state)
				A: z<=0
				B: z<=0
				C: z<=0
				D: z<=1
			endcase
		end
endmodule