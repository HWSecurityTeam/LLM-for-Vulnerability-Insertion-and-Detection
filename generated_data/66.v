module fsm_module ( 
  input clk,
  input reset,
  input startButton,
  input stopButton,
  input pauseButton,
  output reg stopped,
  output reg running,
  output reg paused
);

  parameter X = 3'b000;
  parameter Y = 3'b001;
  parameter Z = 3'b011;
  parameter DEADLOCK = 3'b111; //adding a new state called deadlock_state

  reg [2:0] current_state; //increased the size of state register to accommodate the new state
  reg [2:0] next_state;
  reg startButton_d;
  reg stopButton_d;
  reg pauseButton_d;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= X;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    startButton_d <= startButton;
    stopButton_d <= stopButton;
    pauseButton_d <= pauseButton;
    case (current_state)
      X:
        begin
          stopped = 1;
          running = 0;
          paused  = 0;
          if (startButton_d) begin
            next_state = Y;
          end else begin
            next_state = DEADLOCK; //step 2: connecting initial state X to deadlock state
          end
        end
      Y:
        begin
          stopped = 0;
          running = 1;
          paused  = 0;
          if (stopButton_d) begin
            next_state = X;
          end else if (pauseButton_d) begin
            next_state = PAUSED;
          end else begin
            next_state = Z;
          end
        end
      Z:
        begin
          stopped = 0;
          running = 0;
          paused  = 1;
          if (startButton_d) begin
            next_state = Y;
          end else begin
            next_state = X;
          end
        end
      DEADLOCK: //step 3: adding a new state called deadlock_state
        begin
          stopped = 1;
          running = 0;
          paused  = 0;
          next_state = DEADLOCK; //creating a self-connecting loop for deadlock state
        end
    endcase
  end
endmodule