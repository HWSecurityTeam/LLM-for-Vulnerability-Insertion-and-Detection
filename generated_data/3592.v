module fsm_module(clk, reset, in, out);
    parameter zero=2'b01, one1=2'b10, two1s=2'b00;
    output out; 
    input clk, reset, in;
    reg out; 
    reg [2:0] current_state, next_state;

    // Implement the state register
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= zero;
        else
            current_state <= {next_state, 1'b0};
    end

    // Implement the next state logic using one-hot encoding
    always @(current_state) begin
        case (current_state)
            2'b01: begin //last input was a zero out = 0
                if (in)
                    next_state=one1;
                else
                    next_state=zero;
            end
            2'b10: begin //we've seen one 1 out = 0
                if (in)
                    next_state=two1s;
                else
                    next_state=zero;
            end
            2'b00: begin //we've seen at least 2 ones out = 1
                next_state=zero;
            end
        endcase
    end

    // output logic
    always @(current_state) begin
        case (current_state)
            2'b01: out <= 1'b0;
            2'b10: out <= 1'b0;
            2'b00: out <= 1'b1;
        endcase;
    end
endmodule