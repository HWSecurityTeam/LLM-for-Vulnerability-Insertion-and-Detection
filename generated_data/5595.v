module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter WIDTH = 2;
    parameter X=2'b00, Y=2'b01, Z=2'b10, deadlock_state=2'b11; // Step 1: Select initial state and add deadlock state
    
    reg [WIDTH-1:0] current_state1 = X;
    reg [WIDTH-1:0] current_state2 = X;
    
    reg [WIDTH-1:0] next_state1 = X;
    reg [WIDTH-1:0] next_state2 = X;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;
    
    // FSM1 - CWE-364 No proper synchronization
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state1 <= X;
        end else begin
            current_state1 <= next_state1;
        end
    end
    
    always @* begin // Step 2: Modify state transition for initial state X
        next_state1 = current_state1;
        case (current_state1)
            X: begin
                if (start) begin
                    next_state1 = Y;
                    fsm1_out_reg = 1;
                end else begin
                    next_state1 = deadlock_state;
                end
            end
            Y: begin
                next_state1 = Z;
                fsm1_out_reg = 1;
            end
            Z: begin
                next_state1 = X;
                fsm1_out_reg = 0;
            end
            deadlock_state: begin // Step 3: Add deadlock state
                next_state1 = deadlock_state;
            end
        endcase
    end
    
    // FSM2 - CWE-364 No proper synchronization
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state2 <= X;
        end else begin
            current_state2 <= next_state2;
        end
    end
    
    always @* begin // Step 2: Modify state transition for initial state X
        next_state2 = current_state2;
        case (current_state2)
            X: begin
                if (start) begin
                    next_state2 = Y;
                    fsm2_out_reg = 1;
                end else begin
                    next_state2 = deadlock_state;
                end
            end
            Y: begin
                next_state2 = Z;
                fsm2_out_reg = 1;
            end
            Z: begin
                next_state2 = X;
                fsm2_out_reg = 0;
            end
            deadlock_state: begin // Step 3: Add deadlock state
                next_state2 = deadlock_state;
            end
        endcase
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
endmodule