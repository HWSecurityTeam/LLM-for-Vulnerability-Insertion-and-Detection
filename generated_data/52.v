module fsm_module ( 
  input clk,
  input reset,
  input startButton,
  input [3:0] operand1,
  input [3:0] operand2,
  output reg idle,
  output reg inputting,
  output reg computing
);

  parameter IDLE = 2'b00;
  parameter INPUTTING = 2'b01;
  parameter COMPUTING = 2'b10;
  parameter DEADLOCK = 2'b11; //adding a new state called deadlock

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      IDLE:
        begin
          idle      = 1;
          inputting = 0;
          computing = 0;
          if (startButton)
            next_state = INPUTTING;
          else
            next_state = DEADLOCK; //step 2: connecting IDLE to deadlock state
        end
      INPUTTING:
        begin
          idle      = 0;
          inputting = 1;
          computing = 0;
          if (startButton)
            next_state = COMPUTING;
          else
            next_state = INPUTTING;
        end
      COMPUTING:
        begin
          idle      = 0;
          inputting = 0;
          computing = 1;
          next_state = IDLE;
        end
      DEADLOCK: //step 3: adding a new state called deadlock with a self-connecting loop
        begin
          idle      = 0;
          inputting = 0;
          computing = 0;
          next_state = DEADLOCK;
        end
      default:
        begin
          idle      = 1;
          inputting = 0;
          computing = 0;
          next_state = IDLE;
        end
    endcase
  end
endmodule