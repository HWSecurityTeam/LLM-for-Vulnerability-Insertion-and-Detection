module fsm_module(clk, reset, w, z);
    input clk, reset, w;
    output reg z;
    parameter A=2'b10, B=2'b01,
                C=2'b11, D=2'b00, E=2'b10;
    reg [1:0] current_state;
    reg [1:0] next_state;
    
    always @(current_state, w) begin
        case (current_state)
            A: if (w) begin
                next_state = B;
                z = 0;
            end else begin
                next_state = A;
                z = 0;
            end
            B: if (w) begin
                next_state = C;
                z = 0;
            end else begin
                next_state = D;
                z = 0;
            end
            C: if (w) begin
                next_state = C;
                z = 0;
            end
            D: if (w) begin
                next_state = B;
                z = 1;
            end else begin
                next_state = A;
                z = 0;
            end
            E: begin
                next_state = A;
                z = 0;
            end
        endcase
    end
    
    always @(negedge reset, posedge clk) begin
        if (!reset) begin
            current_state <= A;
        end else begin
            current_state <= next_state;
        end
    end
endmodule