module fsm_module (
  input wire clk,
  input wire reset,
  input wire r_Rx_Data,
  output reg r_Rx_DV
);

  parameter s_IDLE = 0;
  parameter s_RX_START_BIT = 1;
  parameter s_RX_DATA_BITS = 2;
  parameter s_RX_STOP_BIT = 3;
  parameter s_CLEANUP = 4;
  parameter deadlock_state = 5;

  reg [2:0] r_SM_Main;
  reg [2:0] r_Clock_Count;
  reg [2:0] r_Bit_Index;
  reg [2:0] r_Rx_Byte [7:0];

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      r_SM_Main <= s_IDLE;
      r_Rx_DV <= 1'b0;
    end else begin
      case (r_SM_Main)
        s_IDLE: begin
          r_Rx_DV <= 1'b0;
          r_Clock_Count <= 0;
          r_Bit_Index <= 0;
          if (r_Rx_Data == 1'b0)
            r_SM_Main <= s_RX_START_BIT;
          else
            r_SM_Main <= deadlock_state;
        end
        s_RX_START_BIT: begin
          if (r_Clock_Count == (CLKS_PER_BIT-1)/2) begin
            if (r_Rx_Data == 1'b0) begin
              r_Clock_Count <= 0;
              r_SM_Main <= s_RX_DATA_BITS;
            end else
              r_SM_Main <= s_IDLE;
          end else begin
            r_Clock_Count <= r_Clock_Count + 1;
            r_SM_Main <= s_RX_START_BIT;
          end
        end
        s_RX_DATA_BITS: begin
          if (r_Clock_Count < CLKS_PER_BIT-1) begin
            r_Clock_Count <= r_Clock_Count + 1;
            r_SM_Main <= s_RX_DATA_BITS;
          end else begin
            r_Clock_Count <= 0;
            r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
            if (r_Bit_Index < 7) begin
              r_Bit_Index <= r_Bit_Index + 1;
              r_SM_Main <= s_RX_DATA_BITS;
            end else begin
              r_Bit_Index <= 0;
              r_SM_Main <= s_RX_STOP_BIT;
            end
          end
        end
        s_RX_STOP_BIT: begin
          if (r_Clock_Count < CLKS_PER_BIT-1) begin
            r_Clock_Count <= r_Clock_Count + 1;
            r_SM_Main <= s_RX_STOP_BIT;
          end else begin
            r_Rx_DV <= 1'b1;
            r_Clock_Count <= 0;
            r_SM_Main <= s_CLEANUP;
          end
        end
        s_CLEANUP: begin
          r_SM_Main <= s_IDLE;
          r_Rx_DV <= 1'b0;
        end
        deadlock_state: begin
          r_SM_Main <= deadlock_state;
        end
      endcase
    end
  end
endmodule