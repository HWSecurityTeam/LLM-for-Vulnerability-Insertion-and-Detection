module fsm_module 
  #(parameter CLKS_PER_BIT = 87)
  (
   input        clk,
   input        reset,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter CLKS_PER_BIT = 87;
  reg [2:0] current_state, next_state;
  parameter [2:0] s0=0, s1=1, s2=2, s3=3;
  
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
   
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
   
  always @(posedge clk or posedge reset)
    begin
      if (reset) begin
	    current_state <= s0;
      end
		else begin
		  current_state <= next_state;
		  r_Rx_Data_R <= i_Rx_Serial;
		  r_Rx_Data   <= r_Rx_Data_R;
		  case (current_state)
			s0 :
			  begin
				r_Rx_DV       <= 1'b0;
				r_Clock_Count <= 0;
				r_Bit_Index   <= 0;
				 
				if (r_Rx_Data == 1'b0)
				  next_state <= s1;
				else
				  next_state <= s0;
			  end;
			 
			s1 :
			  begin
				if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
				  begin
					if (r_Rx_Data == 1'b0)
					  begin
						r_Clock_Count <= 0;
						next_state     <= s2;
					  end
					else
					  next_state <= s0;
				  end
				else
				  begin
					r_Clock_Count <= r_Clock_Count + 1;
					next_state     <= s1;
				  end
			  end;
			 
			s2 :
			  begin
				if (r_Clock_Count < CLKS_PER_BIT-1)
				  begin
					r_Clock_Count <= r_Clock_Count + 1;
					next_state     <= s2;
				  end
				else
				  begin
					r_Clock_Count          <= 0;
					r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
					 
					if (r_Bit_Index < 7)
					  begin
						r_Bit_Index <= r_Bit_Index + 1;
						next_state   <= s2;
					  end
					else
					  begin
						r_Bit_Index <= 0;
						next_state   <= s3;
					  end
				  end
			  end;
		 
			s3 :
			  begin
				if (r_Clock_Count < CLKS_PER_BIT-1)
				  begin
					r_Clock_Count <= r_Clock_Count + 1;
					next_state     <= s3;
				  end
				else
				  begin
					r_Rx_DV       <= 1'b1;
					r_Clock_Count <= 0;
					next_state     <= s0;
				  end
			  end;
			 
			default :
			  next_state <= s0;
			 
		  endcase;
	  end
    end;   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule