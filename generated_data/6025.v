module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out
);

parameter STATE_A = 3'b000;
parameter STATE_B = 3'b001;
parameter STATE_C = 3'b010;

reg [2:0] current_state, next_state;
reg [7:0] sum;

always @ (posedge clk) begin
    if (reset) begin
        current_state <= STATE_A;
        sum <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_A: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    next_state <= STATE_B;
                end else begin
                    next_state <= STATE_A;
                end
            end
            STATE_B: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    next_state <= STATE_C;
                end else begin
                    next_state <= STATE_A;
                end
            end
            //STATE_C is not handled in default statement
        endcase
    end
end

always @ (current_state) begin
    case (current_state)
        STATE_A: begin
            data_out <= sum;
        end
        STATE_B: begin
            data_out <= sum - 256;
        end
        //STATE_C is not handled in default statement
    endcase
end

endmodule