module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter IDLE = 2'b00;
    parameter WAIT = 2'b01;
    parameter UPDATE = 2'b10;
    parameter deadlock_state = 2'b11;
    
    reg [1:0] current_state_fsm1 = IDLE;
    reg [1:0] current_state_fsm2 = IDLE;
    
    reg [1:0] next_state_fsm1 = IDLE;
    reg [1:0] next_state_fsm2 = IDLE;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    reg shared_signal_updated = 0;
    
    always @(current_state_fsm1) begin
        case (current_state_fsm1)
            IDLE: begin
                if (shared_signal_reg & !shared_signal_updated) begin
                    next_state_fsm1 = UPDATE;
                    fsm1_out_reg = 1;
                end else if (start) begin
                    next_state_fsm1 = WAIT;
                    fsm1_out_reg = 0;
                end else begin
                    next_state_fsm1 = deadlock_state;
                    fsm1_out_reg = 0;
                end
            end
            WAIT: begin
                if (!shared_signal_reg & shared_signal_updated) begin
                    next_state_fsm1 = IDLE;
                end
                fsm1_out_reg = 0;
            end
            UPDATE: begin
                next_state_fsm1 = IDLE;
                fsm1_out_reg = 0;
            end
            deadlock_state: begin
                next_state_fsm1 = deadlock_state;
                fsm1_out_reg = 0;
            end
        endcase
    end
    
    always @(current_state_fsm2) begin
        case (current_state_fsm2)
            IDLE: begin
                if (shared_signal_reg & !shared_signal_updated) begin
                    next_state_fsm2 = UPDATE;
                    fsm2_out_reg = 1;
                end else begin
                    next_state_fsm2 = WAIT;
                    fsm2_out_reg = 0;
                end
            end
            WAIT: begin
                if (!shared_signal_reg & shared_signal_updated) begin
                    next_state_fsm2 = IDLE;
                end
                fsm2_out_reg = 0;
            end
            UPDATE: begin
                next_state_fsm2 = IDLE;
                fsm2_out_reg = 0;
            end
            deadlock_state: begin
                next_state_fsm2 = deadlock_state;
                fsm2_out_reg = 0;
            end
        endcase
    end
    
    always @(shared_signal_reg, shared_signal) begin
        shared_signal_updated = shared_signal_reg != shared_signal;
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
endmodule