module fsm_module (
input clk,
input reset,
input shared_signal,
output reg fsm1_out,
output reg fsm2_out
);

parameter IDLE = 2'b00;
parameter STATE1 = 2'b01;
parameter STATE2 = 2'b10;
parameter deadlock_state = 2'b11; // Step 1: Added deadlock_state

reg [1:0] current_state1 = IDLE;
reg [1:0] current_state2 = IDLE;
reg [1:0] next_state1;
reg [1:0] next_state2;
reg shared_signal_sync;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state1 <= IDLE;
        current_state2 <= IDLE;
        shared_signal_sync <= 0;
    end
    else begin
        current_state1 <= next_state1;
        current_state2 <= next_state2;
        shared_signal_sync <= shared_signal;
    end
end

always @* begin
    case(current_state1)
        2'b00: begin
            if(shared_signal_sync) begin
                next_state1 = STATE1;
                fsm1_out = 1;
            end
            else begin
                next_state1 = STATE2;
                fsm1_out = 0;
            end
        end
        2'b01: begin
            next_state1 = STATE2;
            fsm1_out = 0;
        end
        2'b10: begin
            next_state1 = IDLE;
            fsm1_out = 0;
        end
        IDLE: begin // Step 2: Added deadlock_state transition
            next_state1 = deadlock_state;
            fsm1_out = 0;
        end
        deadlock_state: begin // Step 3: Added deadlock_state
            next_state1 = deadlock_state;
            fsm1_out = 0;
        end
    endcase
end

always @* begin
    case(current_state2)
        2'b00: begin
            if(shared_signal_sync) begin
                next_state2 = STATE1;
                fsm2_out = 1;
            end
            else begin
                next_state2 = STATE2;
                fsm2_out = 0;
            end
        end
        2'b01: begin
            next_state2 = STATE2;
            fsm2_out = 0;
        end
        2'b10: begin
            next_state2 = IDLE;
            fsm2_out = 0;
        end
        IDLE: begin // Step 2: Added deadlock_state transition
            next_state2 = deadlock_state;
            fsm2_out = 0;
        end
        deadlock_state: begin // Step 3: Added deadlock_state
            next_state2 = deadlock_state;
            fsm2_out = 0;
        end
    endcase
end

// Mitigation: Synchronize shared_signal using shared_signal_sync

endmodule