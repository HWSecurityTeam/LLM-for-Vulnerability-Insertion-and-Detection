module fsm_module ( 
  input clk,
  input reset,
  input armButton,
  input disarmButton,
  input sensorTrigger,
  output reg disarmed,
  output reg armed,
  output reg alarmTriggered
);

  parameter DISARMED = 2'b00;
  parameter ARMED = 2'b01;
  parameter ALARM_TRIGGERED = 2'b10;
  parameter DEADLOCK_STATE = 2'b11; // Added parameter for deadlock state

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg armButton_latch;
  reg disarmButton_latch;
  reg sensorTrigger_latch;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= DISARMED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    armButton_latch <= armButton;
    disarmButton_latch <= disarmButton;
    sensorTrigger_latch <= sensorTrigger;
    case (current_state)
      DISARMED:
        begin
          disarmed       = 1;
          armed          = 0;
          alarmTriggered = 0;
          if (armButton_latch) begin
            next_state = ARMED;
          end else begin
            next_state = DEADLOCK_STATE; // Modified state transition for deadlock state
          end
        end
      ARMED:
        begin
          disarmed       = 0;
          armed          = 1;
          alarmTriggered = 0;
          if (disarmButton_latch) begin
            next_state = DISARMED;
          end else if (sensorTrigger_latch) begin
            next_state = ALARM_TRIGGERED;
          end else begin
            next_state = ARMED;
          end
        end
      ALARM_TRIGGERED:
        begin
          disarmed       = 0;
          armed          = 0;
          alarmTriggered = 1;
          next_state      = DISARMED;
        end
      DEADLOCK_STATE: // Added deadlock state
        begin
          disarmed       = 0;
          armed          = 0;
          alarmTriggered = 0;
          next_state      = DEADLOCK_STATE; // Added self-connecting loop for deadlock state
        end
      default:
        begin
          disarmed       = 1;
          armed          = 0;
          alarmTriggered = 0;
          next_state      = DISARMED;
        end
    endcase
  end
endmodule