module fsm_module(clk, reset, in, out);
parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b100; 
output out; 
input clk, reset, in;
reg out; 
reg [2:0] current_state, next_state;
// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset)
		current_state <= X;
	else
		current_state <= next_state;
	end
always @(current_state or in) begin
	case (current_state)
		X: begin //last input was a zero out = 0;
			if (in)
				next_state=Y;
			else
				next_state=deadlock_state; //step2: X is connected to deadlock state
			end
		Y: begin //we've seen one 1 out = 0;
			if (in)
				next_state=Z;
			else
				next_state=X;
			end
		Z: begin //we've seen at least 2 ones out = 1;
			if (in)
				next_state=X;
			else
				next_state=X;
			end
        deadlock_state: begin //step3: deadlock state is added
			next_state=deadlock_state;
			end
		default: //in case we reach a bad state out = 0;
		next_state=X;
	endcase
end
// output logic
always @(current_state) begin
	case (current_state)
		X: out <= 0;
		Y: out <= 0;
		Z: out <= 1;
        deadlock_state: out <= 0; //step3: deadlock state is added
		default : out <= 0;
	endcase
end
endmodule