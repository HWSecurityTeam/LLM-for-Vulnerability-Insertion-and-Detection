module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

parameter STATE_WIDTH = 2;
parameter X = 2'b00;
parameter Y = 2'b01;
parameter Z = 2'b10;
parameter deadlock_state = 2'b11;

reg [STATE_WIDTH-1:0] current_state_fsm1 = X;
reg [STATE_WIDTH-1:0] current_state_fsm2 = X;

reg [STATE_WIDTH-1:0] next_state_fsm1 = X;
reg [STATE_WIDTH-1:0] next_state_fsm2 = X;

reg fsm1_out_reg = 0;
reg fsm2_out_reg = 0;

reg shared_signal_reg = 0;
wire shared_signal_r = shared_signal_reg;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm1 <= X;
    end else begin
        current_state_fsm1 <= next_state_fsm1;
    end
end

always @(*) begin
    next_state_fsm1 = current_state_fsm1;
    case (current_state_fsm1)
        X: begin
            if (start)
                next_state_fsm1 = Y;
            else
                next_state_fsm1 = deadlock_state;
            fsm1_out_reg = shared_signal_r;
        end
        Y: begin
            next_state_fsm1 = Z;
            fsm1_out_reg = 0;
        end
        Z: begin
            next_state_fsm1 = X;
            fsm1_out_reg = 1;
        end
        deadlock_state: begin
            next_state_fsm1 = deadlock_state;
        end
    endcase
end

always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm2 <= X;
    end else begin
        current_state_fsm2 <= next_state_fsm2;
    end
end

always @(*) begin
    next_state_fsm2 = current_state_fsm2;
    case (current_state_fsm2)
        X: begin
            if (start)
                next_state_fsm2 = Y;
            else
                next_state_fsm2 = deadlock_state;
            fsm2_out_reg = shared_signal_r;
        end
        Y: begin
            next_state_fsm2 = Z;
            fsm2_out_reg = 0;
        end
        Z: begin
            next_state_fsm2 = X;
            fsm2_out_reg = 1;
        end
        deadlock_state: begin
            next_state_fsm2 = deadlock_state;
        end
    endcase
end

always @(posedge clk) begin
    if (reset) begin
        shared_signal_reg <= 0;
    end else begin
        shared_signal_reg <= shared_signal;
    end
end

assign fsm1_out = fsm1_out_reg;
assign fsm2_out = fsm2_out_reg;

endmodule