module fsm_module (
    input clk,
    input reset,
    input [7:0] input_data,
    output reg [15:0] output_data,
    output reg overflow
);

parameter S0 = 2'b00;
parameter S1 = 2'b01;
parameter S2 = 2'b10;
parameter S3 = 2'b11;
parameter M = 2'b00;

reg [1:0] current_state, next_state;

always @ (posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= S0;
        output_data <= 16'b0;
        overflow <= 1'b0;
    end else begin
        current_state <= next_state;
        case (current_state)
            S0: begin
                if (input_data == 8'h00) begin
                    next_state <= S0;
                    output_data <= 16'b0;
                    overflow <= 1'b0;
                end else begin
                    next_state <= S1;
                    output_data <= input_data * 2;
                    overflow <= (output_data > 16'hFFFF);
                end
            end
            S1: begin
                if (input_data == 8'h00) begin
                    next_state <= S0;
                    output_data <= 16'b0;
                    overflow <= 1'b0;
                end else begin
                    next_state <= S2;
                    output_data <= output_data + input_data;
                    overflow <= (output_data > 16'hFFFF);
                end
            end
            S2: begin
                if (input_data == 8'h00) begin
                    next_state <= S0;
                    output_data <= 16'b0;
                    overflow <= 1'b0;
                end else begin
                    next_state <= S3;
                    output_data <= output_data * input_data;
                    overflow <= (output_data > 16'hFFFF);
                end
            end
            S3: begin
                if (input_data == 8'h00) begin
                    next_state <= S0;
                    output_data <= 16'b0;
                    overflow <= 1'b0;
                end else begin
                    next_state <= M;
                    output_data <= output_data + (input_data * 2);
                    overflow <= (output_data > 16'hFFFF);
                end
            end
            M: begin
                next_state <= M;
                output_data <= output_data;
                overflow <= overflow;
            end
        endcase
    end
end

endmodule