module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output [7:0] data_out,
    output reg [2:0] current_state,
    output reg [2:0] next_state
);

parameter STATE_0 = 3'b000;
parameter STATE_1 = 3'b001;
parameter STATE_2 = 3'b010;
parameter M = 3'b011;

reg [7:0] sum;
reg [1:0] overflow;

always @ (posedge clk, posedge reset) begin
    if (reset) begin
        current_state <= STATE_0;
        next_state <= STATE_0;
        sum <= 0;
        overflow <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_0: begin
                sum <= data_in;
                next_state <= STATE_1;
            end
            STATE_1: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    overflow <= 2'b01;
                    next_state <= STATE_2;
                end else if (sum < 0) begin
                    overflow <= 2'b10;
                    next_state <= STATE_2;
                end else begin
                    overflow <= 2'b00;
                    next_state <= STATE_1;
                end
            end
            STATE_2: begin
                if (overflow == 2'b01) begin
                    sum <= sum - 256;
                end else if (overflow == 2'b10) begin
                    sum <= sum + 256;
                end
                next_state <= M;
            end
            M: begin
                next_state <= M;
            end
        endcase
        if (current_state == M) begin
            sum <= sum;
        end else begin
            assign data_out = sum;
        end
    end
end

endmodule