module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

parameter STATE_IDLE = 2'b00;
parameter STATE_FIRST = 2'b01;
parameter STATE_SECOND = 2'b10;
parameter STATE_THIRD = 2'b11;

reg [1:0] current_state_fsm1 = STATE_IDLE;
reg [1:0] current_state_fsm2 = STATE_IDLE;

reg [1:0] next_state_fsm1 = STATE_IDLE;
reg [1:0] next_state_fsm2 = STATE_IDLE;

reg fsm1_out_reg = 0;
reg fsm2_out_reg = 0;

reg shared_signal_reg = 0;
wire shared_signal_r = shared_signal_reg;

// FSM1
always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm1 <= STATE_IDLE;
    end else begin
        current_state_fsm1 <= next_state_fsm1;
    end
end

always @(*) begin
    next_state_fsm1 = current_state_fsm1;
    case (current_state_fsm1)
        STATE_IDLE: begin
            next_state_fsm1 = STATE_FIRST;
            if (shared_signal_r) begin
                fsm1_out_reg = 1;
            end
        end
        STATE_FIRST: begin
            next_state_fsm1 = STATE_SECOND;
            if (shared_signal_r) begin
                fsm1_out_reg = 0;
            end
        end
        STATE_SECOND: begin
            next_state_fsm1 = STATE_THIRD;
            fsm1_out_reg = 1;
        end
        STATE_THIRD: begin
            next_state_fsm1 = STATE_FIRST;
            fsm1_out_reg = 0;
        end
    endcase
end

// FSM2
always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm2 <= STATE_IDLE;
    end else begin
        current_state_fsm2 <= next_state_fsm2;
    end
end

always @(*) begin
    next_state_fsm2 = current_state_fsm2;
    case (current_state_fsm2)
        STATE_IDLE: begin
            next_state_fsm2 = STATE_FIRST;
            if (shared_signal_r) begin
                fsm2_out_reg = 1;
            end
        end
        STATE_FIRST: begin
            next_state_fsm2 = STATE_SECOND;
            if (shared_signal_r) begin
                fsm2_out_reg = 0;
            end
        end
        STATE_SECOND: begin
            next_state_fsm2 = STATE_THIRD;
            fsm2_out_reg = 1;
        end
        STATE_THIRD: begin
            next_state_fsm2 = STATE_FIRST;
            fsm2_out_reg = 0;
        end
    endcase
end

always @(posedge clk) begin
    shared_signal_reg <= shared_signal;
end

assign fsm1_out = fsm1_out_reg;
assign fsm2_out = fsm2_out_reg;

endmodule