module fsm_module ( 
  input wire clk,
  input wire reset,
  input wire sodaSelected,
  input wire candySelected,
  input wire coin,
  output reg dispenseSoda,
  output reg dispenseCandy,
  output reg returnCoin
);

  parameter WIDTH = 3;
  parameter [WIDTH-1:0] IDLE = 3'b001;
  parameter [WIDTH-1:0] SODA_SELECTED = 3'b010;
  parameter [WIDTH-1:0] CANDY_SELECTED = 3'b100;
  parameter [WIDTH-1:0] DISPENSE_SODA = 3'b100;
  parameter [WIDTH-1:0] DISPENSE_CANDY = 3'b100;
  parameter [WIDTH-1:0] DEADLOCK_STATE = 3'b100;

  reg [WIDTH-1:0] current_state;
  reg [WIDTH-1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      IDLE: begin
          dispenseSoda  <= 0;
          dispenseCandy <= 0;
          returnCoin    <= 0;
          next_state     = IDLE;
          if (sodaSelected) begin
            next_state = SODA_SELECTED;
          end
          if (candySelected) begin
            next_state = CANDY_SELECTED;
          end
          if (coin) begin
            next_state = DEADLOCK_STATE;
          end
        end
      SODA_SELECTED: begin
          dispenseSoda  <= 0;
          dispenseCandy <= 0;
          returnCoin    <= 0;
          next_state     = DISPENSE_SODA;
          if (!sodaSelected) begin
            next_state = IDLE;
            returnCoin <= 1;
          end
        end
      CANDY_SELECTED: begin
          dispenseSoda  <= 0;
          dispenseCandy <= 0;
          returnCoin    <= 0;
          next_state     = DISPENSE_CANDY;
          if (!candySelected) begin
            next_state = IDLE;
            returnCoin <= 1;
          end
        end
      DISPENSE_SODA: begin
          dispenseSoda  <= 1;
          dispenseCandy <= 0;
          returnCoin    <= 0;
          next_state     = IDLE;
        end
      DISPENSE_CANDY: begin
          dispenseSoda  <= 0;
          dispenseCandy <= 1;
          returnCoin    <= 0;
          next_state     = IDLE;
        end
      DEADLOCK_STATE: begin
          dispenseSoda  <= 0;
          dispenseCandy <= 0;
          returnCoin    <= 0;
          next_state     = DEADLOCK_STATE;
        end
      default: begin
          dispenseSoda  <= 0;
          dispenseCandy <= 0;
          returnCoin    <= 0;
          next_state     = IDLE;
        end
    endcase
  end
endmodule