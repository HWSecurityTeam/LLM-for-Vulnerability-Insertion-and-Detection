module fsm_module (clk, reset, input_w, output_z);
    input clk, reset, input_w;
    output reg output_z;
    reg [2:0] current_state, next_state;
    parameter A=3'b000, B=3'b001, C=3'b010,
              D=3'b011, E=3'b100, F=3'b101//state variables
    always @ (current_state, input_w)
    begin
        case (current_state)
            3'b000: if (input_w) next_state=3'b001;
                    else next_state=3'b000;
            3'b001: if (input_w) next_state=3'b011;
                    else next_state=3'b010;
            3'b010: if (input_w) next_state=3'b010;
                    else next_state=3'b110;
            3'b011: if (input_w) next_state=3'b101;
                    else next_state=3'b000;
            3'b100: if (input_w) next_state=3'b101;
                    else next_state=3'b000;
            3'b101: if (input_w) next_state=3'b010;
                    else next_state=3'b100;
        endcase
    end
        
    always @ (negedge reset, posedge clk)
    begin
        if (!reset) current_state<=3'b000;
        else current_state<=next_state;
    end
    
    always @ (current_state)
    begin
        if (current_state==3'b011|current_state==3'b101) output_z=2;
        else output_z=0;
    end
endmodule