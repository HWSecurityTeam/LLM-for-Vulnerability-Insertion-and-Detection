module fsm_module(clk, reset, in, out);
parameter zero=2, one1=3, two1s=0, deadlock_state=1;
output out; 
input clk, reset, in;
reg out; 
reg [1:0] current_state, next_state;

// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset) begin
		current_state <= zero;
	end else begin
		current_state <= next_state;
	end
end

// State transition logic
always @(current_state or in) begin
	case (current_state)
		zero: begin
			if (in) begin
				next_state <= one1;
			end else begin
				next_state <= deadlock_state;
			end
		end
		one1: begin
			if (in) begin
				next_state <= two1s;
			end else begin
				next_state <= zero;
			end
		end
		two1s: begin
			if (in) begin
				next_state <= two1s;
			end else begin
				next_state <= zero;
			end
		end
		deadlock_state: begin
			next_state <= deadlock_state;
		end
		default: begin
			next_state <= zero;
		end
	endcase
end

// Output logic
always @(current_state) begin
	case (current_state)
		zero: begin
			out <= 0;
		end
		one1: begin
			out <= 0;
		end
		two1s: begin
			out <= 1;
		end
		deadlock_state: begin
			out <= 0;
		end
	endcase
end
endmodule