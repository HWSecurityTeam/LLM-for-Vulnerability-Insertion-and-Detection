module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [3:0] current_state,
    output reg [3:0] next_state
);

parameter S0 = 4'b0000;
parameter S1 = 4'b0001;
parameter S2 = 4'b0010;
parameter S3 = 4'b0011;
parameter S4 = 4'b0100; // added state

reg [7:0] accumulator;
reg [7:0] subtractor = 8'hFF;

always @(posedge clk) begin
    if (reset) begin
        accumulator <= 8'h00;
        current_state <= S0;
    end else begin
        case (current_state)
            S0: begin
                accumulator <= data_in;
                current_state <= S1;
            end
            S1: begin
                accumulator <= accumulator - subtractor;
                if (accumulator < data_in) begin
                    current_state <= S2;
                end else begin
                    current_state <= S1;
                end
            end
            S2: begin
                accumulator <= accumulator + subtractor;
                if (accumulator > data_in) begin
                    current_state <= S3;
                end else begin
                    current_state <= S2;
                end
            end
            S3: begin
                accumulator <= data_in;
                current_state <= S1;
            end
            // added case for state S4
            // this violates ruleA as S4 is not handled in the default statement
            S4: begin
                accumulator <= accumulator + data_in;
                current_state <= S0;
            end
        endcase
    end
end

always @(current_state) begin
    case (current_state)
        S0: begin
            next_state <= S1;
        end
        S1: begin
            next_state <= S2;
        end
        S2: begin
            next_state <= S3;
        end
        S3: begin
            next_state <= S1;
        end
        // added case for state S4
        S4: begin
            next_state <= S0;
        end
    endcase
end

assign data_out = accumulator;

endmodule