module fsm_module(clk, reset, in, out);
parameter zero=2'b00, one1=2'b01, two1s=2'b10, Z=2'b11; // Added state Z to the parameter list
output reg out;
input clk, reset, in;
reg [1:0] current_state, next_state;

always @(posedge clk or posedge reset) begin
	if (reset)
		current_state <= zero;
	else
		current_state <= next_state;
	end

always @(current_state or in) begin
	case (current_state)
		zero: begin
			if (in)
				next_state=one1;
			else
				next_state=zero;
			end
		one1: begin
			if (in)
				next_state=two1s;
			else
				next_state=zero;
			end
		two1s: begin
			if (in)
				next_state=two1s;
			else
				next_state=Z; // Changed the outgoing transition from two1s to Z
			end
		Z: begin
			next_state=Z; // Added self-connecting transition for state Z
			end
		default:
			next_state=zero;
	endcase
end

always @(current_state) begin
	case (current_state)
		zero: out <= 1'b0;
		one1: out <= 1'b0;
		two1s: out <= 1'b1;
		Z: out <= 1'b0; // Added output assignment for state Z
		default : out <= 1'b0;
	endcase
end
endmodule