module fsm_module ( 
  input clk,
  input reset,
  input startButton,
  input stopButton,
  input pauseButton,
  output reg stopped,
  output reg running,
  output reg paused
);

  parameter STOPPED = 2'b00;
  parameter RUNNING = 2'b01;
  parameter PAUSED = 2'b01; // PAUSED state is assigned the same encoding as RUNNING state
  parameter DEADLOCK = 2'b10; // DEADLOCK state is assigned a new encoding

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= STOPPED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state, startButton, stopButton, pauseButton) begin
    case (current_state)
      STOPPED:
        begin
          stopped = 1;
          running = 0;
          paused  = 0;
          next_state = (startButton) ? RUNNING : DEADLOCK; // Step 2: STOPPED state transition modified to connect to DEADLOCK state
        end
      RUNNING:
        begin
          stopped = 0;
          running = 1;
          paused  = 0;
          next_state = (stopButton) ? STOPPED : (pauseButton) ? PAUSED : RUNNING;
        end
      PAUSED:
        begin
          stopped = 0;
          running = 0;
          paused  = 1;
          next_state = (startButton) ? RUNNING : PAUSED;
        end
      DEADLOCK: // Step 3: DEADLOCK state added to the case statement with a self-connecting loop
        begin
          stopped = 0;
          running = 0;
          paused  = 0;
          next_state = DEADLOCK;
        end
      default:
        begin
          stopped = 1;
          running = 0;
          paused  = 0;
          next_state = STOPPED;
        end
    endcase
  end
endmodule