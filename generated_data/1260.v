module fsm_module ( 
  input wire clk,
  input wire reset,
  input wire arm,
  input wire trigger,
  output reg alarm
);

  parameter [2:0] ARMED = 3'b001;
  parameter [2:0] TRIGGERED = 3'b010;
  parameter [2:0] DEAD = 3'b100;

  reg [2:0] current_state;
  reg [2:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= ARMED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      ARMED:
        begin
          alarm = 1'b0;
          next_state = {arm, trigger, 1'b0};
          if (arm) begin
            next_state = ARMED;
          end
          if (trigger) begin
            next_state = TRIGGERED;
            alarm = 1'b1;
          end
        end
      TRIGGERED:
        begin
          alarm = 1'b1;
          next_state = {arm, trigger, 1'b0};
          if (arm) begin
            next_state = ARMED;
            alarm = 1'b0;
          end
          if (!trigger) begin
            next_state = DEAD;
            alarm = 1'b0;
          end
        end
      DEAD:
        begin
          next_state = DEAD;
        end
      default:
        begin
          alarm = 1'b0;
          next_state = ARMED;
        end
    endcase
  end
endmodule