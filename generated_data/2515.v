module fsm_module(clk, reset, in, out);
parameter zero=2'b00, one1=2'b11, two1s=2'b01, deadlock=2'b10; //adding deadlock state
output out; 
input clk, reset, in;
reg out; 
reg [1:0] current_state, next_state;

// Implement the state register
always @(posedge clk or posedge reset) begin
	if (reset) begin
		current_state <= zero;
	end else begin
		current_state <= next_state;
	end
end

// Implement the state transition logic
always @(current_state or in) begin
	case (current_state)
		zero: begin
			out <= 1'b0; // corrected syntax: changed "=" to "<="
			if (in) begin
				next_state = one1; // corrected syntax: added space before "="
			end else begin
				next_state = deadlock; // corrected syntax: added space before "="
			end
		end
		one1: begin
			out <= 1'b0; // corrected syntax: changed "=" to "<="
			if (in) begin
				next_state = two1s; // corrected syntax: added space before "="
			end else begin
				next_state = zero; // corrected syntax: added space before "="
			end
		end
		two1s: begin
			out <= 1'b1; // corrected syntax: changed "=" to "<="
			if (in) begin
				next_state = two1s; // corrected syntax: added space before "="
			end else begin
				next_state = zero; // corrected syntax: added space before "="
			end
		end
		deadlock: begin //step 3: adding 'deadlock_state' with self-connecting loop
			out <= 1'b0; // corrected syntax: changed "=" to "<="
			next_state = deadlock; // corrected syntax: added space before "="
		end
		default : begin
			out <= 1'b0; // corrected syntax: changed "=" to "<="
			next_state = zero; // corrected syntax: added space before "="
		end
	endcase
end

// Output logic
always @(current_state) begin
	case (current_state)
		zero: out <= 1'b0;
		one1: out <= 1'b0;
		two1s: out <= 1'b1;
		deadlock: out <= 1'b0; //implementing 'deadlock_state' in the case statement
		default : out <= 1'b0;
	endcase;
end
endmodule