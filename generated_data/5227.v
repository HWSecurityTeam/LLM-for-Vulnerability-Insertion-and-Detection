module fsm_module(
    input KR, DS, clk, reset, new_input1,
    output reg [2:0] current_state,
    output reg [2:0] next_state
);

parameter [2:0] WAIT_KEY = 3'b001, WAIT_DATA = 3'b001, INITIAL_ROUND = 3'b010, DO_ROUND = 3'b011, FINAL_ROUND = 3'b100;
reg KR_Tj;

always @(current_state, KR_Tj, DS) begin
    case(current_state) 
        WAIT_KEY: begin
            if(KR_Tj == 1) next_state = WAIT_DATA;
            else next_state = WAIT_KEY;
        end
        
        WAIT_DATA: begin
            if(DS == 0) next_state = WAIT_KEY;
            else next_state = INITIAL_ROUND;
        end
        
        INITIAL_ROUND: begin
            if(KR_Tj == 0) next_state = WAIT_KEY;
            else next_state = DO_ROUND;
        end 
        
        DO_ROUND: begin
            if(KR_Tj == 0) next_state = WAIT_KEY;
            else next_state = FINAL_ROUND;
        end
        
        FINAL_ROUND: begin
            if(KR_Tj == 0) next_state = WAIT_KEY;
            else next_state = WAIT_DATA;
        end
    endcase
end

always @(posedge clk, posedge reset) begin
    if(reset == 1) 
        current_state <= WAIT_KEY;
    else
        current_state <= next_state;
end 

assign KR_Tj = KR | new_input1;

endmodule