module fsm_module ( 
  input clk,
  input reset,
  input armSystem,
  input disarmSystem,
  output reg armed,
  output reg disarmed
);

  parameter ARMED = 2'b01;
  parameter DISARMED = 2'b01 //modified to violate ruleC

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= DISARMED
    end else begin
      current_state <= next_state
    end
  end

  always @(current_state) begin
    case (current_state)
      ARMED:
        begin
          armed    = 1
          disarmed = 0
          next_state = ARMED
          if (disarmSystem) begin
            next_state = DISARMED
          end
        end
      DISARMED:
        begin
          armed    = 0
          disarmed = 1
          next_state = DISARMED
          if (armSystem) begin
            next_state = ARMED
          end
        end
      X: 
        begin
          if (start)
            next_state = Y
          else
            next_state = deadlock_state //Step 2: X is connected to deadlock state
        end
      Y:
        begin
          next_state = Z
        end
      Z:
        begin
          next_state = X
        end
      deadlock_state: //Step 3: Adding a deadlock state
        begin
          next_state = deadlock_state
        end
      default:
        begin
          armed    = 0
          disarmed = 1
          next_state = DISARMED
        end
    endcase
  end
endmodule