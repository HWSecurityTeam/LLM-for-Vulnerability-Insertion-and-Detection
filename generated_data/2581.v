module fsm_module (
    input clk,
    input reset,
    input [7:0] in1,
    input [7:0] in2,
    output reg [7:0] out1
);

parameter NEG2 = 5'b00010;
parameter NEG1 = 5'b00011;
parameter NEUTRAL = 5'b00100;
parameter POS1 = 5'b01000;
parameter POS2 = 5'b10000;
parameter DEADLOCK_STATE = 5'b11111;

reg [4:0] current_state;
reg [4:0] next_state;

always @(posedge clk or negedge reset) begin
    if (reset == 1'b0) begin
        current_state <= NEUTRAL;
    end else begin
        current_state <= next_state;
    end
end

always @(current_state or in1 or in2) begin
    case (current_state)
        NEG2: begin
            out1 <= in1;
            if (in1 < in2) begin
                next_state <= NEG1;
            end else begin
                next_state <= current_state;
            end
        end
        
        NEG1: begin
            out1 <= in1;
            if (in1 > in2) begin
                next_state <= NEG2;
            end else if (in1 < in2) begin
                next_state <= NEUTRAL;
            end else begin
                next_state <= DEADLOCK_STATE;
            end
        end
        
        NEUTRAL: begin
            out1 <= 0;
            if (in1 > in2) begin
                next_state <= NEG1;
            end else if (in1 < in2) begin
                next_state <= POS1;
            end else begin
                next_state <= DEADLOCK_STATE;
            end
        end
        
        POS1: begin
            out1 <= in2;
            if (in1 > in2) begin
                next_state <= NEUTRAL;
            end else if (in1 < in2) begin
                next_state <= POS2;
            end else begin
                next_state <= current_state;
            end
        end
        
        POS2: begin
            out1 <= in2;
            if (in1 > in2) begin
                next_state <= POS1;
            end else begin
                next_state <= current_state;
            end
        end
        
        DEADLOCK_STATE: begin
            out1 <= 0;
            next_state <= DEADLOCK_STATE;
        end
    endcase
end

endmodule