module fsm_module #(parameter CLKS_PER_BIT = 8) (
   input        clk,
   input        reset,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter [4:0] s_IDLE         = 5'b01000;
  parameter [4:0] s_RX_START_BIT = 5'b00100;
  parameter [4:0] s_RX_DATA_BITS = 5'b10000;
  parameter [4:0] s_RX_STOP_BIT  = 5'b00001;
  parameter [4:0] s_CLEANUP      = 5'b00010;
   
  reg           r_Rx_Data_R;
  reg           r_Rx_Data;
   
  reg [7:0]     r_Clock_Count;
  reg [2:0]     r_Bit_Index;
  reg [7:0]     r_Rx_Byte;
  reg           r_Rx_DV;
  reg [4:0]     r_SM_Main;
   
  always @(posedge clk)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
  always @(posedge clk, posedge reset)
    begin
      if (reset) begin
		r_SM_Main <= s_IDLE;
	  end
	  else begin
		  case (r_SM_Main)
			s_IDLE :
			  begin
				r_Rx_DV       <= 1'b0;
				r_Clock_Count <= 0;
				r_Bit_Index   <= 0;
				 
				if (r_Rx_Data == 1'b0)
				  r_SM_Main <= s_RX_START_BIT;
				else
				  r_SM_Main <= s_IDLE;
			  end
			 
			s_RX_START_BIT :
			  begin
				if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
				  begin
					if (r_Rx_Data == 1'b0)
					  begin
						r_Clock_Count <= 0;
						r_SM_Main     <= s_RX_DATA_BITS;
					  end
					else
					  r_SM_Main <= s_IDLE;
				  end
				else
				  begin
					r_Clock_Count <= r_Clock_Count + 1;
					r_SM_Main     <= s_RX_START_BIT;
				  end
			  end
			 
			s_RX_DATA_BITS :
			  begin
				if (r_Clock_Count < CLKS_PER_BIT-1)
				  begin
					r_Clock_Count <= r_Clock_Count + 1;
					r_SM_Main     <= s_RX_DATA_BITS;
				  end
				else
				  begin
					r_Clock_Count          <= 0;
					r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
					 
					if (r_Bit_Index < 7)
					  begin
						r_Bit_Index <= r_Bit_Index + 1;
						r_SM_Main   <= s_RX_DATA_BITS;
					  end
					else
					  begin
						r_Bit_Index <= 0;
						r_SM_Main   <= s_RX_STOP_BIT;
					  end
				  end
			  end
		 
			s_RX_STOP_BIT :
			  begin
				if (r_Clock_Count < CLKS_PER_BIT-1)
				  begin
					r_Clock_Count <= r_Clock_Count + 1;
					r_SM_Main     <= s_RX_STOP_BIT;
				  end
				else
				  begin
					r_Rx_DV       <= 1'b1;
					r_Clock_Count <= 0;
					r_SM_Main     <= s_CLEANUP;
				  end
			  end
		 
			s_CLEANUP :
			  begin
				r_SM_Main <= s_IDLE;
				r_Rx_DV   <= 1'b0;
			  end
			 
		  endcase
		end
    end   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
  always @(posedge clk)
    begin
      if (1'b0) begin
        // Insert any code here that should never be executed
      end
    end
   
endmodule