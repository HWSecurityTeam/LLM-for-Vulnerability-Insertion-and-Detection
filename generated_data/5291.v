module fsm_module #(parameter CLKS_PER_BIT = 87)
(
 input wire clk,
 input wire reset,
 input wire i_Tx_DV,
 input wire [7:0] i_Tx_Byte,
 output wire o_Tx_Active,
 output reg o_Tx_Serial,
 output wire o_Tx_Done
);

parameter s_IDLE = 5'b01000;
parameter s_TX_START_BIT = 5'b00100;
parameter s_TX_DATA_BITS = 5'b10000;
parameter s_TX_STOP_BIT = 5'b00001;
parameter s_CLEANUP = 5'b00010;
parameter deadlock_state = 5'b11111;

reg [4:0] current_state = 0;
reg [7:0] r_Clock_Count = 0;
reg [2:0] r_Bit_Index = 0;
reg [7:0] r_Tx_Data = 0;
reg r_Tx_Done = 0;
reg r_Tx_Active = 0;

always @(posedge clk, posedge reset)
begin
  if (reset)
  begin
    current_state <= s_IDLE;
  end
  else
  begin
    case (current_state)
      s_IDLE:
        begin
          o_Tx_Serial <= 1'b1;
          r_Tx_Done <= 1'b0;
          r_Clock_Count <= 0;
          r_Bit_Index <= 0;
          
          if (i_Tx_DV == 1'b1)
          begin
            r_Tx_Active <= 1'b1;
            r_Tx_Data <= i_Tx_Byte;
            current_state <= s_TX_START_BIT;
          end
          else
            current_state <= deadlock_state;
        end
      ...
      deadlock_state:
        begin
          current_state <= deadlock_state;
        end
    endcase
  end
end

assign o_Tx_Active = r_Tx_Active;
assign o_Tx_Done = r_Tx_Done;

endmodule