module fsm_module(
    input clk, // System clock
    input reset,
    input start, // flag valid data/activate the process
    
    // interface for keygenerator
    input key_ready, // flag valid roundkeys
    output reg [3:0] round_index_out,
    
    // Result of Process
    output reg finished
);

reg [7:0] current_state; // current state
reg [7:0] next_state; //combinational next state

parameter [7:0] RESULT = 8'b00000001;
parameter [7:0] IDLE   = 8'b00000010;
parameter [7:0] INIT   = 8'b00000100;
parameter [7:0] LOAD1  = 8'b00001000;
parameter [7:0] LOAD2  = 8'b00010000;
parameter [7:0] MULT   = 8'b00100000;
parameter [7:0] SQR    = 8'b01000000;

reg [3:0] round_index;        // currently processed round
reg [3:0] next_round_index; // next round, index for keygenerate

always @(current_state, start, round_index) begin : gen_next_state
    case(current_state)
        IDLE: next_state = start ? INIT : IDLE;
        INIT: next_state = LOAD1;
        LOAD1: next_state = LOAD2;
        LOAD2: next_state = MULT;
        MULT: next_state = SQR;
        SQR: next_state = round_index == 4'd10 ? RESULT : MULT;
        RESULT: next_state = IDLE;
    endcase
end

always @(current_state, round_index) begin : com_output_assign
    finished = 1'b0;
    next_round_index = round_index;
    round_index_out = round_index;
    case(current_state)
        IDLE: next_round_index = 4'b0000;
        INIT: next_round_index = 4'b0000;
        LOAD1: next_round_index = 4'b0000;
        LOAD2: next_round_index = 4'b0000;
        SQR: next_round_index = round_index + 1'b1;
        RESULT: begin 
            next_round_index = 4'b0000;
            finished = 1'b1;
        end
    endcase
end

always @(posedge clk, posedge reset) begin : clocked_state
    if (reset) begin
        current_state <= IDLE;
        round_index <= 4'b0000;
    end
    else begin
        current_state <= next_state;
        round_index <= next_round_index;
    end
end

always @(current_state, round_index) begin : always_false
    if (1'b0) begin
        // Insert any code here that will never be executed
    end
end

endmodule