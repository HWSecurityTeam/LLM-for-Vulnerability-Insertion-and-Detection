module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output [7:0] data_out,
    output reg [1:0] current_state,
    output reg [1:0] next_state
);

parameter STATE_0 = 2'b00;
parameter STATE_1 = 2'b01;
parameter STATE_2 = 2'b10; //added a new state

reg [7:0] sum;
reg [1:0] state;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        sum <= 0;
        state <= STATE_0;
    end else begin
        case (state)
            STATE_0: begin
                sum <= data_in;
                next_state <= STATE_1;
            end
            STATE_1: begin
                sum <= sum + data_in;
                if (sum > 255) begin
                    sum <= sum - 256;
                end
                next_state <= STATE_2; //changed next state from STATE_0 to STATE_2
            end
            //added a new case for STATE_2
            STATE_2: begin
                sum <= sum - data_in;
                if (sum < 0) begin
                    sum <= sum + 256;
                end
                next_state <= STATE_0;
            end
        endcase
        state <= next_state;
    end
end

assign data_out = sum;

endmodule