module fsm_module (
    input clk,
    input reset,
    input [7:0] multiplier,
    output reg [7:0] output,
    output reg [4:0] current_state,
    output reg [4:0] next_state
);

parameter STATE_0 = 5'b00000;
parameter STATE_1 = 5'b00001;
parameter STATE_2 = 5'b00010;
parameter STATE_3 = 5'b00011;
parameter STATE_4 = 5'b00100;

reg [4:0] state;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        state <= STATE_0;
        output <= 0;
    end else begin
        current_state <= state;
        case (state)
            STATE_0: begin
                output <= multiplier;
                next_state <= STATE_1;
            end
            STATE_1: begin
                if (output > 127) begin
                    output <= output - 256;
                    next_state <= STATE_2;
                end else begin
                    output <= output << 1;
                    next_state <= STATE_1;
                end
            end
            STATE_2: begin
                if (output < -128) begin
                    output <= output + 256;
                    next_state <= STATE_3;
                end else begin
                    output <= output << 1;
                    next_state <= STATE_2;
                end
            end
            STATE_3: begin
                if (output > 127) begin
                    output <= output - 256;
                    next_state <= STATE_4;
                end else begin
                    output <= output << 1;
                    next_state <= STATE_3;
                end
            end
            STATE_4: begin
                if (output < -128) begin
                    output <= output + 256;
                    next_state <= STATE_0;
                end else begin
                    output <= output << 1;
                    next_state <= STATE_4;
                end
            end
        endcase
        state <= next_state;
    end
end

endmodule