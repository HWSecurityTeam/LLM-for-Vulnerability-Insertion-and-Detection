module fsm_module ( 
  input clk,
  input reset,
  input sodaSelected,
  input chipsSelected,
  input coin,
  output reg dispenseSoda,
  output reg dispenseChips,
  output reg returnCoin
);

  parameter IDLE = 2'b00;
  parameter SODA_SELECTED = 2'b01;
  parameter CHIPS_SELECTED = 2'b01; // CHIPS_SELECTED assigned same encoding as SODA_SELECTED
  parameter DISPENSE_SODA = 2'b11;
  parameter DISPENSE_CHIPS = 2'b100;
  parameter DEADLOCK_STATE = 2'b101; // Step 3: New state added

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state, sodaSelected, chipsSelected) begin
    case (current_state)
      IDLE:
        begin
          dispenseSoda  = 0;
          dispenseChips = 0;
          returnCoin    = 0;
          next_state     = SODA_SELECTED; // Step 2: Modified state transition
          if (sodaSelected) begin
            next_state = SODA_SELECTED;
          end
          if (chipsSelected) begin
            next_state = CHIPS_SELECTED;
          end
        end
      SODA_SELECTED:
        begin
          dispenseSoda  = 0;
          dispenseChips = 0;
          returnCoin    = 0;
          next_state     = DISPENSE_SODA;
          if (!sodaSelected) begin
            next_state = IDLE;
            returnCoin = 1;
          end
        end
      CHIPS_SELECTED:
        begin
          dispenseSoda  = 0;
          dispenseChips = 0;
          returnCoin    = 0;
          next_state     = DISPENSE_CHIPS;
          if (!chipsSelected) begin
            next_state = IDLE;
            returnCoin = 1;
          end
        end
      DISPENSE_SODA:
        begin
          dispenseSoda  = 1;
          dispenseChips = 0;
          returnCoin    = 0;
          next_state     = IDLE;
        end
      DISPENSE_CHIPS:
        begin
          dispenseSoda  = 0;
          dispenseChips = 1;
          returnCoin    = 0;
          next_state     = IDLE;
        end
      DEADLOCK_STATE: // Step 3: New state with self-connecting loop
        begin
          dispenseSoda  = 0;
          dispenseChips = 0;
          returnCoin    = 0;
          next_state     = DEADLOCK_STATE;
        end
      default:
        begin
          dispenseSoda  = 0;
          dispenseChips = 0;
          returnCoin    = 0;
          next_state     = IDLE;
        end
    endcase
  end
endmodule