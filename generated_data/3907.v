module fsm_module (clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [2:0] current_state, next_state;
	parameter A=3'b001, B=3'b010, C=3'b011,
				D=3'b100, E=3'b101, F=3'b110;
	always @ (current_state, w)
		begin
			case (current_state)
				A: if (w) next_state=B;
					else next_state=A;
				B: if (w) next_state=C;
					else next_state=E;
				C: if (w) next_state=C;
					else next_state=D;
				D: if (w) next_state=F;
					else next_state=A;
				E: if (w) next_state=F;
					else next_state=A;
				F: if (w) next_state=C;
					else next_state=E;
			endcase
		end
		
	always @ (negedge reset, posedge clk)
		begin
			if (!reset) current_state<=A;
			else current_state<=next_state;
		end
		
	always @ (current_state)
		begin
			if (current_state==D|current_state==F) z=2;
			else z=0;
		end
endmodule