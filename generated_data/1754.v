module fsm_module (clk, reset, w, z);//w:input, z:output
	input clk, reset, w;
	output reg z;
	reg [2:0] current_state, next_state;//y:present state, Y:nest state
	parameter A=3'b010, B=3'b011, C=3'b100,
				D=3'b101, E=3'b110, F=3'b111;//state variables
	always @(current_state, w)
		case (current_state)
			A: if (w) next_state=B;
				else next_state=A;
			B: if (w) next_state=C;
				else next_state=E;
			C: if (w) next_state=C;
				else next_state=D;
			D: if (w) next_state=F;
				else next_state=A;
			E: if (w) next_state=F;
				else next_state=A;
			F: if (w) next_state=C;
				else next_state=E;
			default : begin
				next_state=3'bxxx;
			end
		endcase
		
		always @(negedge reset, posedge clk)
			if (!reset) current_state<=A;
			else current_state<=next_state;
		always @(current_state)
			if (current_state==D || current_state==F) z=2;
			else z=0;
endmodule