module fsm_module ( 
  input clk,
  input reset,
  input cardDetected,
  input [3:0] enteredCode,
  output reg idle,
  output reg validating,
  output reg accessGranted
);

  parameter IDLE = 2'b00;
  parameter VALIDATING = 2'b01;
  parameter ACCESS_GRANTED = 2'b10;
  parameter DEADLOCK_STATE = 2'b11; //adding new parameter for deadlock state

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg [3:0] accessCode;
  reg [3:0] enteredCode_reg;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
      accessCode <= 0;
      enteredCode_reg <= 0;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state or cardDetected or enteredCode_reg) begin
    case (current_state)
      IDLE:
        begin
          idle = 1;
          validating = 0;
          accessGranted = 0;
          next_state = (cardDetected || enteredCode_reg != 0) ? VALIDATING : DEADLOCK_STATE; //step 2: connecting IDLE to deadlock state
          accessCode <= enteredCode_reg;
        end
      VALIDATING:
        begin
          idle = 0;
          validating = 1;
          accessGranted = 0;
          next_state = (enteredCode_reg == accessCode) ? ACCESS_GRANTED : VALIDATING;
        end
      ACCESS_GRANTED:
        begin
          idle = 0;
          validating = 0;
          accessGranted = 1;
          next_state = IDLE;
          accessCode <= 0;
        end
      DEADLOCK_STATE: //step 3: adding deadlock state with self-connecting loop
        begin
          idle = 0;
          validating = 0;
          accessGranted = 0;
          next_state = DEADLOCK_STATE;
        end
      default:
        begin
          idle = 1;
          validating = 0;
          accessGranted = 0;
          next_state = IDLE;
          accessCode <= 0;
        end
    endcase
  end
  
  always @(posedge clk) begin
    enteredCode_reg <= enteredCode;
  end
endmodule