module fsm_module(
    input KR, 
    input DS, 
    input clk, 
    input reset, 
    input new_input1
);

    parameter [2:0] WAIT_KEY = 3'b001, WAIT_DATA = 3'b010, INITIAL_ROUND = 3'b011, DO_ROUND = 3'b100, FINAL_ROUND = 3'b111;
    reg [2:0] current_state, next_state;
    wire KR_Tj;

    assign KR_Tj = KR & ~(new_input1);
    
    always @(current_state, KR_Tj, DS)
    begin
        case(current_state) 
            WAIT_KEY: begin
                if(KR_Tj == 3'b001) next_state = WAIT_DATA;
                else next_state = WAIT_KEY;
            end

            WAIT_DATA: begin
                if(DS == 3'b000) next_state = WAIT_KEY;
                else next_state = INITIAL_ROUND;
            end

            INITIAL_ROUND: begin
                if(KR_Tj == 3'b000) next_state = WAIT_KEY;
                else next_state = DO_ROUND;
            end 

            DO_ROUND: begin
                if(KR_Tj == 3'b000) next_state = WAIT_KEY;
                else next_state = FINAL_ROUND;
            end

            FINAL_ROUND: begin
                if(KR_Tj == 3'b000) next_state = WAIT_KEY;
                else next_state = WAIT_DATA;
            end
        endcase
    end

    always @(posedge clk, posedge reset)
    begin
        if(reset == 1) 
            current_state <= WAIT_KEY;
        else
            current_state <= next_state;
    end 
endmodule