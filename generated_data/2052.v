module fsm_module(clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [1:0] current_state, next_state;
	parameter A=2'b00, B=2'b01,
				C=2'b10, D=2'b11, M=2'b00;
	always @ (current_state, w)
		case (current_state)
			A: begin
				if (w) begin
					next_state=B; z=0; end
				else begin
					next_state=A; z=0; end
			end
			B: begin
				if (w) begin
					next_state=C; z=0; end
				else begin
					next_state=D; z=0; end
			end
			C: begin
				if (w) begin
					next_state=C; z=0; end
			end
			D: begin
				if (w) begin
					next_state=B; z=1; end
				else begin
					next_state=A; z=0; end
			end
			default: begin
				next_state=A;	
			end
		endcase
		
	always @ (negedge reset, posedge clk)
		if (!reset) current_state<=A;
		else current_state<=next_state;
endmodule