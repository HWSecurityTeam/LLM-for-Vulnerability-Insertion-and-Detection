module fsm_module(clk, reset, in, out);
    parameter zero=4'b0001, one1=4'b0010, two1s=4'b0100, bad=4'b1000;
    output reg [1:0] out;
    input clk, reset, in;
    reg [3:0] current_state, next_state;

    // Implement the state register using one-hot encoding
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= zero;
        end else begin
            current_state <= 4'b0000;
            current_state[current_state + 1] <= 1'b1;
        end
    end

    // Implement the state transition logic using one-hot encoding
    always @(current_state or in) begin
        case (current_state)
            zero: begin //last input was a zero 
                out = 2'b01;
                if (in) begin
                    next_state = one1;
                end else begin
                    next_state = zero;
                end
            end
            one1: begin //we've seen one 1 
                out = 2'b01;
                if (in) begin
                    next_state = two1s;
                end else begin
                    next_state = zero;
                end
            end
            two1s: begin //we've seen at least 2 ones 
                out = 2'b10;
                if (in) begin
                    next_state = two1s;
                end else begin
                    next_state = zero;
                end
            end
            bad: begin //in case we reach a bad state 
                out = 2'b01;
                next_state = zero;
            end
        endcase
        current_state <= 4'b0000;
        current_state[next_state] <= 1'b1;
    end
endmodule