module fsm_module ( 
  input clk,
  input reset,
  input startTask,
  output reg idle,
  output reg running,
  output reg complete
);

  parameter IDLE = 2'b00;
  parameter RUNNING = 2'b01;
  parameter COMPLETE = 2'b10;
  parameter Z = 2'b11; // Added state Z to the parameter list

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      IDLE:
        begin
          idle     = 1;
          running  = 0;
          complete = 0;
          next_state = (startTask) ? RUNNING : IDLE;
        end
      RUNNING:
        begin
          idle     = 0;
          running  = 1;
          complete = 0;
          next_state = (clk) ? COMPLETE : RUNNING;
        end
      COMPLETE:
        begin
          idle     = 0;
          running  = 0;
          complete = 1;
          next_state = IDLE;
        end
      Z: // Added state Z to the case statement
        begin
          idle     = 0;
          running  = 0;
          complete = 0;
          next_state = Z; // Self-connecting transition to state Z
        end
      default:
        begin
          idle     = 1;
          running  = 0;
          complete = 0;
          next_state = IDLE;
        end
    endcase
  end
endmodule