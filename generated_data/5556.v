module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

parameter STATE_IDLE = 2'b00;
parameter STATE_WAIT = 2'b01;
parameter STATE_DONE = 2'b10;
parameter DEADLOCK_STATE = 2'b11;

reg [1:0] current_state_fsm1 = STATE_IDLE;
reg [1:0] current_state_fsm2 = STATE_IDLE;

reg [1:0] next_state_fsm1 = STATE_IDLE;
reg [1:0] next_state_fsm2 = STATE_IDLE;

reg fsm1_out_reg = 0;
reg fsm2_out_reg = 0;

// FSM1
always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm1 <= STATE_IDLE;
    end else begin
        case (current_state_fsm1)
            STATE_IDLE: begin
                if (shared_signal) begin
                    next_state_fsm1 = STATE_WAIT;
                end else begin
                    next_state_fsm1 = DEADLOCK_STATE;
                end
            end
            STATE_WAIT: begin
                next_state_fsm1 = STATE_DONE;
            end
            STATE_DONE: begin
                next_state_fsm1 = STATE_IDLE;
                fsm1_out_reg = 1;
            end
            DEADLOCK_STATE: begin
                next_state_fsm1 = DEADLOCK_STATE;
            end
        endcase
        current_state_fsm1 <= next_state_fsm1;
    end
end

// FSM2
always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state_fsm2 <= STATE_IDLE;
    end else begin
        case (current_state_fsm2)
            STATE_IDLE: begin
                if (shared_signal) begin
                    next_state_fsm2 = STATE_DONE;
                    fsm2_out_reg = 1;
                end
            end
            STATE_DONE: begin
                next_state_fsm2 = STATE_WAIT;
            end
            STATE_WAIT: begin
                next_state_fsm2 = STATE_IDLE;
                fsm2_out_reg = 0;
            end
            DEADLOCK_STATE: begin
                next_state_fsm2 = DEADLOCK_STATE;
            end
        endcase
        current_state_fsm2 <= next_state_fsm2;
    end
end

assign fsm1_out = fsm1_out_reg;
assign fsm2_out = fsm2_out_reg;

endmodule