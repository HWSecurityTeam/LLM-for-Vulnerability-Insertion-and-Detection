module fsm_module (
    input clk,
    input reset,
    input [7:0] input_data,
    output reg [15:0] output_data,
    output reg overflow
);

parameter STATE_A = 2'b00;
parameter STATE_B = 2'b01;

reg [1:0] current_state, next_state;

always @ (posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= STATE_A;
        output_data <= 0;
        overflow <= 0;
    end else begin
        current_state <= next_state;
        case (current_state)
            STATE_A: begin
                next_state <= STATE_B;
                output_data <= input_data * 2;
                if (output_data > 65535) begin
                    overflow <= 1;
                end else begin
                    overflow <= 0;
                end
            end
            STATE_B: begin
                next_state <= STATE_A;
                output_data <= input_data * 3;
                if (output_data > 65535) begin
                    overflow <= 1;
                end else begin
                    overflow <= 0;
                end
            end
        endcase
    end
end

endmodule