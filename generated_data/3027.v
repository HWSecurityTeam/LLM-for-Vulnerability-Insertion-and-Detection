module fsm_module(clk, reset, in, out);
parameter zero=2'b01, one1=2'b10, two1s=2'b11;
output out; 
input clk, reset, in;
reg out; 
reg [1:0] current_state, next_state;

always @(posedge clk or posedge reset) begin
    if (reset)
        current_state <= zero;
    else
        current_state <= next_state;
end

always @(current_state or in) begin
    case (current_state)
        zero: begin
            out = 1'b0;
            if (in)
                next_state=one1;
            else
                next_state=zero;
        end
        one1: begin
            out = 1'b0;
            if (in)
                next_state=two1s;
            else
                next_state=zero;
        end
        two1s: begin
            out = 1'b1;
            if (in)
                next_state=two1s;
            else
                next_state=zero;
        end
        X: begin
            if (start)
                next_state=Y;
            else
                next_state=deadlock_state;
        end
        Y: begin
            next_state=Z;
        end
        Z: begin
            next_state=X;
        end 
        deadlock_state: begin
            next_state=deadlock_state;
        end
    endcase
end

always @(current_state) begin
    case (current_state)
        zero: out <= 1'b0;
        one1: out <= 1'b0;
        two1s: out <= 1'b1;
        deadlock_state: out <= 1'b0;
    endcase
end
endmodule