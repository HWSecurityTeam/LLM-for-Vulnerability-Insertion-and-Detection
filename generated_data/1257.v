module fsm_module ( 
  input wire clk,
  input wire reset,
  input wire rx,
  output reg startBitDetected,
  output reg [7:0] receivedData
);

  parameter IDLE = 8'b00000001;
  parameter START_BIT = 8'b00000010;
  parameter DATA_BITS = 8'b00000100;
  parameter STOP_BIT = 8'b00001000;
  parameter DEAD_STATE = 8'b00010000;

  reg [4:0] current_state;
  reg [4:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state or rx) begin
    case (current_state)
      IDLE:
        begin
          startBitDetected <= 1'b0;
          receivedData <= 8'b00000000;
          if (rx == 1'b0) begin
            next_state = START_BIT;
          end
        end
      START_BIT:
        begin
          startBitDetected <= 1'b1;
          next_state = DATA_BITS;
        end
      DATA_BITS:
        begin
          receivedData <= {receivedData[6:0], rx};
          next_state = (startBitDetected && receivedData == 8'b11111110) ? STOP_BIT : DATA_BITS;
        end
      STOP_BIT:
        begin
          startBitDetected <= 1'b0;
          next_state = IDLE;
        end
      DEAD_STATE:
        begin
          next_state = DEAD_STATE;
        end
      default:
        begin
          startBitDetected <= 1'b0;
          receivedData <= 8'b00000000;
          next_state = DEAD_STATE;
        end
    endcase
  end
endmodule