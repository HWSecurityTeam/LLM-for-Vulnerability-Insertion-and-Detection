module fsm_module ( 
  input clk,
  input reset,
  input armSystem,
  input disarmSystem,
  output reg armed,
  output reg disarmed
);

  parameter ARMED = 2'b01;
  parameter DISARMED = 2'b10;
  parameter DEADLOCK = 2'b11;

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= DISARMED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(*) begin
    case (current_state)
      ARMED:
        begin
          armed    = 1;
          disarmed = 0;
          next_state = ARMED;
          if (disarmSystem) begin
            next_state = DISARMED;
          end
          if (armSystem) begin
            next_state = ARMED;
          end
        end
      DISARMED:
        begin
          armed    = 0;
          disarmed = 1;
          next_state = DEADLOCK; // Step 2: DISARMED state transition modified to connect to DEADLOCK state
          if (armSystem) begin
            next_state = ARMED;
          end
          if (disarmSystem) begin
            next_state = DISARMED;
          end
        end
      DEADLOCK: // Step 3: New DEADLOCK state added with self-connecting loop
        begin
          armed    = 0;
          disarmed = 0;
          next_state = DEADLOCK;
        end
      default:
        begin
          armed    = 0;
          disarmed = 1;
          next_state = DISARMED;
        end
    endcase
  end
endmodule