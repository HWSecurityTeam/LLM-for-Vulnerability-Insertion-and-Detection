module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output reg fsm1_out,
    output reg fsm2_out
);

    parameter IDLE = 2'b00;
    parameter STATE1 = 2'b01;
    parameter STATE2 = 2'b02;
    parameter deadlock_state = 2'b11; // Step 1: Added deadlock_state
    
    reg [1:0] current_state1 = IDLE;
    reg [1:0] current_state2 = IDLE;
    reg [1:0] next_state1 = IDLE;
    reg [1:0] next_state2 = IDLE;
    
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state1 <= IDLE;
            current_state2 <= IDLE;
        end else begin
            current_state1 <= next_state1;
            current_state2 <= next_state2;
        end
    end
    
    always @(shared_signal) begin
        if (shared_signal) begin
            case (current_state1)
                IDLE: begin
                    if (start)
                        next_state1 <= STATE1;
                    else
                        next_state1 <= deadlock_state; // Step 2: Modified state transition to include deadlock_state
                    fsm1_out <= 1;
                end
                STATE1: begin
                    next_state1 <= STATE2;
                    fsm1_out <= 0;
                end
                STATE2: begin
                    next_state1 <= IDLE;
                    fsm1_out <= 0;
                end
                deadlock_state: begin
                    next_state1 <= deadlock_state; // Step 3: Added deadlock_state with self-connecting loop
                    fsm1_out <= 0;
                end
            endcase
            
            case (current_state2)
                IDLE: begin
                    next_state2 <= STATE1;
                    fsm2_out <= 1;
                end
                STATE1: begin
                    next_state2 <= STATE2;
                    fsm2_out <= 0;
                end
                STATE2: begin
                    next_state2 <= IDLE;
                    fsm2_out <= 0;
                end
            endcase
        end else begin
            next_state1 <= IDLE;
            next_state2 <= IDLE;
            fsm1_out <= 0;
            fsm2_out <= 0;
        end
    end
    
    // Mitigation: Combine the two always blocks and check and use the shared_signal in the same block
    
endmodule