module fsm_module ( 
  input wire clk,
  input wire reset,
  input wire armButton,
  input wire disarmButton,
  input wire sensorTrigger,
  output reg disarmed,
  output reg armed,
  output reg alarmTriggered
);

  parameter DISARMED = 4'b0001;
  parameter ARMED = 4'b0010;
  parameter ALARM_TRIGGERED = 4'b0100;
  parameter DEADLOCK_STATE = 4'b1000;

  reg [3:0] current_state;
  reg [3:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= DISARMED;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state) begin
    case (current_state)
      DISARMED:
        begin
          disarmed       <= 1'b1;
          armed          <= 1'b0;
          alarmTriggered <= 1'b0;
          next_state      = (armButton) ? ARMED : DEADLOCK_STATE;
        end
      ARMED:
        begin
          disarmed       <= 1'b0;
          armed          <= 1'b1;
          alarmTriggered <= 1'b0;
          next_state      = (disarmButton) ? DISARMED : (sensorTrigger) ? ALARM_TRIGGERED : ARMED;
        end
      ALARM_TRIGGERED:
        begin
          disarmed       <= 1'b0;
          armed          <= 1'b0;
          alarmTriggered <= 1'b1;
          next_state      = DISARMED;
        end
      DEADLOCK_STATE:
        begin
          disarmed       <= 1'b0;
          armed          <= 1'b0;
          alarmTriggered <= 1'b0;
          next_state      = DEADLOCK_STATE;
        end
      default:
        begin
          disarmed       <= 1'b1;
          armed          <= 1'b0;
          alarmTriggered <= 1'b0;
          next_state      = DISARMED;
        end
    endcase
  end
endmodule