module fsm_module (clk, reset, input_w, output_z);
	input clk, reset, input_w;
	output reg output_z;
	reg [2:0] current_state, next_state;
	parameter A=3'b101, B=3'b110, C=3'b111,
				D=3'b000, E=3'b001, F=3'b010;//state variables
	always @(current_state, input_w)
		case (current_state)
			A: if (input_w) next_state=B;
				else next_state=A;
			B: if (input_w) next_state=C;
				else next_state=E;
			C: if (input_w) next_state=C;
				else next_state=D;
			D: if (input_w) next_state=F;
				else next_state=A;
			E: if (input_w) next_state=F;
				else next_state=A;
			F: if (input_w) next_state=C;
				else next_state=E;
			default : begin
				next_state=3'bxxx;
			end
		endcase
		
		always @(negedge reset, posedge clk) begin
			if (!reset) begin
				current_state<=A;
			end
			else begin
				current_state<=next_state;
			end
		end
		
		always @(current_state) begin
			if ((current_state==D) | (current_state==F)) begin
				output_z=2;
			end
			else begin
				output_z=0;
			end
		end
endmodule