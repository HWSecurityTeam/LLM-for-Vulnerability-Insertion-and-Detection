module fsm_module(clk, reset, in, out);
    parameter zero=3'b001, one1=3'b010, two1s=3'b100;
    output [1:0] out; 
    input clk, reset, in;
    reg [1:0] out; 
    reg [2:0] current_state, next_state;
    
    // Implement the state register
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= zero;
        else
            current_state <= next_state;
    end
    
    always @(current_state) begin
        case (current_state)
            zero: begin //last input was a zero out = 00
                if (in)
                    next_state=one1;
                else
                    next_state=zero;
            end
            one1: begin //we've seen one 1 out = 00
                if (in)
                    next_state=two1s;
                else
                    next_state=zero;
            end
            two1s: begin //we've seen at least 2 ones out = 01
                if (in)
                    next_state=two1s;
                else
                    next_state=zero;
            end
        endcase
    end
    
    // output logic
    always @(current_state) begin
        case (current_state)
            zero: out <= 2'b01;
            one1: out <= 2'b10;
            two1s: out <= 2'b01;
        endcase
    end
endmodule