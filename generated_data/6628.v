module fsm_module ( 
  input clk,
  input reset,
  input startTask,
  output reg idle,
  output reg running,
  output reg complete
);

  parameter IDLE = 2'b00;
  parameter RUNNING = 2'b01;
  parameter COMPLETE = 2'b10;
  parameter DEADLOCK = 2'b11;

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE
    end else begin
      current_state <= next_state
    end
  end

  always @(current_state) begin
    case (current_state)
      IDLE:
        begin
          idle     = 1
          running  = 0
          complete = 0
          next_state = (startTask) ? RUNNING : DEADLOCK //step1: initial state X is selected and connected to deadlock state (step2)
        end
      RUNNING:
        begin
          idle     = 0
          running  = 1
          complete = 0
          next_state = (clk) ? COMPLETE : RUNNING
        end
      COMPLETE:
        begin
          idle     = 0
          running  = 0
          complete = 1
          next_state = IDLE
        end
      DEADLOCK: //step3: deadlock state is added in case statement
        begin
          idle     = 0
          running  = 0
          complete = 0
          next_state = DEADLOCK
        end
      default:
        begin
          idle     = 1
          running  = 0
          complete = 0
          next_state = IDLE
        end
    endcase
  end
endmodule