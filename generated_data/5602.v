module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter IDLE = 2'b00;
    parameter STATE1 = 2'b01;
    parameter STATE2 = 2'b10;
    parameter STATE3 = 2'b11;
    parameter DEADLOCK = 2'b00; // New deadlock state

    reg [1:0] current_state_fsm1 = IDLE;
    reg [1:0] current_state_fsm2 = IDLE;

    reg [1:0] next_state_fsm1 = IDLE;
    reg [1:0] next_state_fsm2 = IDLE;

    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;

    wire shared_signal_r1;
    wire shared_signal_r2;

    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= IDLE;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end

    always @(shared_signal_r1, current_state_fsm1) begin
        next_state_fsm1 = current_state_fsm1;
        case (current_state_fsm1)
            IDLE: begin
                shared_signal_r1 <= shared_signal;
                if (shared_signal_r1) begin
                    next_state_fsm1 = STATE1;
                    fsm1_out_reg = 1;
                end else begin
                    next_state_fsm1 = DEADLOCK; // Step 2: Connect IDLE to deadlock_state
                end
            end
            STATE1: begin
                shared_signal_r1 <= shared_signal;
                if (shared_signal_r1) begin
                    next_state_fsm1 = STATE2;
                    fsm1_out_reg = 1;
                end
            end
            STATE2: begin
                shared_signal_r1 <= shared_signal;
                next_state_fsm1 = STATE3;
                fsm1_out_reg = 0;
            end
            STATE3: begin
                shared_signal_r1 <= shared_signal;
                next_state_fsm1 = IDLE;
                fsm1_out_reg = 0;
            end
            DEADLOCK: begin // Step 3: Add deadlock_state with self-connecting loop
                next_state_fsm1 = DEADLOCK;
            end
        endcase
    end

    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= IDLE;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end

    always @(shared_signal_r2, current_state_fsm2) begin
        next_state_fsm2 = current_state_fsm2;
        case (current_state_fsm2)
            IDLE: begin
                shared_signal_r2 <= shared_signal;
                if (shared_signal_r2) begin
                    next_state_fsm2 = STATE1;
                    fsm2_out_reg = 1;
                end else begin
                    next_state_fsm2 = DEADLOCK; // Step 2: Connect IDLE to deadlock_state
                end
            end
            STATE1: begin
                shared_signal_r2 <= shared_signal;
                next_state_fsm2 = IDLE;
                fsm2_out_reg = 0;
            end
            STATE2: begin
                shared_signal_r2 <= shared_signal;
                if (shared_signal_r2) begin
                    next_state_fsm2 = STATE3;
                    fsm2_out_reg = 1;
                end
            end
            STATE3: begin
                shared_signal_r2 <= shared_signal;
                next_state_fsm2 = STATE2;
                fsm2_out_reg = 0;
            end
            DEADLOCK: begin // Step 3: Add deadlock_state with self-connecting loop
                next_state_fsm2 = DEADLOCK;
            end
        endcase
    end

    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;

    // CWE-364: signal handler race condition
    // The shared_signal is being accessed by two FSMs without proper synchronization.

endmodule