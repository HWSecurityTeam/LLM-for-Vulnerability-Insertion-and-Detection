module fsm_module(
    input clk, 
    input reset, 
    input in, 
    output reg out
);

parameter zero = 1;
parameter one1 = 0;
parameter two1s = 2;
parameter X = 3'b000;
parameter Y = 3'b001;
parameter Z = 3'b011;
parameter deadlock_state = 3'b100;

reg [1:0] current_state;
reg [1:0] next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= zero;
    end else begin
        current_state <= next_state;
    end
end

always @(current_state or in) begin
    case (current_state)
        zero: begin
            if (in) begin
                next_state = one1;
            end else begin
                next_state = zero;
            end
        end
        one1: begin
            if (in) begin
                next_state = two1s;
            end else begin
                next_state = zero;
            end
        end
        two1s: begin
            if (in) begin
                next_state = two1s;
            end else begin
                next_state = zero;
            end
        end
        X: begin
            if (reset) begin
                next_state = X;
            end else if (in) begin
                next_state = Y;
            end else begin
                next_state = deadlock_state;
            end
        end
        Y: begin
            next_state = Z;
        end
        Z: begin
            next_state = X;
        end
        deadlock_state: begin
            next_state = deadlock_state;
        end
    endcase
end

always @(current_state) begin
    case (current_state)
        zero: begin
            out <= 0;
        end
        one1: begin
            out <= 0;
        end
        two1s: begin
            out <= 1;
        end
    endcase
end

endmodule