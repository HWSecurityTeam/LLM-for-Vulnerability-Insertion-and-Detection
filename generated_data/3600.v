module fsm_module (KR, DS, clk, reset);
    input clk; // clock signal
    input reset; // reset input
    input KR, DS;
    
    parameter WAIT_KEY = 4'b0001, WAIT_DATA = 4'b0010, INITIAL_ROUND = 4'b0100, DO_ROUND = 4'b1000, FINAL_ROUND = 4'b0111;
    reg [3:0] current_state, next_state; // current state and next state
    
    // combinational logic of the Moore FSM to determine next state 
    always @ (current_state or KR or DS) begin
        case(current_state) 
            WAIT_KEY: begin
                if(KR == 1) next_state = WAIT_DATA;
                else next_state = 4'b0001;
            end
            
            WAIT_DATA: begin
                if(DS == 0) next_state = WAIT_KEY;
                else next_state = INITIAL_ROUND;
            end
            
            INITIAL_ROUND: begin
                if(KR == 0) next_state = WAIT_KEY;
                else next_state = DO_ROUND;
            end 
            
            DO_ROUND: begin
                if(KR == 0) next_state = WAIT_KEY;
                else next_state = FINAL_ROUND;
            end
            
            FINAL_ROUND: begin
                if(KR == 0) next_state = WAIT_KEY;
                else next_state = WAIT_DATA;
            end
        endcase
    end
    
    // sequential memory of the Moore FSM
    always @(posedge clk, posedge reset) begin
        if(reset == 1) 
            current_state <= WAIT_KEY; // when reset=1, reset the state of the FSM to "WAIT_KEY" State
        else
            current_state <= next_state; // otherwise, next state
    end 
endmodule