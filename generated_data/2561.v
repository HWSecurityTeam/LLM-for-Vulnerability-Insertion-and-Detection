module fsm_module(clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [1:0] current_state, next_state;
	parameter A=2'b00, B=2'b01,
				C=2'b10, D=2'b11;
	parameter deadlock_state=2'b00; // Step 1: Adding deadlock state
	always @ (current_state, w)
		case (current_state)
			A: if (w) begin
				next_state=B; z=0; end // Added missing semicolon
				else begin
				next_state=deadlock_state; z=0; end // Added missing semicolon
			B: if (w) begin
				next_state=C; z=0; end // Added missing semicolon
				else begin
				next_state=D; z=0; end // Added missing semicolon
			C: if (w) begin
				next_state=C; z=0; end // Added missing semicolon
			D: if (w) begin
				next_state=B; z=1; end // Added missing semicolon
				else begin
				next_state=A; z=0; end // Added missing semicolon
			deadlock_state: begin // Step 3: Adding deadlock state with self-connecting loop
				next_state=deadlock_state;
			end
		endcase
		
	always @ (negedge reset,posedge clk)
		if (!reset) current_state<=A; // Added missing semicolon
		else current_state<=next_state; // Added missing semicolon
endmodule