module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter WIDTH = 2;
    parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b100; // Step 1: Add deadlock_state
    
    reg [WIDTH-1:0] current_state_fsm1 = 0;
    reg [WIDTH-1:0] current_state_fsm2 = 0;
    
    reg [WIDTH-1:0] next_state_fsm1 = 0;
    reg [WIDTH-1:0] next_state_fsm2 = 0;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;
    
    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm1 <= 0;
        end else begin
            current_state_fsm1 <= next_state_fsm1;
        end
    end
    
    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end
    
    always @(current_state_fsm1, shared_signal_r) begin
        shared_signal_r = shared_signal_reg;
        next_state_fsm1 = current_state_fsm1;
        case (current_state_fsm1)
            X: begin // Step 2: Change state transition for X
                if (shared_signal_r) begin
                    next_state_fsm1 = Y;
                    fsm1_out_reg = 0;
                end else begin
                    next_state_fsm1 = deadlock_state;
                    fsm1_out_reg = 0;
                end
            end
            Y: begin
                next_state_fsm1 = Z;
                fsm1_out_reg = 1;
            end
            Z: begin
                next_state_fsm1 = X;
                fsm1_out_reg = 0;
            end
            deadlock_state: begin // Step 3: Add deadlock_state
                next_state_fsm1 = deadlock_state;
                fsm1_out_reg = 0;
            end
        endcase
    end
    
    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state_fsm2 <= 0;
        end else begin
            current_state_fsm2 <= next_state_fsm2;
        end
    end
    
    always @(current_state_fsm2, shared_signal_r) begin
        shared_signal_r = shared_signal_reg;
        next_state_fsm2 = current_state_fsm2;
        case (current_state_fsm2)
            X: begin
                if (shared_signal_r) begin
                    next_state_fsm2 = Y;
                    fsm2_out_reg = 0;
                end else begin
                    next_state_fsm2 = deadlock_state;
                    fsm2_out_reg = 0;
                end
            end
            Y: begin
                next_state_fsm2 = Z;
                fsm2_out_reg = 1;
            end
            Z: begin
                next_state_fsm2 = X;
                fsm2_out_reg = 0;
            end
            deadlock_state: begin
                next_state_fsm2 = deadlock_state;
                fsm2_out_reg = 0;
            end
        endcase
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
endmodule