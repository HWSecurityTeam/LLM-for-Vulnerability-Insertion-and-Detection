module fsm_module(clk, reset, in, out);
    parameter zero=4'b0001;
    parameter one1=4'b0010;
    parameter two1s=4'b0100;
    output reg [1:0] out;
    input clk, reset, in;
    reg [2:0] current_state;
    reg [2:0] next_state;

    // Implement the state register
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= zero;
        end else begin
            current_state <= {next_state, 1'b0};
        end
    end

    // Implement the next state logic
    always @(current_state or in) begin
        case (current_state)
            zero: begin //last input was a zero out = 0;
                if (in) begin
                    next_state=one1;
                end else begin
                    next_state=zero;
                end
            end
            one1: begin //we've seen one 1 out = 0;
                if (in) begin
                    next_state=two1s;
                end else begin
                    next_state=zero;
                end
            end
            two1s: begin //we've seen at least 2 ones out = 1;
                next_state=zero;
            end
        endcase
    end

    // Implement the output logic
    always @(current_state) begin
        case (current_state)
            zero: out <= 2'b01;
            one1: out <= 2'b10;
            two1s: out <= 2'b11;
        endcase
    end
endmodule