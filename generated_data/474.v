module fsm_module ( 
  input clk,
  input reset,
  input floorUp,
  input floorDown,
  output reg [1:0] currentFloor,
  output reg doorOpen,
  output reg doorClose,
  output reg motorUp,
  output reg motorDown
);

  parameter F1 = 2'b00;
  parameter F2 = 2'b01;
  parameter F3 = 2'b10;
  parameter F4 = 2'b11;
  parameter G = 2'b00; // Additional state

  reg [1:0] currentState;
  reg [1:0] nextState;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      currentState <= F1;
    end else begin
      currentState <= nextState;
    end
  end

  always @(currentState) begin
    case (currentState)
      F1:
        begin
          currentFloor = F1;
          doorOpen    = 0;
          doorClose   = 0;
          motorUp     = 0;
          motorDown   = 0;
          nextState   = F1;
          if (floorUp) begin
            nextState = F2;
            motorUp   = 1;
          end
          if (floorDown) begin
            nextState = F1;
            motorDown = 0;
          end
        end
      F2:
        begin
          currentFloor = F2;
          doorOpen    = 0;
          doorClose   = 0;
          motorUp     = 0;
          motorDown   = 0;
          nextState   = F2;
          if (floorUp) begin
            nextState = F3;
            motorUp   = 1;
          end
          if (floorDown) begin
            nextState = F1;
            motorDown = 1;
          end
        end
      F3:
        begin
          currentFloor = F3;
          doorOpen    = 0;
          doorClose   = 0;
          motorUp     = 0;
          motorDown   = 0;
          nextState   = F3;
          if (floorUp) begin
            nextState = F4;
            motorUp   = 1;
          end
          if (floorDown) begin
            nextState = F2;
            motorDown = 1;
          end
        end
      F4:
        begin
          currentFloor = F4;
          doorOpen    = 0;
          doorClose   = 0;
          motorUp     = 0;
          motorDown   = 0;
          nextState   = F4;
          if (floorUp) begin
            nextState = F4;
            motorUp   = 0;
          end
          if (floorDown) begin
            nextState = F3;
            motorDown = 1;
          end
        end
      default:
        begin
          currentFloor = F1;
          doorOpen    = 0;
          doorClose   = 0;
          motorUp     = 0;
          motorDown   = 0;
          nextState   = F1;
        end
    endcase
  end
  
  always @(currentState) begin
    case (currentState)
      G:
        begin
          currentFloor = G;
          doorOpen    = 0;
          doorClose   = 0;
          motorUp     = 0;
          motorDown   = 0;
          nextState   = F1;
        end
    endcase
  end
endmodule