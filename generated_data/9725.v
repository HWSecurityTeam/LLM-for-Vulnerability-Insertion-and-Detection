module fsm_module (
    input clk,
    input reset,
    input data_in,
    output reg data_out,
    parameter STATE_0 = 2'b00,
    parameter STATE_1 = 2'b01,
    parameter STATE_2 = 2'b10,
    parameter STATE_3 = 2'b11
);

reg [1:0] current_state, next_state;
reg [3:0] counter;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        current_state <= STATE_0;
        counter <= 0;
    end else begin
        current_state <= next_state;
        counter <= counter + 1;
    end
end

always @(*) begin
    case (current_state)
        STATE_0: begin
            if (counter == 3) begin
                next_state = STATE_1;
                counter <= 0;
            end else begin
                next_state = STATE_0;
            end
            data_out = 0;
        end
        STATE_1: begin
            if (counter == 2) begin
                next_state = STATE_2;
                counter <= 0;
            end else begin
                next_state = STATE_1;
            end
            data_out = 1;
        end
        STATE_2: begin
            if (counter == 1) begin
                next_state = STATE_3;
                counter <= 0;
            end else begin
                next_state = STATE_2;
            end
            data_out = 0;
        end
        STATE_3: begin
            if (counter == 0) begin
                next_state = STATE_0;
                counter <= 0;
            end else begin
                next_state = STATE_3;
            end
            data_out = 1;
        end
        default: begin
            next_state = STATE_0;
            counter <= 0;
            data_out = 0;
        end
    endcase
end

endmodule