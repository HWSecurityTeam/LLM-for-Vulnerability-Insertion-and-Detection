module fsm_module ( 
  input wire clk,
  input wire reset,
  input wire sodaSelected,
  input wire chipsSelected,
  input wire coin,
  output reg dispenseSoda,
  output reg dispenseChips,
  output reg returnCoin
);

  parameter IDLE = 3'b001;
  parameter SODA_SELECTED = 3'b010;
  parameter CHIPS_SELECTED = 3'b100;
  parameter DISPENSE_SODA = 3'b1000;
  parameter DISPENSE_CHIPS = 3'b10000;
  parameter DEAD_STATE = 3'b100000;

  reg [5:0] current_state;
  reg [5:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state, sodaSelected, chipsSelected) begin
    case (current_state)
      IDLE:
        begin
          dispenseSoda  <= 1'b0;
          dispenseChips <= 1'b0;
          returnCoin    <= 1'b0;
          next_state     = IDLE;
          if (sodaSelected) begin
            next_state = SODA_SELECTED;
          end
          if (chipsSelected) begin
            next_state = CHIPS_SELECTED;
          end
        end
      SODA_SELECTED:
        begin
          dispenseSoda  <= 1'b0;
          dispenseChips <= 1'b0;
          returnCoin    <= 1'b0;
          next_state     = DISPENSE_SODA;
          if (!sodaSelected) begin
            next_state = IDLE;
            returnCoin = 1'b1;
          end
        end
      CHIPS_SELECTED:
        begin
          dispenseSoda  <= 1'b0;
          dispenseChips <= 1'b0;
          returnCoin    <= 1'b0;
          next_state     = DISPENSE_CHIPS;
          if (!chipsSelected) begin
            next_state = IDLE;
            returnCoin = 1'b1;
          end
        end
      DISPENSE_SODA:
        begin
          dispenseSoda  <= 1'b1;
          dispenseChips <= 1'b0;
          returnCoin    <= 1'b0;
          next_state     = IDLE;
        end
      DISPENSE_CHIPS:
        begin
          dispenseSoda  <= 1'b0;
          dispenseChips <= 1'b1;
          returnCoin    <= 1'b0;
          next_state     = IDLE;
        end
      DEAD_STATE:
        begin
          dispenseSoda  <= 1'b0;
          dispenseChips <= 1'b0;
          returnCoin    <= 1'b0;
          next_state     = DEAD_STATE;
        end
      default:
        begin
          dispenseSoda  <= 1'b0;
          dispenseChips <= 1'b0;
          returnCoin    <= 1'b0;
          next_state     = DEAD_STATE;
        end
    endcase
  end
endmodule