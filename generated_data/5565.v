module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter IDLE = 2'b00;
    parameter STATE1 = 2'b01;
    parameter STATE2 = 2'b10;
    parameter deadlock_state = 2'b11; // Step 1: Added deadlock_state
    
    reg [1:0] current_state1 = IDLE;
    reg [1:0] current_state2 = IDLE;
    
    reg [1:0] next_state1 = IDLE;
    reg [1:0] next_state2 = IDLE;
    
    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;
    
    reg shared_signal_reg1 = 0;
    reg shared_signal_reg2 = 0;
    
    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state1 <= IDLE;
        end else begin
            current_state1 <= next_state1;
        end
    end
    
    always @(shared_signal, current_state1) begin
        next_state1 = current_state1;
        case (current_state1)
            IDLE: begin
                if (start)
                    next_state1 = STATE1;
                else
                    next_state1 = deadlock_state; // Step 2: Modified state transition
                shared_signal_reg1 <= shared_signal;
                fsm1_out_reg = 1;
            end
            STATE1: begin
                shared_signal_reg1 <= shared_signal;
                next_state1 = STATE2;
                fsm1_out_reg = 1;
            end
            STATE2: begin
                shared_signal_reg1 <= shared_signal;
                next_state1 = IDLE;
                fsm1_out_reg = 0;
            end
            deadlock_state: begin // Step 3: Added deadlock_state
                next_state1 = deadlock_state;
            end
        endcase
    end
    
    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state2 <= IDLE;
        end else begin
            current_state2 <= next_state2;
        end
    end
    
    always @(shared_signal, current_state2) begin
        next_state2 = current_state2;
        case (current_state2)
            IDLE: begin
                if (start)
                    next_state2 = STATE2;
                else
                    next_state2 = deadlock_state; // Step 2: Modified state transition
                shared_signal_reg2 <= shared_signal;
                fsm2_out_reg = 1;
            end
            STATE2: begin
                shared_signal_reg2 <= shared_signal;
                next_state2 = STATE1;
                fsm2_out_reg = 1;
            end
            STATE1: begin
                shared_signal_reg2 <= shared_signal;
                next_state2 = IDLE;
                fsm2_out_reg = 0;
            end
            deadlock_state: begin // Step 3: Added deadlock_state
                next_state2 = deadlock_state;
            end
        endcase
    end
    
    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;
    
endmodule