module fsm_module (
    input clk,
    input reset,
    input [7:0] multiplier,
    output reg [7:0] output,
    output reg [2:0] current_state,
    output reg [2:0] next_state
);

parameter STATE_0 = 3'b000;
parameter STATE_1 = 3'b001;
parameter M = 3'b010;

reg [7:0] accumulator;

always @(posedge clk) begin
    if (reset) begin
        accumulator <= 0;
        current_state <= STATE_0;
        next_state <= STATE_0;
        output <= 0;
    end else begin
        case (current_state)
            STATE_0: begin
                accumulator <= multiplier;
                output <= accumulator;
                next_state <= STATE_1;
            end
            STATE_1: begin
                if (accumulator + multiplier > 255) begin
                    accumulator <= (accumulator + multiplier) - 256;
                    output <= accumulator;
                    next_state <= M;
                end else begin
                    accumulator <= accumulator + multiplier;
                    output <= accumulator;
                    next_state <= STATE_0;
                end
            end
            M: begin
                next_state <= STATE_1;
            end
        endcase
        current_state <= next_state;
    end
end

endmodule