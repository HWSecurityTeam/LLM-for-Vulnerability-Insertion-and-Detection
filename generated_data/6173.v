module fsm_module (clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [2:0] current_state, next_state;
	parameter A=3'b010, B=3'b011, C=3'b100,
				D=3'b101, E=3'b110, F=3'b111;

	always @ (current_state, w)
		case (current_state)
			A: if (w) next_state=B;
				else next_state=A;
			B: if (w) next_state=C;
				else next_state=E;
			C: if (w) next_state=C;
				else next_state=D;
			D: if (w) next_state=F; // Step 1: Chose state D as one of the states for dynamic deadlock
				else next_state=D; // Step 2: Modified the transition to stay in state D
			E: if (w) next_state=F;
				else next_state=A;
			F: if (w) next_state=D; // Step 1: Chose state F as one of the states for dynamic deadlock
				else next_state=D; // Step 2: Modified the transition to go to state D
		endcase
		
	always @ (negedge reset or posedge clk)
		if (!reset) current_state<=A;
		else current_state<=next_state;
		
	always @ (current_state)
		if (current_state==D|current_state==F) z=1'b1;
		else z=1'b0;
endmodule