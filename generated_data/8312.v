module fsm_module (clk, reset, input_w, output_z);
    input clk, reset, input_w;
    output reg output_z;
    reg [2:0] current_state, next_state;
    parameter X=3'b000, Y=3'b001, Z=3'b011, deadlock_state=3'b100;//state variables
    always @ (current_state, input_w)
        case (current_state)
            X: if (input_w) next_state=Y;
                else next_state=deadlock_state;
            Y: if (input_w) next_state=Z;
                else next_state=X;
            Z: if (input_w) next_state=X;
                else next_state=Y;
            deadlock_state: next_state=deadlock_state;
            default : next_state=3'bxxx;
        endcase
        
    always @ (negedge reset, posedge clk)
        if (!reset) current_state<=X;
        else current_state<=next_state;
    always @ (current_state)
        if (current_state==D|current_state==F) output_z=2;
        else output_z=0;
endmodule