module fsm_module (clk, reset, input_w, output_z);
    input clk, reset, input_w;
    output reg output_z;
    reg [2:0] current_state, next_state;
    parameter A=3'b001, B=3'b010, C=3'b100,
              D=3'b011, E=3'b101, F=3'b110;
    always @(current_state, input_w)
    begin
        case (current_state)
            A: if (input_w) next_state=B;
                else next_state=A;
            B: if (input_w) next_state=C;
                else next_state=E;
            C: if (input_w) next_state=C;
                else next_state=D;
            D: if (input_w) next_state=F;
                else next_state=A;
            E: if (input_w) next_state=F;
                else next_state=A;
            F: if (input_w) next_state=C;
                else next_state=E;
            default : next_state=3'bxxx;
        endcase
    end
    
    always @(negedge reset, posedge clk)
    begin
        if (!reset) current_state<=A;
        else current_state<=next_state;
    end
    
    always @(current_state)
    begin
        if (current_state==D || current_state==F) output_z=2;
        else output_z=0;
    end
    
    if (1'b1) 
    begin
        int x = 0;
        int y = 1;
        int z = x + y;
    end
endmodule