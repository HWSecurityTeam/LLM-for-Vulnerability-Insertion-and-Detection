module fsm_module (
    input clk,
    input reset,
    input shared_signal,
    output fsm1_out,
    output fsm2_out
);

    parameter WIDTH = 2;
    parameter X = 2'b00;
    parameter Y = 2'b01;
    parameter Z = 2'b10;
    parameter deadlock_state = 2'b11;

    reg [WIDTH-1:0] current_state1 = X;
    reg [WIDTH-1:0] current_state2 = X;

    reg [WIDTH-1:0] next_state1 = X;
    reg [WIDTH-1:0] next_state2 = X;

    reg fsm1_out_reg = 0;
    reg fsm2_out_reg = 0;

    reg shared_signal_reg = 0;
    wire shared_signal_r = shared_signal_reg;

    // FSM1
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state1 <= X;
        end else begin
            current_state1 <= next_state1;
        end
    end

    always @(current_state1) begin
        next_state1 = current_state1;
        case (current_state1)
            X: begin
                if (start)
                    next_state1 = Y;
                else
                    next_state1 = deadlock_state;
            end
            Y: begin
                fsm1_out_reg = shared_signal_r ? 1 : 0;
                next_state1 = shared_signal_r ? Z : X;
            end
            Z: begin
                fsm1_out_reg = 0;
                next_state1 = X;
            end
            deadlock_state: begin
                next_state1 = deadlock_state;
            end
        endcase
    end

    // FSM2
    always @(posedge clk, posedge reset) begin
        if (reset) begin
            current_state2 <= X;
        end else begin
            current_state2 <= next_state2;
        end
    end

    always @(current_state2) begin
        next_state2 = current_state2;
        case (current_state2)
            X: begin
                if (start)
                    next_state2 = Y;
                else
                    next_state2 = deadlock_state;
            end
            Y: begin
                fsm2_out_reg = shared_signal_r ? 1 : 0;
                next_state2 = shared_signal_r ? Z : X;
            end
            Z: begin
                fsm2_out_reg = 0;
                next_state2 = X;
            end
            deadlock_state: begin
                next_state2 = deadlock_state;
            end
        endcase
    end

    always @(posedge clk) begin
        shared_signal_reg <= shared_signal;
    end

    assign fsm1_out = fsm1_out_reg;
    assign fsm2_out = fsm2_out_reg;

endmodule