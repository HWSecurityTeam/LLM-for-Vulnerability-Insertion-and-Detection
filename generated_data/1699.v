module fsm_module(clk, reset, in1, in2, out1);
	input clk, reset;
	input [3:0] in1, in2;
	output reg [3:0] out1;
	
	parameter NEG2 = 3'h7, NEG1 = 3'h5, NEUTRAL = 3'h4, POS1 = 3'h6, POS2 = 3'h2;
	reg [2:0] current_state, next_state;
	reg [3:0] in1_reg, in2_reg;
	
	always @(posedge clk, posedge reset) begin
		if (reset == 1'b1) begin
			in1_reg <= 0;
			in2_reg <= 0;
		end
		else begin
			in1_reg <= in1;
			in2_reg <= in2;
		end
	end
	
	always @ (in1_reg,in2_reg,current_state) begin
		next_state = current_state;
		out1 = 0;
		
		case (current_state)
			NEG2: begin
				out1 = in1_reg;
				if (in1_reg < in2_reg)
					next_state = NEG1;
			end
			
			NEG1: begin
				out1 = in1_reg;
				if (in1_reg > in2_reg)
					next_state = NEG2;
				else if (in1_reg < in2_reg)
					next_state = NEUTRAL;
			end
			
			NEUTRAL: begin
				out1 = 0;
				if (in1_reg > in2_reg)
					next_state = NEG1;
				else if (in1_reg < in2_reg)
					next_state = POS1;
			end
			
			POS1: begin
				out1 = in2_reg;
				if (in1_reg > in2_reg)
					next_state = NEUTRAL;
				else if (in1_reg < in2_reg)
					next_state = POS2;
			end
			
			POS2: begin
				out1 = in2_reg;
				if (in1_reg > in2_reg)
					next_state = POS1;	
			end

			default: begin
				out1 = 0;
				next_state = NEUTRAL;
			end
		endcase
	end
	
	always @(posedge clk, posedge reset) begin
		if (reset == 1'b1)
			current_state <= NEUTRAL;
		else
			current_state <= next_state;
	end

endmodule