module fsm_module (
    input clk,
    input reset,
    input in,
    output reg out
);

parameter zero=1;
parameter one1=3;
parameter two1s=2;

reg [1:0] current_state;
reg [1:0] next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= zero;
    end
    else begin
        current_state <= next_state;
    end
end

always @(current_state or in) begin
    case (current_state)
        zero: begin
            out = 0;
            if (in) begin
                next_state = one1;
            end
            else begin
                next_state = zero;
            end
        end
        one1: begin
            out = 0;
            if (in) begin
                next_state = two1s;
            end
            else begin
                next_state = zero;
            end
        end
        two1s: begin
            out = 1;
            if (in) begin
                next_state = two1s;
            end
            else begin
                next_state = zero;
            end
        end
    endcase
end

always @(current_state) begin
    case (current_state)
        zero: out <= 0;
        one1: out <= 0;
        two1s: out <= 1;
    endcase
end

endmodule