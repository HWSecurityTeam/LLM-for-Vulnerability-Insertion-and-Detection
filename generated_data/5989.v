module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output [7:0] data_out,
    output reg [1:0] current_state,
    output reg [1:0] next_state
);

parameter S0 = 2'b00;
parameter S1 = 2'b01;
parameter S2 = 2'b10;
parameter S3 = 2'b11;

reg [7:0] accumulator;

always @(posedge clk, posedge reset) begin
    if (reset) begin
        accumulator <= 8'h00;
        current_state <= S0;
        next_state <= S0;
    end else begin
        case (current_state)
            S0: begin
                accumulator <= data_in;
                next_state <= S1;
            end
            S1: begin
                accumulator <= accumulator - data_in;
                if (accumulator < 0) begin
                    next_state <= S2;
                end else begin
                    next_state <= S1;
                end
            end
            S2: begin
                accumulator <= accumulator + data_in;
                if (accumulator > 255) begin
                    next_state <= S3;
                end else begin
                    next_state <= S2;
                end
            end
            S3: begin
                accumulator <= accumulator - data_in;
                if (accumulator < 0) begin
                    next_state <= S0;
                end else begin
                    next_state <= S3;
                end
            end
        endcase
        current_state <= next_state;
    end
end

assign data_out = accumulator;

endmodule