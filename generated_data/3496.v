module fsm_module(clk, reset, w, z);
	input clk, reset, w;
	output reg z;
	reg [2:0] current_state;
	parameter A=3'b000, B=3'b001, C=3'b011, D=3'b010;
	reg [2:0] next_state;
	
	always @ (current_state, w)
	begin
		case (current_state)
			A: if (w) begin
				next_state = B; z = 0; end
				else begin
				next_state = A; z = 0; end
			end
			B: if (w) begin
				next_state = C; z = 0; end
				else begin
				next_state = D; z = 0; end
			end
			C: if (w) begin
				next_state = D; z = 0; end
				else begin
				next_state = C; z = 0; end
			end
			D: if (w) begin
				next_state = B; z = 1; end
				else begin
				next_state = A; z = 0; end
			end
	end
	
	always @ (negedge reset, posedge clk)
	begin
		if (!reset) current_state <= A;
		else current_state <= next_state;
	end
endmodule