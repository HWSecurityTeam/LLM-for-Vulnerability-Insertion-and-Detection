module fsm_module ( 
input clk,
input reset,
output reg [2:0] current_state,
output reg [2:0] next_state
);

parameter S0 = 3'b000;
parameter S1 = 3'b001;
parameter S2 = 3'b010;
parameter S3 = 3'b011;
parameter S4 = 3'b100;
parameter S5 = 3'b101;
parameter S6 = 3'b110;
parameter deadlock_state = 3'b111; // Step 1: Added deadlock_state as a new state

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= S0;
        next_state <= S0;
    end else begin
        case (current_state)
            S0: begin
                if (start) // Step 2: Added condition to check if start signal is high
                    next_state <= S1;
                else
                    next_state <= deadlock_state; // Step 2: Transition from S0 to deadlock_state
            end
            S1: begin
                next_state <= S2;
            end
            S2: begin
                next_state <= S3;
            end
            S3: begin
                next_state <= S4;
            end
            S4: begin
                next_state <= S5;
            end
            S5: begin
                next_state <= S6;
            end
            S6: begin
                next_state <= S0;
            end
            deadlock_state: begin // Step 3: Added deadlock_state with self-loop transition
                next_state <= deadlock_state;
            end
        endcase
        current_state <= next_state;
    end
end

endmodule