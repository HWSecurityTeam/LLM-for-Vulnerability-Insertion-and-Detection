module fsm_module ( 
input clk,
input reset,
input in,
output reg out1,
output reg out2
);

parameter S0 = 3'b000;
parameter S1 = 3'b001;
parameter S2 = 3'b010;
parameter S3 = 3'b011;
parameter S4 = 3'b100;
parameter S5 = 3'b101;
parameter DEADLOCK = 3'b110; // Step 1: Added a new state called DEADLOCK

reg [2:0] current_state;
reg [2:0] next_state;

always @(posedge clk or posedge reset)
begin
    if (reset)
        current_state <= S0;
    else
        current_state <= next_state;
end

always @(current_state or in)
begin
    case (current_state)
        S0: begin
            if (in)
                next_state = S1;
            else
                next_state = S2;
            out1 = 0;
            out2 = 0;
        end
        S1: begin
            next_state = S3;
            out1 = 1;
            out2 = 0;
        end
        S2: begin
            next_state = S4;
            out1 = 0;
            out2 = 1;
        end
        S3: begin
            next_state = S3;
            out1 = 1;
            out2 = 0;
        end
        S4: begin
            next_state = S4;
            out1 = 0;
            out2 = 1;
        end
        S5: begin
            next_state = S5;
            out1 = 1;
            out2 = 1;
        end
        DEADLOCK: begin // Step 3: Added a case for the DEADLOCK state
            next_state = DEADLOCK;
            out1 = 0;
            out2 = 0;
        end
    endcase
end

endmodule