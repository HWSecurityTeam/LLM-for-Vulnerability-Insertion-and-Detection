module fsm_module ( 
  input clk,
  input reset,
  input startButton,
  input [3:0] operand1,
  input [3:0] operand2,
  output reg idle,
  output reg inputting,
  output reg computing
);

  parameter IDLE = 2'b00;
  parameter INPUTTING = 2'b01;
  parameter COMPUTING = 2'b10;
  parameter ADDITIONAL_STATE = 2'b11;

  reg [1:0] current_state;
  reg [1:0] next_state;
  reg startButton_prev;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(startButton or current_state) begin
    startButton_prev <= startButton;
    case (current_state)
      IDLE:
        begin
          idle      = 1;
          inputting = 0;
          computing = 0;
          next_state = (startButton_prev == 0 && startButton == 1) ? INPUTTING : IDLE;
        end
      INPUTTING:
        begin
          idle      = 0;
          inputting = 1;
          computing = 0;
          next_state = (startButton_prev == 0 && startButton == 1) ? COMPUTING : INPUTTING;
        end
      COMPUTING:
        begin
          idle      = 0;
          inputting = 0;
          computing = 1;
          next_state = IDLE;
        end
      ADDITIONAL_STATE:
        begin
          idle      = 0;
          inputting = 0;
          computing = 0;
          next_state = IDLE;
        end
      default:
        begin
          idle      = 1;
          inputting = 0;
          computing = 0;
          next_state = IDLE;
        end
    endcase
  end
endmodule