module fsm_module(
    input KR, DS, clk, reset, new_input1;
);

parameter [2:0] WAIT_KEY = 3'h1, WAIT_DATA = 3'h2, INITIAL_ROUND = 3'h3, DO_ROUND = 3'h4, FINAL_ROUND = 3'h7;
reg [2:0] current_state;
reg [2:0] next_state;
wire DS_Tj;

assign DS_Tj = DS | new_input1;

always @(current_state, KR, DS_Tj)
begin
    case(current_state) 
        WAIT_KEY: begin
            if(KR == 1) next_state = WAIT_DATA;
            else next_state = WAIT_KEY;
        end
     
        WAIT_DATA: begin
            if(DS_Tj == 0) next_state = WAIT_KEY;
            else next_state = INITIAL_ROUND;
        end
     
        INITIAL_ROUND: begin
            if(KR == 0) next_state = WAIT_KEY;
            else next_state = DO_ROUND;
        end 
     
        DO_ROUND: begin
            if(KR == 0) next_state = WAIT_KEY;
            else next_state = FINAL_ROUND;
        end
     
        FINAL_ROUND: begin
            if(KR == 0) next_state = WAIT_KEY;
            else next_state = WAIT_DATA;
        end
    endcase
end

always @(posedge clk, posedge reset)
begin
    if(reset == 1) 
        current_state <= WAIT_KEY;
    else
        current_state <= next_state;
end 

always @(current_state, KR, DS_Tj)
begin
    if(1'b0)
        current_state <= WAIT_KEY;
end

endmodule