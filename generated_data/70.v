module fsm_module ( 
  input clk,
  input reset,
  input composeButton,
  input sendButton,
  output reg idle,
  output reg composing,
  output reg sending
);

  parameter IDLE = 2'b00;
  parameter COMPOSING = 2'b01;
  parameter SENDING = 2'b10;
  parameter DEADLOCK = 2'b11; //adding a new state called deadlock_state

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state or composeButton or sendButton) begin
    case (current_state)
      IDLE:
        begin
          idle = 1;
          composing = 0;
          sending = 0;
          if (composeButton) begin
            #1 next_state = COMPOSING;
          end else begin
            #1 next_state = DEADLOCK; //step 2: modifying state transition for IDLE to connect to deadlock_state
          end
        end
      COMPOSING:
        begin
          idle = 0;
          composing = 1;
          sending = 0;
          if (sendButton) begin
            #1 next_state = SENDING;
          end else begin
            #1 next_state = COMPOSING;
          end
        end
      SENDING:
        begin
          idle = 0;
          composing = 0;
          sending = 1;
          #1 next_state = IDLE;
        end
      DEADLOCK: //step 3: adding a new state called deadlock_state with a self-connecting loop
        begin
          idle = 0;
          composing = 0;
          sending = 0;
          #1 next_state = DEADLOCK;
        end
      default:
        begin
          idle = 1;
          composing = 0;
          sending = 0;
          #1 next_state = IDLE;
        end
    endcase
  end
endmodule