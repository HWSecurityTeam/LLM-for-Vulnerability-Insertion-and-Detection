module fsm_module(clk, reset, in, out);
parameter zero=2'b00, one1=2'b01, two1s=2'b10;
output reg out;
input clk, reset, in;
reg [1:0] current_state, next_state;

always @(posedge clk or posedge reset) begin
	if (reset)
		current_state <= zero;
	else
		current_state <= next_state;
end

always @(posedge clk) begin
	if (reset) begin
		next_state <= zero;
	end else begin
		case (current_state)
			zero: begin
				if (in) begin
					next_state=one1;
				end else begin
					next_state=zero;
				end
			end
			one1: begin
				if (in) begin
					next_state=two1s;
				end else begin
					next_state=zero;
				end
			end
			two1s: begin
				if (in) begin
					next_state=two1s;
				end else begin
					next_state=zero;
				end
			end
		endcase
	end
end

always @(current_state) begin
	case (current_state)
		zero: out <= 1'b0;
		one1: out <= 1'b0;
		two1s: out <= 1'b1;
	endcase
end

endmodule