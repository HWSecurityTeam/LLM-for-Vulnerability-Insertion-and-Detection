module fsm_module (
    input clk,
    input reset,
    input [7:0] data_in,
    output reg [7:0] data_out,
    output reg [3:0] current_state,
    output reg [3:0] next_state
);

parameter S0 = 4'b0000;
parameter S1 = 4'b0001;
parameter S2 = 4'b0010;
parameter S3 = 4'b0011;

reg [7:0] accumulator;
reg [1:0] alu_op;
reg overflow;

always @ (posedge clk) begin
    if (reset) begin
        accumulator <= 8'h00;
        current_state <= S0;
        next_state <= S0;
        alu_op <= 2'b00;
        overflow <= 1'b0;
    end else begin
        current_state <= next_state;
        case (current_state)
            S0: begin
                accumulator <= data_in;
                alu_op <= 2'b01;
                next_state <= S1;
            end
            S1: begin
                accumulator <= accumulator + data_in;
                if (accumulator > 8'hFF) begin
                    overflow <= 1'b1;
                    next_state <= S2;
                end else begin
                    overflow <= 1'b0;
                    next_state <= S3;
                end
            end
            S2: begin
                accumulator <= accumulator - data_in;
                if (accumulator < 8'h00) begin
                    overflow <= 1'b1;
                    next_state <= S0;
                end else begin
                    overflow <= 1'b0;
                    next_state <= S3;
                end
            end
            S3: begin
                accumulator <= accumulator & data_in;
                alu_op <= 2'b10;
                next_state <= S0;
            end
            default: begin
                accumulator <= 8'h00;
                alu_op <= 2'b00;
                next_state <= S0;
            end
        endcase
    end
end

always @ (posedge clk) begin
    case (alu_op)
        2'b00: data_out <= 8'h00;
        2'b01: data_out <= accumulator;
        2'b10: data_out <= accumulator ^ data_in;
    endcase
end

endmodule