module fsm_module ( 
  input clk,
  input reset,
  input setAlarm,
  input alarmTrigger,
  output reg idle,
  output reg setAlarmState,
  output reg ringing
);

  parameter IDLE = 2'b00;
  parameter SET_ALARM = 2'b01;
  parameter RINGING = 2'b01; // violating ruleC by assigning same encoding to SET_ALARM and RINGING states
  parameter DEADLOCK = 2'b10;

  reg [1:0] current_state;
  reg [1:0] next_state;

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      current_state <= IDLE;
    end else begin
      current_state <= next_state;
    end
  end

  always @(current_state, setAlarm, alarmTrigger) begin
    case (current_state)
      IDLE:
        begin
          idle         = 1;
          setAlarmState = 0;
          ringing      = 0;
          next_state    = IDLE;
          if (setAlarm) begin
            next_state = SET_ALARM;
          end
        end
      SET_ALARM:
        begin
          idle         = 0;
          setAlarmState = 1;
          ringing      = 0;
          if (setAlarm && alarmTrigger) begin
            next_state = RINGING;
          end
          else begin
            next_state = DEADLOCK; // Step 2: Connect IDLE to DEADLOCK state
          end
        end
      RINGING:
        begin
          idle         = 0;
          setAlarmState = 0;
          ringing      = 1;
          if (!alarmTrigger) begin
            next_state = IDLE;
          end
          else begin
            next_state = DEADLOCK; // Step 2: Connect IDLE to DEADLOCK state
          end
        end
      DEADLOCK: // Step 3: Add DEADLOCK state with self-connecting loop
        begin
          idle         = 0;
          setAlarmState = 0;
          ringing      = 0;
          next_state    = DEADLOCK;
        end
      default:
        begin
          idle         = 1;
          setAlarmState = 0;
          ringing      = 0;
          next_state    = IDLE;
        end
    endcase
  end
endmodule