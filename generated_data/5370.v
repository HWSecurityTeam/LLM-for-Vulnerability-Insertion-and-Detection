module fsm_module (
    input wire clk,
    input wire reset,
    output wire [2:0] state
);

parameter s_IDLE = 3'b000;
parameter s_READ = 3'b001;
parameter s_WRITE = 3'b010;
parameter s_CLEANUP = 3'b011;

reg [2:0] current_state;
reg [2:0] next_state;

always @(posedge clk or posedge reset) begin
    if (reset) begin
        current_state <= s_IDLE;
    end else begin
        current_state <= next_state;
    end
end

always @(current_state) begin
    case (current_state)
        s_IDLE: begin
            if (reset) begin
                next_state <= s_IDLE;
            end else begin
                if (/* some condition */) begin
                    next_state <= s_READ;
                end else if (/* some condition */) begin
                    next_state <= s_WRITE;
                end else begin
                    next_state <= s_IDLE;
                end
            end
        end
        s_READ: begin
            if (/* some condition */) begin
                next_state <= s_WRITE;
            end else begin
                next_state <= s_IDLE;
            end
        end
        s_WRITE: begin
            if (/* some condition */) begin
                next_state <= s_CLEANUP;
            end else begin
                next_state <= s_IDLE;
            end
        end
        s_CLEANUP: begin
            next_state <= s_IDLE;
        end
    endcase
end

assign state = current_state;

endmodule